[
  {
    "number": 1,
    "title": "Two Sum",
    "titleSlug": "two-sum",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an array of integers nums&nbsp;and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. &nbsp; Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1] &nbsp; Constraints: 2 &lt;= nums.length &lt;= 104 -109 &lt;= nums[i] &lt;= 109 -109 &lt;= target &lt;= 109 Only one valid answer exists. &nbsp; Follow-up:&nbsp;Can you come up with an algorithm that is less than O(n2)&nbsp;time complexity?"
  },
  {
    "number": 2,
    "title": "Add Two Numbers",
    "titleSlug": "add-two-numbers",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Math",
      "Recursion"
    ],
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. &nbsp; Example 1: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807. Example 2: Input: l1 = [0], l2 = [0] Output: [0] Example 3: Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1] &nbsp; Constraints: The number of nodes in each linked list is in the range [1, 100]. 0 &lt;= Node.val &lt;= 9 It is guaranteed that the list represents a number that does not have leading zeros."
  },
  {
    "number": 3,
    "title": "Longest Substring Without Repeating Characters",
    "titleSlug": "longest-substring-without-repeating-characters",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given a string s, find the length of the longest substring without duplicate characters. &nbsp; Example 1: Input: s = &quot;abcabcbb&quot; Output: 3 Explanation: The answer is &quot;abc&quot;, with the length of 3. Example 2: Input: s = &quot;bbbbb&quot; Output: 1 Explanation: The answer is &quot;b&quot;, with the length of 1. Example 3: Input: s = &quot;pwwkew&quot; Output: 3 Explanation: The answer is &quot;wke&quot;, with the length of 3. Notice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring. &nbsp; Constraints: 0 &lt;= s.length &lt;= 5 * 104 s consists of English letters, digits, symbols and spaces."
  },
  {
    "number": 4,
    "title": "Median of Two Sorted Arrays",
    "titleSlug": "median-of-two-sorted-arrays",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer"
    ],
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). &nbsp; Example 1: Input: nums1 = [1,3], nums2 = [2] Output: 2.00000 Explanation: merged array = [1,2,3] and median is 2. Example 2: Input: nums1 = [1,2], nums2 = [3,4] Output: 2.50000 Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5. &nbsp; Constraints: nums1.length == m nums2.length == n 0 &lt;= m &lt;= 1000 0 &lt;= n &lt;= 1000 1 &lt;= m + n &lt;= 2000 -106 &lt;= nums1[i], nums2[i] &lt;= 106"
  },
  {
    "number": 5,
    "title": "Longest Palindromic Substring",
    "titleSlug": "longest-palindromic-substring",
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, return the longest palindromic substring in s. &nbsp; Example 1: Input: s = &quot;babad&quot; Output: &quot;bab&quot; Explanation: &quot;aba&quot; is also a valid answer. Example 2: Input: s = &quot;cbbd&quot; Output: &quot;bb&quot; &nbsp; Constraints: 1 &lt;= s.length &lt;= 1000 s consist of only digits and English letters."
  },
  {
    "number": 6,
    "title": "Zigzag Conversion",
    "titleSlug": "zigzag-conversion",
    "difficulty": "Medium",
    "tags": [
      "String"
    ],
    "description": "The string &quot;PAYPALISHIRING&quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) P A H N A P L S I I G Y I R And then read line by line: &quot;PAHNAPLSIIGYIR&quot; Write the code that will take a string and make this conversion given a number of rows: string convert(string s, int numRows); &nbsp; Example 1: Input: s = &quot;PAYPALISHIRING&quot;, numRows = 3 Output: &quot;PAHNAPLSIIGYIR&quot; Example 2: Input: s = &quot;PAYPALISHIRING&quot;, numRows = 4 Output: &quot;PINALSIGYAHRPI&quot; Explanation: P I N A L S I G Y A H R P I Example 3: Input: s = &quot;A&quot;, numRows = 1 Output: &quot;A&quot; &nbsp; Constraints: 1 &lt;= s.length &lt;= 1000 s consists of English letters (lower-case and upper-case), &#39;,&#39; and &#39;.&#39;. 1 &lt;= numRows &lt;= 1000"
  },
  {
    "number": 7,
    "title": "Reverse Integer",
    "titleSlug": "reverse-integer",
    "difficulty": "Medium",
    "tags": [
      "Math"
    ],
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned). &nbsp; Example 1: Input: x = 123 Output: 321 Example 2: Input: x = -123 Output: -321 Example 3: Input: x = 120 Output: 21 &nbsp; Constraints: -231 &lt;= x &lt;= 231 - 1"
  },
  {
    "number": 8,
    "title": "String to Integer (atoi)",
    "titleSlug": "string-to-integer-atoi",
    "difficulty": "Medium",
    "tags": [
      "String"
    ],
    "description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer. The algorithm for myAtoi(string s) is as follows: Whitespace: Ignore any leading whitespace (&quot; &quot;). Signedness: Determine the sign by checking if the next character is &#39;-&#39; or &#39;+&#39;, assuming positivity if neither present. Conversion: Read the integer by skipping leading zeros&nbsp;until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0. Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1. Return the integer as the final result. &nbsp; Example 1: Input: s = &quot;42&quot; Output: 42 Explanation: The underlined characters are what is read in and the caret is the current reader position. Step 1: &quot;42&quot; (no characters read because there is no leading whitespace) ^ Step 2: &quot;42&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;) ^ Step 3: &quot;42&quot; (&quot;42&quot; is read in) ^ Example 2: Input: s = &quot; -042&quot; Output: -42 Explanation: Step 1: &quot; -042&quot; (leading whitespace is read and ignored) ^ Step 2: &quot; -042&quot; (&#39;-&#39; is read, so the result should be negative) ^ Step 3: &quot; -042&quot; (&quot;042&quot; is read in, leading zeros ignored in the result) ^ Example 3: Input: s = &quot;1337c0d3&quot; Output: 1337 Explanation: Step 1: &quot;1337c0d3&quot; (no characters read because there is no leading whitespace) ^ Step 2: &quot;1337c0d3&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;) ^ Step 3: &quot;1337c0d3&quot; (&quot;1337&quot; is read in; reading stops because the next character is a non-digit) ^ Example 4: Input: s = &quot;0-1&quot; Output: 0 Explanation: Step 1: &quot;0-1&quot; (no characters read because there is no leading whitespace) ^ Step 2: &quot;0-1&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;) ^ Step 3: &quot;0-1&quot; (&quot;0&quot; is read in; reading stops because the next character is a non-digit) ^ Example 5: Input: s = &quot;words and 987&quot; Output: 0 Explanation: Reading stops at the first non-digit character &#39;w&#39;. &nbsp; Constraints: 0 &lt;= s.length &lt;= 200 s consists of English letters (lower-case and upper-case), digits (0-9), &#39; &#39;, &#39;+&#39;, &#39;-&#39;, and &#39;.&#39;."
  },
  {
    "number": 9,
    "title": "Palindrome Number",
    "titleSlug": "palindrome-number",
    "difficulty": "Easy",
    "tags": [
      "Math"
    ],
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise. &nbsp; Example 1: Input: x = 121 Output: true Explanation: 121 reads as 121 from left to right and from right to left. Example 2: Input: x = -121 Output: false Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. Example 3: Input: x = 10 Output: false Explanation: Reads 01 from right to left. Therefore it is not a palindrome. &nbsp; Constraints: -231&nbsp;&lt;= x &lt;= 231&nbsp;- 1 &nbsp; Follow up: Could you solve it without converting the integer to a string?"
  },
  {
    "number": 10,
    "title": "Regular Expression Matching",
    "titleSlug": "regular-expression-matching",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming",
      "Recursion"
    ],
    "description": "Given an input string s&nbsp;and a pattern p, implement regular expression matching with support for &#39;.&#39; and &#39;*&#39; where: &#39;.&#39; Matches any single character.​​​​ &#39;*&#39; Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). &nbsp; Example 1: Input: s = &quot;aa&quot;, p = &quot;a&quot; Output: false Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;. Example 2: Input: s = &quot;aa&quot;, p = &quot;a*&quot; Output: true Explanation: &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;. Example 3: Input: s = &quot;ab&quot;, p = &quot;.*&quot; Output: true Explanation: &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;. &nbsp; Constraints: 1 &lt;= s.length&nbsp;&lt;= 20 1 &lt;= p.length&nbsp;&lt;= 20 s contains only lowercase English letters. p contains only lowercase English letters, &#39;.&#39;, and&nbsp;&#39;*&#39;. It is guaranteed for each appearance of the character &#39;*&#39;, there will be a previous valid character to match."
  },
  {
    "number": 11,
    "title": "Container With Most Water",
    "titleSlug": "container-with-most-water",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Notice that you may not slant the container. &nbsp; Example 1: Input: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. Example 2: Input: height = [1,1] Output: 1 &nbsp; Constraints: n == height.length 2 &lt;= n &lt;= 105 0 &lt;= height[i] &lt;= 104"
  },
  {
    "number": 12,
    "title": "Integer to Roman",
    "titleSlug": "integer-to-roman",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "description": "Seven different symbols represent Roman numerals with the following values: Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are formed by appending&nbsp;the conversions of&nbsp;decimal place values&nbsp;from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules: If the value does not start with 4 or&nbsp;9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral. If the value starts with 4 or 9 use the&nbsp;subtractive form&nbsp;representing&nbsp;one symbol subtracted from the following symbol, for example,&nbsp;4 is 1 (I) less than 5 (V): IV&nbsp;and 9 is 1 (I) less than 10 (X): IX.&nbsp;Only the following subtractive forms are used: 4 (IV), 9 (IX),&nbsp;40 (XL), 90 (XC), 400 (CD) and 900 (CM). Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5&nbsp;(V), 50 (L), or 500 (D) multiple times. If you need to append a symbol&nbsp;4 times&nbsp;use the subtractive form. Given an integer, convert it to a Roman numeral. &nbsp; Example 1: Input: num = 3749 Output: &quot;MMMDCCXLIX&quot; Explanation: 3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M) 700 = DCC as 500 (D) + 100 (C) + 100 (C) 40 = XL as 10 (X) less of 50 (L) 9 = IX as 1 (I) less of 10 (X) Note: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places Example 2: Input: num = 58 Output: &quot;LVIII&quot; Explanation: 50 = L 8 = VIII Example 3: Input: num = 1994 Output: &quot;MCMXCIV&quot; Explanation: 1000 = M 900 = CM 90 = XC 4 = IV &nbsp; Constraints: 1 &lt;= num &lt;= 3999"
  },
  {
    "number": 13,
    "title": "Roman to Integer",
    "titleSlug": "roman-to-integer",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "description": "Roman numerals are represented by seven different symbols:&nbsp;I, V, X, L, C, D and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example,&nbsp;2 is written as II&nbsp;in Roman numeral, just two ones added together. 12 is written as&nbsp;XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: I can be placed before V (5) and X (10) to make 4 and 9.&nbsp; X can be placed before L (50) and C (100) to make 40 and 90.&nbsp; C can be placed before D (500) and M (1000) to make 400 and 900. Given a roman numeral, convert it to an integer. &nbsp; Example 1: Input: s = &quot;III&quot; Output: 3 Explanation: III = 3. Example 2: Input: s = &quot;LVIII&quot; Output: 58 Explanation: L = 50, V= 5, III = 3. Example 3: Input: s = &quot;MCMXCIV&quot; Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. &nbsp; Constraints: 1 &lt;= s.length &lt;= 15 s contains only&nbsp;the characters (&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;). It is guaranteed&nbsp;that s is a valid roman numeral in the range [1, 3999]."
  },
  {
    "number": 14,
    "title": "Longest Common Prefix",
    "titleSlug": "longest-common-prefix",
    "difficulty": "Easy",
    "tags": [
      "String",
      "Trie"
    ],
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string &quot;&quot;. &nbsp; Example 1: Input: strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;] Output: &quot;fl&quot; Example 2: Input: strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;] Output: &quot;&quot; Explanation: There is no common prefix among the input strings. &nbsp; Constraints: 1 &lt;= strs.length &lt;= 200 0 &lt;= strs[i].length &lt;= 200 strs[i] consists of only lowercase English letters if it is non-empty."
  },
  {
    "number": 15,
    "title": "3Sum",
    "titleSlug": "3sum",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. &nbsp; Example 1: Input: nums = [-1,0,1,2,-1,-4] Output: [[-1,-1,2],[-1,0,1]] Explanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter. Example 2: Input: nums = [0,1,1] Output: [] Explanation: The only possible triplet does not sum up to 0. Example 3: Input: nums = [0,0,0] Output: [[0,0,0]] Explanation: The only possible triplet sums up to 0. &nbsp; Constraints: 3 &lt;= nums.length &lt;= 3000 -105 &lt;= nums[i] &lt;= 105"
  },
  {
    "number": 16,
    "title": "3Sum Closest",
    "titleSlug": "3sum-closest",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution. &nbsp; Example 1: Input: nums = [-1,2,1,-4], target = 1 Output: 2 Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2). Example 2: Input: nums = [0,0,0], target = 1 Output: 0 Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0). &nbsp; Constraints: 3 &lt;= nums.length &lt;= 500 -1000 &lt;= nums[i] &lt;= 1000 -104 &lt;= target &lt;= 104"
  },
  {
    "number": 17,
    "title": "Letter Combinations of a Phone Number",
    "titleSlug": "letter-combinations-of-a-phone-number",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Backtracking"
    ],
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order. A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. &nbsp; Example 1: Input: digits = &quot;23&quot; Output: [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;] Example 2: Input: digits = &quot;&quot; Output: [] Example 3: Input: digits = &quot;2&quot; Output: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] &nbsp; Constraints: 0 &lt;= digits.length &lt;= 4 digits[i] is a digit in the range [&#39;2&#39;, &#39;9&#39;]."
  },
  {
    "number": 18,
    "title": "4Sum",
    "titleSlug": "4sum",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that: 0 &lt;= a, b, c, d&nbsp;&lt; n a, b, c, and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target You may return the answer in any order. &nbsp; Example 1: Input: nums = [1,0,-1,0,-2,2], target = 0 Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] Example 2: Input: nums = [2,2,2,2,2], target = 8 Output: [[2,2,2,2]] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 200 -109 &lt;= nums[i] &lt;= 109 -109 &lt;= target &lt;= 109"
  },
  {
    "number": 19,
    "title": "Remove Nth Node From End of List",
    "titleSlug": "remove-nth-node-from-end-of-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head. &nbsp; Example 1: Input: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Example 2: Input: head = [1], n = 1 Output: [] Example 3: Input: head = [1,2], n = 1 Output: [1] &nbsp; Constraints: The number of nodes in the list is sz. 1 &lt;= sz &lt;= 30 0 &lt;= Node.val &lt;= 100 1 &lt;= n &lt;= sz &nbsp; Follow up: Could you do this in one pass?"
  },
  {
    "number": 20,
    "title": "Valid Parentheses",
    "titleSlug": "valid-parentheses",
    "difficulty": "Easy",
    "tags": [
      "String",
      "Stack"
    ],
    "description": "Given a string s containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type. &nbsp; Example 1: Input: s = &quot;()&quot; Output: true Example 2: Input: s = &quot;()[]{}&quot; Output: true Example 3: Input: s = &quot;(]&quot; Output: false Example 4: Input: s = &quot;([])&quot; Output: true &nbsp; Constraints: 1 &lt;= s.length &lt;= 104 s consists of parentheses only &#39;()[]{}&#39;."
  },
  {
    "number": 21,
    "title": "Merge Two Sorted Lists",
    "titleSlug": "merge-two-sorted-lists",
    "difficulty": "Easy",
    "tags": [
      "Linked List",
      "Recursion"
    ],
    "description": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list. &nbsp; Example 1: Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: list1 = [], list2 = [] Output: [] Example 3: Input: list1 = [], list2 = [0] Output: [0] &nbsp; Constraints: The number of nodes in both lists is in the range [0, 50]. -100 &lt;= Node.val &lt;= 100 Both list1 and list2 are sorted in non-decreasing order."
  },
  {
    "number": 22,
    "title": "Generate Parentheses",
    "titleSlug": "generate-parentheses",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. &nbsp; Example 1: Input: n = 3 Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] Example 2: Input: n = 1 Output: [\"()\"] &nbsp; Constraints: 1 &lt;= n &lt;= 8"
  },
  {
    "number": 23,
    "title": "Merge k Sorted Lists",
    "titleSlug": "merge-k-sorted-lists",
    "difficulty": "Hard",
    "tags": [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it. &nbsp; Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked-lists are: [ 1-&gt;4-&gt;5, 1-&gt;3-&gt;4, 2-&gt;6 ] merging them into one sorted list: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6 Example 2: Input: lists = [] Output: [] Example 3: Input: lists = [[]] Output: [] &nbsp; Constraints: k == lists.length 0 &lt;= k &lt;= 104 0 &lt;= lists[i].length &lt;= 500 -104 &lt;= lists[i][j] &lt;= 104 lists[i] is sorted in ascending order. The sum of lists[i].length will not exceed 104."
  },
  {
    "number": 24,
    "title": "Swap Nodes in Pairs",
    "titleSlug": "swap-nodes-in-pairs",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Recursion"
    ],
    "description": "Given a&nbsp;linked list, swap every two adjacent nodes and return its head. You must solve the problem without&nbsp;modifying the values in the list&#39;s nodes (i.e., only nodes themselves may be changed.) &nbsp; Example 1: Input: head = [1,2,3,4] Output: [2,1,4,3] Explanation: Example 2: Input: head = [] Output: [] Example 3: Input: head = [1] Output: [1] Example 4: Input: head = [1,2,3] Output: [2,1,3] &nbsp; Constraints: The number of nodes in the&nbsp;list&nbsp;is in the range [0, 100]. 0 &lt;= Node.val &lt;= 100"
  },
  {
    "number": 25,
    "title": "Reverse Nodes in k-Group",
    "titleSlug": "reverse-nodes-in-k-group",
    "difficulty": "Hard",
    "tags": [
      "Linked List",
      "Recursion"
    ],
    "description": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is. You may not alter the values in the list&#39;s nodes, only nodes themselves may be changed. &nbsp; Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [2,1,4,3,5] Example 2: Input: head = [1,2,3,4,5], k = 3 Output: [3,2,1,4,5] &nbsp; Constraints: The number of nodes in the list is n. 1 &lt;= k &lt;= n &lt;= 5000 0 &lt;= Node.val &lt;= 1000 &nbsp; Follow-up: Can you solve the problem in O(1) extra memory space?"
  },
  {
    "number": 26,
    "title": "Remove Duplicates from Sorted Array",
    "titleSlug": "remove-duplicates-from-sorted-array",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums. Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things: Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums. Return k. Custom Judge: The judge will test your solution with the following code: int[] nums = [...]; // Input array int[] expectedNums = [...]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length; for (int i = 0; i &lt; k; i++) { assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted. &nbsp; Example 1: Input: nums = [1,1,2] Output: 2, nums = [1,2,_] Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0,1,2,3,4,_,_,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). &nbsp; Constraints: 1 &lt;= nums.length &lt;= 3 * 104 -100 &lt;= nums[i] &lt;= 100 nums is sorted in non-decreasing order."
  },
  {
    "number": 27,
    "title": "Remove Element",
    "titleSlug": "remove-element",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val. Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things: Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums. Return k. Custom Judge: The judge will test your solution with the following code: int[] nums = [...]; // Input array int val = ...; // Value to remove int[] expectedNums = [...]; // The expected answer with correct length. // It is sorted with no values equaling val. int k = removeElement(nums, val); // Calls your implementation assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i &lt; actualLength; i++) { assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted. &nbsp; Example 1: Input: nums = [3,2,2,3], val = 3 Output: 2, nums = [2,2,_,_] Explanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: Input: nums = [0,1,2,2,3,0,4,2], val = 2 Output: 5, nums = [0,1,4,0,3,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. Note that the five elements can be returned in any order. It does not matter what you leave beyond the returned k (hence they are underscores). &nbsp; Constraints: 0 &lt;= nums.length &lt;= 100 0 &lt;= nums[i] &lt;= 50 0 &lt;= val &lt;= 100"
  },
  {
    "number": 28,
    "title": "Find the Index of the First Occurrence in a String",
    "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String",
      "String Matching"
    ],
    "description": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. &nbsp; Example 1: Input: haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot; Output: 0 Explanation: &quot;sad&quot; occurs at index 0 and 6. The first occurrence is at index 0, so we return 0. Example 2: Input: haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot; Output: -1 Explanation: &quot;leeto&quot; did not occur in &quot;leetcode&quot;, so we return -1. &nbsp; Constraints: 1 &lt;= haystack.length, needle.length &lt;= 104 haystack and needle consist of only lowercase English characters."
  },
  {
    "number": 29,
    "title": "Divide Two Integers",
    "titleSlug": "divide-two-integers",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator. The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2. Return the quotient after dividing dividend by divisor. Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [&minus;231, 231 &minus; 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231. &nbsp; Example 1: Input: dividend = 10, divisor = 3 Output: 3 Explanation: 10/3 = 3.33333.. which is truncated to 3. Example 2: Input: dividend = 7, divisor = -3 Output: -2 Explanation: 7/-3 = -2.33333.. which is truncated to -2. &nbsp; Constraints: -231 &lt;= dividend, divisor &lt;= 231 - 1 divisor != 0"
  },
  {
    "number": 30,
    "title": "Substring with Concatenation of All Words",
    "titleSlug": "substring-with-concatenation-of-all-words",
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string s and an array of strings words. All the strings of words are of the same length. A concatenated string is a string that exactly contains all the strings of any permutation of words concatenated. For example, if words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;], then &quot;abcdef&quot;, &quot;abefcd&quot;, &quot;cdabef&quot;, &quot;cdefab&quot;, &quot;efabcd&quot;, and &quot;efcdab&quot; are all concatenated strings. &quot;acdbef&quot; is not a concatenated string because it is not the concatenation of any permutation of words. Return an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order. &nbsp; Example 1: Input: s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;] Output: [0,9] Explanation: The substring starting at 0 is &quot;barfoo&quot;. It is the concatenation of [&quot;bar&quot;,&quot;foo&quot;] which is a permutation of words. The substring starting at 9 is &quot;foobar&quot;. It is the concatenation of [&quot;foo&quot;,&quot;bar&quot;] which is a permutation of words. Example 2: Input: s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;] Output: [] Explanation: There is no concatenated substring. Example 3: Input: s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;] Output: [6,9,12] Explanation: The substring starting at 6 is &quot;foobarthe&quot;. It is the concatenation of [&quot;foo&quot;,&quot;bar&quot;,&quot;the&quot;]. The substring starting at 9 is &quot;barthefoo&quot;. It is the concatenation of [&quot;bar&quot;,&quot;the&quot;,&quot;foo&quot;]. The substring starting at 12 is &quot;thefoobar&quot;. It is the concatenation of [&quot;the&quot;,&quot;foo&quot;,&quot;bar&quot;]. &nbsp; Constraints: 1 &lt;= s.length &lt;= 104 1 &lt;= words.length &lt;= 5000 1 &lt;= words[i].length &lt;= 30 s and words[i] consist of lowercase English letters."
  },
  {
    "number": 31,
    "title": "Next Permutation",
    "titleSlug": "next-permutation",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "description": "A permutation of an array of integers is an arrangement of its members into a sequence or linear order. For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]. The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). For example, the next permutation of arr = [1,2,3] is [1,3,2]. Similarly, the next permutation of arr = [2,3,1] is [3,1,2]. While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement. Given an array of integers nums, find the next permutation of nums. The replacement must be in place and use only constant extra memory. &nbsp; Example 1: Input: nums = [1,2,3] Output: [1,3,2] Example 2: Input: nums = [3,2,1] Output: [1,2,3] Example 3: Input: nums = [1,1,5] Output: [1,5,1] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 100 0 &lt;= nums[i] &lt;= 100"
  },
  {
    "number": 32,
    "title": "Longest Valid Parentheses",
    "titleSlug": "longest-valid-parentheses",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "description": "Given a string containing just the characters &#39;(&#39; and &#39;)&#39;, return the length of the longest valid (well-formed) parentheses substring. &nbsp; Example 1: Input: s = &quot;(()&quot; Output: 2 Explanation: The longest valid parentheses substring is &quot;()&quot;. Example 2: Input: s = &quot;)()())&quot; Output: 4 Explanation: The longest valid parentheses substring is &quot;()()&quot;. Example 3: Input: s = &quot;&quot; Output: 0 &nbsp; Constraints: 0 &lt;= s.length &lt;= 3 * 104 s[i] is &#39;(&#39;, or &#39;)&#39;."
  },
  {
    "number": 33,
    "title": "Search in Rotated Sorted Array",
    "titleSlug": "search-in-rotated-sorted-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "description": "There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 &lt;= k &lt; nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]. Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums. You must write an algorithm with O(log n) runtime complexity. &nbsp; Example 1: Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 Example 2: Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 Example 3: Input: nums = [1], target = 0 Output: -1 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 5000 -104 &lt;= nums[i] &lt;= 104 All values of nums are unique. nums is an ascending array that is possibly rotated. -104 &lt;= target &lt;= 104"
  },
  {
    "number": 34,
    "title": "Find First and Last Position of Element in Sorted Array",
    "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "description": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value. If target is not found in the array, return [-1, -1]. You must&nbsp;write an algorithm with&nbsp;O(log n) runtime complexity. &nbsp; Example 1: Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4] Example 2: Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1] Example 3: Input: nums = [], target = 0 Output: [-1,-1] &nbsp; Constraints: 0 &lt;= nums.length &lt;= 105 -109&nbsp;&lt;= nums[i]&nbsp;&lt;= 109 nums is a non-decreasing array. -109&nbsp;&lt;= target&nbsp;&lt;= 109"
  },
  {
    "number": 35,
    "title": "Search Insert Position",
    "titleSlug": "search-insert-position",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must&nbsp;write an algorithm with&nbsp;O(log n) runtime complexity. &nbsp; Example 1: Input: nums = [1,3,5,6], target = 5 Output: 2 Example 2: Input: nums = [1,3,5,6], target = 2 Output: 1 Example 3: Input: nums = [1,3,5,6], target = 7 Output: 4 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 104 -104 &lt;= nums[i] &lt;= 104 nums contains distinct values sorted in ascending order. -104 &lt;= target &lt;= 104"
  },
  {
    "number": 36,
    "title": "Valid Sudoku",
    "titleSlug": "valid-sudoku",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": "Determine if a&nbsp;9 x 9 Sudoku board&nbsp;is valid.&nbsp;Only the filled cells need to be validated&nbsp;according to the following rules: Each row&nbsp;must contain the&nbsp;digits&nbsp;1-9 without repetition. Each column must contain the digits&nbsp;1-9&nbsp;without repetition. Each of the nine&nbsp;3 x 3 sub-boxes of the grid must contain the digits&nbsp;1-9&nbsp;without repetition. Note: A Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned&nbsp;rules. &nbsp; Example 1: Input: board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;] ,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;] ,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;] ,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;] ,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;] ,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;] ,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;] ,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;] ,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]] Output: true Example 2: Input: board = [[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;] ,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;] ,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;] ,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;] ,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;] ,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;] ,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;] ,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;] ,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]] Output: false Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid. &nbsp; Constraints: board.length == 9 board[i].length == 9 board[i][j] is a digit 1-9 or &#39;.&#39;."
  },
  {
    "number": 37,
    "title": "Sudoku Solver",
    "titleSlug": "sudoku-solver",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Backtracking",
      "Matrix"
    ],
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy all of the following rules: Each of the digits 1-9 must occur exactly once in each row. Each of the digits 1-9 must occur exactly once in each column. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid. The &#39;.&#39; character indicates empty cells. &nbsp; Example 1: Input: board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]] Output: [[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]] Explanation:&nbsp;The input board is shown above and the only valid solution is shown below: &nbsp; Constraints: board.length == 9 board[i].length == 9 board[i][j] is a digit or &#39;.&#39;. It is guaranteed that the input board has only one solution."
  },
  {
    "number": 38,
    "title": "Count and Say",
    "titleSlug": "count-and-say",
    "difficulty": "Medium",
    "tags": [
      "String"
    ],
    "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula: countAndSay(1) = &quot;1&quot; countAndSay(n) is the run-length encoding of countAndSay(n - 1). Run-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string &quot;3322251&quot; we replace &quot;33&quot; with &quot;23&quot;, replace &quot;222&quot; with &quot;32&quot;, replace &quot;5&quot; with &quot;15&quot; and replace &quot;1&quot; with &quot;11&quot;. Thus the compressed string becomes &quot;23321511&quot;. Given a positive integer n, return the nth element of the count-and-say sequence. &nbsp; Example 1: Input: n = 4 Output: &quot;1211&quot; Explanation: countAndSay(1) = &quot;1&quot; countAndSay(2) = RLE of &quot;1&quot; = &quot;11&quot; countAndSay(3) = RLE of &quot;11&quot; = &quot;21&quot; countAndSay(4) = RLE of &quot;21&quot; = &quot;1211&quot; Example 2: Input: n = 1 Output: &quot;1&quot; Explanation: This is the base case. &nbsp; Constraints: 1 &lt;= n &lt;= 30 &nbsp; Follow up: Could you solve it iteratively?"
  },
  {
    "number": 39,
    "title": "Combination Sum",
    "titleSlug": "combination-sum",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Backtracking"
    ],
    "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different. The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input. &nbsp; Example 1: Input: candidates = [2,3,6,7], target = 7 Output: [[2,2,3],[7]] Explanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations. Example 2: Input: candidates = [2,3,5], target = 8 Output: [[2,2,2,2],[2,3,3],[3,5]] Example 3: Input: candidates = [2], target = 1 Output: [] &nbsp; Constraints: 1 &lt;= candidates.length &lt;= 30 2 &lt;= candidates[i] &lt;= 40 All elements of candidates are distinct. 1 &lt;= target &lt;= 40"
  },
  {
    "number": 40,
    "title": "Combination Sum II",
    "titleSlug": "combination-sum-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Backtracking"
    ],
    "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates&nbsp;where the candidate numbers sum to target. Each number in candidates&nbsp;may only be used once in the combination. Note:&nbsp;The solution set must not contain duplicate combinations. &nbsp; Example 1: Input: candidates = [10,1,2,7,6,1,5], target = 8 Output: [ [1,1,6], [1,2,5], [1,7], [2,6] ] Example 2: Input: candidates = [2,5,2,1,2], target = 5 Output: [ [1,2,2], [5] ] &nbsp; Constraints: 1 &lt;=&nbsp;candidates.length &lt;= 100 1 &lt;=&nbsp;candidates[i] &lt;= 50 1 &lt;= target &lt;= 30"
  },
  {
    "number": 41,
    "title": "First Missing Positive",
    "titleSlug": "first-missing-positive",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums. You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space. &nbsp; Example 1: Input: nums = [1,2,0] Output: 3 Explanation: The numbers in the range [1,2] are all in the array. Example 2: Input: nums = [3,4,-1,1] Output: 2 Explanation: 1 is in the array but 2 is missing. Example 3: Input: nums = [7,8,9,11,12] Output: 1 Explanation: The smallest positive integer 1 is missing. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -231 &lt;= nums[i] &lt;= 231 - 1"
  },
  {
    "number": 42,
    "title": "Trapping Rain Water",
    "titleSlug": "trapping-rain-water",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. &nbsp; Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 &nbsp; Constraints: n == height.length 1 &lt;= n &lt;= 2 * 104 0 &lt;= height[i] &lt;= 105"
  },
  {
    "number": 43,
    "title": "Multiply Strings",
    "titleSlug": "multiply-strings",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string. Note:&nbsp;You must not use any built-in BigInteger library or convert the inputs to integer directly. &nbsp; Example 1: Input: num1 = \"2\", num2 = \"3\" Output: \"6\" Example 2: Input: num1 = \"123\", num2 = \"456\" Output: \"56088\" &nbsp; Constraints: 1 &lt;= num1.length, num2.length &lt;= 200 num1 and num2 consist of digits only. Both num1 and num2&nbsp;do not contain any leading zero, except the number 0 itself."
  },
  {
    "number": 44,
    "title": "Wildcard Matching",
    "titleSlug": "wildcard-matching",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy",
      "Recursion"
    ],
    "description": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for &#39;?&#39; and &#39;*&#39; where: &#39;?&#39; Matches any single character. &#39;*&#39; Matches any sequence of characters (including the empty sequence). The matching should cover the entire input string (not partial). &nbsp; Example 1: Input: s = &quot;aa&quot;, p = &quot;a&quot; Output: false Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;. Example 2: Input: s = &quot;aa&quot;, p = &quot;*&quot; Output: true Explanation:&nbsp;&#39;*&#39; matches any sequence. Example 3: Input: s = &quot;cb&quot;, p = &quot;?a&quot; Output: false Explanation:&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;. &nbsp; Constraints: 0 &lt;= s.length, p.length &lt;= 2000 s contains only lowercase English letters. p contains only lowercase English letters, &#39;?&#39; or &#39;*&#39;."
  },
  {
    "number": 45,
    "title": "Jump Game II",
    "titleSlug": "jump-game-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0]. Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where: 0 &lt;= j &lt;= nums[i] and i + j &lt; n Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1]. &nbsp; Example 1: Input: nums = [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: nums = [2,3,0,1,4] Output: 2 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 104 0 &lt;= nums[i] &lt;= 1000 It&#39;s guaranteed that you can reach nums[n - 1]."
  },
  {
    "number": 46,
    "title": "Permutations",
    "titleSlug": "permutations",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Backtracking"
    ],
    "description": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order. &nbsp; Example 1: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] Example 2: Input: nums = [0,1] Output: [[0,1],[1,0]] Example 3: Input: nums = [1] Output: [[1]] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 6 -10 &lt;= nums[i] &lt;= 10 All the integers of nums are unique."
  },
  {
    "number": 47,
    "title": "Permutations II",
    "titleSlug": "permutations-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Backtracking",
      "Sorting"
    ],
    "description": "Given a collection of numbers, nums,&nbsp;that might contain duplicates, return all possible unique permutations in any order. &nbsp; Example 1: Input: nums = [1,1,2] Output: [[1,1,2], [1,2,1], [2,1,1]] Example 2: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 8 -10 &lt;= nums[i] &lt;= 10"
  },
  {
    "number": 48,
    "title": "Rotate Image",
    "titleSlug": "rotate-image",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Matrix"
    ],
    "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. &nbsp; Example 1: Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [[7,4,1],[8,5,2],[9,6,3]] Example 2: Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] &nbsp; Constraints: n == matrix.length == matrix[i].length 1 &lt;= n &lt;= 20 -1000 &lt;= matrix[i][j] &lt;= 1000"
  },
  {
    "number": 49,
    "title": "Group Anagrams",
    "titleSlug": "group-anagrams",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order. &nbsp; Example 1: Input: strs = [&quot;eat&quot;,&quot;tea&quot;,&quot;tan&quot;,&quot;ate&quot;,&quot;nat&quot;,&quot;bat&quot;] Output: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]] Explanation: There is no string in strs that can be rearranged to form &quot;bat&quot;. The strings &quot;nat&quot; and &quot;tan&quot; are anagrams as they can be rearranged to form each other. The strings &quot;ate&quot;, &quot;eat&quot;, and &quot;tea&quot; are anagrams as they can be rearranged to form each other. Example 2: Input: strs = [&quot;&quot;] Output: [[&quot;&quot;]] Example 3: Input: strs = [&quot;a&quot;] Output: [[&quot;a&quot;]] &nbsp; Constraints: 1 &lt;= strs.length &lt;= 104 0 &lt;= strs[i].length &lt;= 100 strs[i] consists of lowercase English letters."
  },
  {
    "number": 50,
    "title": "Pow(x, n)",
    "titleSlug": "powx-n",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Recursion"
    ],
    "description": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn). &nbsp; Example 1: Input: x = 2.00000, n = 10 Output: 1024.00000 Example 2: Input: x = 2.10000, n = 3 Output: 9.26100 Example 3: Input: x = 2.00000, n = -2 Output: 0.25000 Explanation: 2-2 = 1/22 = 1/4 = 0.25 &nbsp; Constraints: -100.0 &lt; x &lt; 100.0 -231 &lt;= n &lt;= 231-1 n is an integer. Either x is not zero or n &gt; 0. -104 &lt;= xn &lt;= 104"
  },
  {
    "number": 51,
    "title": "N-Queens",
    "titleSlug": "n-queens",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Backtracking"
    ],
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order. Each solution contains a distinct board configuration of the n-queens&#39; placement, where &#39;Q&#39; and &#39;.&#39; both indicate a queen and an empty space, respectively. &nbsp; Example 1: Input: n = 4 Output: [[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]] Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above Example 2: Input: n = 1 Output: [[&quot;Q&quot;]] &nbsp; Constraints: 1 &lt;= n &lt;= 9"
  },
  {
    "number": 52,
    "title": "N-Queens II",
    "titleSlug": "n-queens-ii",
    "difficulty": "Hard",
    "tags": [
      "Backtracking"
    ],
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return the number of distinct solutions to the&nbsp;n-queens puzzle. &nbsp; Example 1: Input: n = 4 Output: 2 Explanation: There are two distinct solutions to the 4-queens puzzle as shown. Example 2: Input: n = 1 Output: 1 &nbsp; Constraints: 1 &lt;= n &lt;= 9"
  },
  {
    "number": 53,
    "title": "Maximum Subarray",
    "titleSlug": "maximum-subarray",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum. &nbsp; Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum 6. Example 2: Input: nums = [1] Output: 1 Explanation: The subarray [1] has the largest sum 1. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum 23. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -104 &lt;= nums[i] &lt;= 104 &nbsp; Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
  },
  {
    "number": 54,
    "title": "Spiral Matrix",
    "titleSlug": "spiral-matrix",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order. &nbsp; Example 1: Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [1,2,3,6,9,8,7,4,5] Example 2: Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] Output: [1,2,3,4,8,12,11,10,9,5,6,7] &nbsp; Constraints: m == matrix.length n == matrix[i].length 1 &lt;= m, n &lt;= 10 -100 &lt;= matrix[i][j] &lt;= 100"
  },
  {
    "number": 55,
    "title": "Jump Game",
    "titleSlug": "jump-game",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given an integer array nums. You are initially positioned at the array&#39;s first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise. &nbsp; Example 1: Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 104 0 &lt;= nums[i] &lt;= 105"
  },
  {
    "number": 56,
    "title": "Merge Intervals",
    "titleSlug": "merge-intervals",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Sorting"
    ],
    "description": "Given an array&nbsp;of intervals&nbsp;where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input. &nbsp; Example 1: Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. Example 2: Input: intervals = [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping. &nbsp; Constraints: 1 &lt;= intervals.length &lt;= 104 intervals[i].length == 2 0 &lt;= starti &lt;= endi &lt;= 104"
  },
  {
    "number": 57,
    "title": "Insert Interval",
    "titleSlug": "insert-interval",
    "difficulty": "Medium",
    "tags": [
      "Array"
    ],
    "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval. Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary). Return intervals after the insertion. Note that you don&#39;t need to modify intervals in-place. You can make a new array and return it. &nbsp; Example 1: Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]] Example 2: Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]. &nbsp; Constraints: 0 &lt;= intervals.length &lt;= 104 intervals[i].length == 2 0 &lt;= starti &lt;= endi &lt;= 105 intervals is sorted by starti in ascending order. newInterval.length == 2 0 &lt;= start &lt;= end &lt;= 105"
  },
  {
    "number": 58,
    "title": "Length of Last Word",
    "titleSlug": "length-of-last-word",
    "difficulty": "Easy",
    "tags": [
      "String"
    ],
    "description": "Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only. &nbsp; Example 1: Input: s = &quot;Hello World&quot; Output: 5 Explanation: The last word is &quot;World&quot; with length 5. Example 2: Input: s = &quot; fly me to the moon &quot; Output: 4 Explanation: The last word is &quot;moon&quot; with length 4. Example 3: Input: s = &quot;luffy is still joyboy&quot; Output: 6 Explanation: The last word is &quot;joyboy&quot; with length 6. &nbsp; Constraints: 1 &lt;= s.length &lt;= 104 s consists of only English letters and spaces &#39; &#39;. There will be at least one word in s."
  },
  {
    "number": 59,
    "title": "Spiral Matrix II",
    "titleSlug": "spiral-matrix-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order. &nbsp; Example 1: Input: n = 3 Output: [[1,2,3],[8,9,4],[7,6,5]] Example 2: Input: n = 1 Output: [[1]] &nbsp; Constraints: 1 &lt;= n &lt;= 20"
  },
  {
    "number": 60,
    "title": "Permutation Sequence",
    "titleSlug": "permutation-sequence",
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Recursion"
    ],
    "description": "The set [1, 2, 3, ...,&nbsp;n] contains a total of n! unique permutations. By listing and labeling all of the permutations in order, we get the following sequence for n = 3: &quot;123&quot; &quot;132&quot; &quot;213&quot; &quot;231&quot; &quot;312&quot; &quot;321&quot; Given n and k, return the kth permutation sequence. &nbsp; Example 1: Input: n = 3, k = 3 Output: \"213\" Example 2: Input: n = 4, k = 9 Output: \"2314\" Example 3: Input: n = 3, k = 1 Output: \"123\" &nbsp; Constraints: 1 &lt;= n &lt;= 9 1 &lt;= k &lt;= n!"
  },
  {
    "number": 61,
    "title": "Rotate List",
    "titleSlug": "rotate-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a linked&nbsp;list, rotate the list to the right by k places. &nbsp; Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [4,5,1,2,3] Example 2: Input: head = [0,1,2], k = 4 Output: [2,0,1] &nbsp; Constraints: The number of nodes in the list is in the range [0, 500]. -100 &lt;= Node.val &lt;= 100 0 &lt;= k &lt;= 2 * 109"
  },
  {
    "number": 62,
    "title": "Unique Paths",
    "titleSlug": "unique-paths",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner. The test cases are generated so that the answer will be less than or equal to 2 * 109. &nbsp; Example 1: Input: m = 3, n = 7 Output: 28 Example 2: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -&gt; Down -&gt; Down 2. Down -&gt; Down -&gt; Right 3. Down -&gt; Right -&gt; Down &nbsp; Constraints: 1 &lt;= m, n &lt;= 100"
  },
  {
    "number": 63,
    "title": "Unique Paths II",
    "titleSlug": "unique-paths-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle. Return the number of possible unique paths that the robot can take to reach the bottom-right corner. The testcases are generated so that the answer will be less than or equal to 2 * 109. &nbsp; Example 1: Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 1. Right -&gt; Right -&gt; Down -&gt; Down 2. Down -&gt; Down -&gt; Right -&gt; Right Example 2: Input: obstacleGrid = [[0,1],[0,0]] Output: 1 &nbsp; Constraints: m == obstacleGrid.length n == obstacleGrid[i].length 1 &lt;= m, n &lt;= 100 obstacleGrid[i][j] is 0 or 1."
  },
  {
    "number": 64,
    "title": "Minimum Path Sum",
    "titleSlug": "minimum-path-sum",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. Note: You can only move either down or right at any point in time. &nbsp; Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: Because the path 1 &rarr; 3 &rarr; 1 &rarr; 1 &rarr; 1 minimizes the sum. Example 2: Input: grid = [[1,2,3],[4,5,6]] Output: 12 &nbsp; Constraints: m == grid.length n == grid[i].length 1 &lt;= m, n &lt;= 200 0 &lt;= grid[i][j] &lt;= 200"
  },
  {
    "number": 65,
    "title": "Valid Number",
    "titleSlug": "valid-number",
    "difficulty": "Hard",
    "tags": [
      "String"
    ],
    "description": "Given a string s, return whether s is a valid number. For example, all the following are valid numbers: &quot;2&quot;, &quot;0089&quot;, &quot;-0.1&quot;, &quot;+3.14&quot;, &quot;4.&quot;, &quot;-.9&quot;, &quot;2e10&quot;, &quot;-90E3&quot;, &quot;3e+7&quot;, &quot;+6e-1&quot;, &quot;53.5e93&quot;, &quot;-123.456e789&quot;, while the following are not valid numbers: &quot;abc&quot;, &quot;1a&quot;, &quot;1e&quot;, &quot;e3&quot;, &quot;99e2.5&quot;, &quot;--6&quot;, &quot;-+3&quot;, &quot;95a54e53&quot;. Formally, a&nbsp;valid number is defined using one of the following definitions: An integer number followed by an optional exponent. A decimal number followed by an optional exponent. An integer number is defined with an optional sign &#39;-&#39; or &#39;+&#39; followed by digits. A decimal number is defined with an optional sign &#39;-&#39; or &#39;+&#39; followed by one of the following definitions: Digits followed by a dot &#39;.&#39;. Digits followed by a dot &#39;.&#39; followed by digits. A dot &#39;.&#39; followed by digits. An exponent is defined with an exponent notation &#39;e&#39; or &#39;E&#39; followed by an integer number. The digits are defined as one or more digits. &nbsp; Example 1: Input: s = &quot;0&quot; Output: true Example 2: Input: s = &quot;e&quot; Output: false Example 3: Input: s = &quot;.&quot; Output: false &nbsp; Constraints: 1 &lt;= s.length &lt;= 20 s consists of only English letters (both uppercase and lowercase), digits (0-9), plus &#39;+&#39;, minus &#39;-&#39;, or dot &#39;.&#39;."
  },
  {
    "number": 66,
    "title": "Plus One",
    "titleSlug": "plus-one",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Math"
    ],
    "description": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0&#39;s. Increment the large integer by one and return the resulting array of digits. &nbsp; Example 1: Input: digits = [1,2,3] Output: [1,2,4] Explanation: The array represents the integer 123. Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4]. Example 2: Input: digits = [4,3,2,1] Output: [4,3,2,2] Explanation: The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322. Thus, the result should be [4,3,2,2]. Example 3: Input: digits = [9] Output: [1,0] Explanation: The array represents the integer 9. Incrementing by one gives 9 + 1 = 10. Thus, the result should be [1,0]. &nbsp; Constraints: 1 &lt;= digits.length &lt;= 100 0 &lt;= digits[i] &lt;= 9 digits does not contain any leading 0&#39;s."
  },
  {
    "number": 67,
    "title": "Add Binary",
    "titleSlug": "add-binary",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String",
      "Bit Manipulation",
      "Simulation"
    ],
    "description": "Given two binary strings a and b, return their sum as a binary string. &nbsp; Example 1: Input: a = \"11\", b = \"1\" Output: \"100\" Example 2: Input: a = \"1010\", b = \"1011\" Output: \"10101\" &nbsp; Constraints: 1 &lt;= a.length, b.length &lt;= 104 a and b consist&nbsp;only of &#39;0&#39; or &#39;1&#39; characters. Each string does not contain leading zeros except for the zero itself."
  },
  {
    "number": 68,
    "title": "Text Justification",
    "titleSlug": "text-justification",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Simulation"
    ],
    "description": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces &#39; &#39; when necessary so that each line has exactly maxWidth characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words. Note: A word is defined as a character sequence consisting of non-space characters only. Each word&#39;s length is guaranteed to be greater than 0 and not exceed maxWidth. The input array words contains at least one word. &nbsp; Example 1: Input: words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16 Output: [ &nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;, &nbsp; &nbsp;&quot;example &nbsp;of text&quot;, &nbsp; &nbsp;&quot;justification. &nbsp;&quot; ] Example 2: Input: words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16 Output: [ &nbsp; &quot;What &nbsp; must &nbsp; be&quot;, &nbsp; &quot;acknowledgment &nbsp;&quot;, &nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot; ] Explanation: Note that the last line is &quot;shall be &quot; instead of &quot;shall be&quot;, because the last line must be left-justified instead of fully-justified. Note that the second line is also left-justified because it contains only one word. Example 3: Input: words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth = 20 Output: [ &nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;, &quot;understand &nbsp; &nbsp; &nbsp;well&quot;, &nbsp; &quot;enough to explain to&quot;, &nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;, &nbsp; &quot;everything &nbsp;else &nbsp;we&quot;, &nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot; ] &nbsp; Constraints: 1 &lt;= words.length &lt;= 300 1 &lt;= words[i].length &lt;= 20 words[i] consists of only English letters and symbols. 1 &lt;= maxWidth &lt;= 100 words[i].length &lt;= maxWidth"
  },
  {
    "number": 69,
    "title": "Sqrt(x)",
    "titleSlug": "sqrtx",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "description": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well. You must not use any built-in exponent function or operator. For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python. &nbsp; Example 1: Input: x = 4 Output: 2 Explanation: The square root of 4 is 2, so we return 2. Example 2: Input: x = 8 Output: 2 Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned. &nbsp; Constraints: 0 &lt;= x &lt;= 231 - 1"
  },
  {
    "number": 70,
    "title": "Climbing Stairs",
    "titleSlug": "climbing-stairs",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? &nbsp; Example 1: Input: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Example 2: Input: n = 3 Output: 3 Explanation: There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step &nbsp; Constraints: 1 &lt;= n &lt;= 45"
  },
  {
    "number": 71,
    "title": "Simplify Path",
    "titleSlug": "simplify-path",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Stack"
    ],
    "description": "You are given an absolute path for a Unix-style file system, which always begins with a slash &#39;/&#39;. Your task is to transform this absolute path into its simplified canonical path. The rules of a Unix-style file system are as follows: A single period &#39;.&#39; represents the current directory. A double period &#39;..&#39; represents the previous/parent directory. Multiple consecutive slashes such as &#39;//&#39; and &#39;///&#39; are treated as a single slash &#39;/&#39;. Any sequence of periods that does not match the rules above should be treated as a valid directory or file name. For example, &#39;...&#39; and &#39;....&#39; are valid directory or file names. The simplified canonical path should follow these rules: The path must start with a single slash &#39;/&#39;. Directories within the path must be separated by exactly one slash &#39;/&#39;. The path must not end with a slash &#39;/&#39;, unless it is the root directory. The path must not have any single or double periods (&#39;.&#39; and &#39;..&#39;) used to denote current or parent directories. Return the simplified canonical path. &nbsp; Example 1: Input: path = &quot;/home/&quot; Output: &quot;/home&quot; Explanation: The trailing slash should be removed. Example 2: Input: path = &quot;/home//foo/&quot; Output: &quot;/home/foo&quot; Explanation: Multiple consecutive slashes are replaced by a single one. Example 3: Input: path = &quot;/home/user/Documents/../Pictures&quot; Output: &quot;/home/user/Pictures&quot; Explanation: A double period &quot;..&quot; refers to the directory up a level (the parent directory). Example 4: Input: path = &quot;/../&quot; Output: &quot;/&quot; Explanation: Going one level up from the root directory is not possible. Example 5: Input: path = &quot;/.../a/../b/c/../d/./&quot; Output: &quot;/.../b/d&quot; Explanation: &quot;...&quot; is a valid name for a directory in this problem. &nbsp; Constraints: 1 &lt;= path.length &lt;= 3000 path consists of English letters, digits, period &#39;.&#39;, slash &#39;/&#39; or &#39;_&#39;. path is a valid absolute Unix path."
  },
  {
    "number": 72,
    "title": "Edit Distance",
    "titleSlug": "edit-distance",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You have the following three operations permitted on a word: Insert a character Delete a character Replace a character &nbsp; Example 1: Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot; Output: 3 Explanation: horse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;) rorse -&gt; rose (remove &#39;r&#39;) rose -&gt; ros (remove &#39;e&#39;) Example 2: Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot; Output: 5 Explanation: intention -&gt; inention (remove &#39;t&#39;) inention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;) enention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;) exention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;) exection -&gt; execution (insert &#39;u&#39;) &nbsp; Constraints: 0 &lt;= word1.length, word2.length &lt;= 500 word1 and word2 consist of lowercase English letters."
  },
  {
    "number": 73,
    "title": "Set Matrix Zeroes",
    "titleSlug": "set-matrix-zeroes",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0&#39;s. You must do it in place. &nbsp; Example 1: Input: matrix = [[1,1,1],[1,0,1],[1,1,1]] Output: [[1,0,1],[0,0,0],[1,0,1]] Example 2: Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]] &nbsp; Constraints: m == matrix.length n == matrix[0].length 1 &lt;= m, n &lt;= 200 -231 &lt;= matrix[i][j] &lt;= 231 - 1 &nbsp; Follow up: A straightforward solution using O(mn) space is probably a bad idea. A simple improvement uses O(m + n) space, but still not the best solution. Could you devise a constant space solution?"
  },
  {
    "number": 74,
    "title": "Search a 2D Matrix",
    "titleSlug": "search-a-2d-matrix",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix matrix with the following two properties: Each row is sorted in non-decreasing order. The first integer of each row is greater than the last integer of the previous row. Given an integer target, return true if target is in matrix or false otherwise. You must write a solution in O(log(m * n)) time complexity. &nbsp; Example 1: Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 Output: true Example 2: Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 Output: false &nbsp; Constraints: m == matrix.length n == matrix[i].length 1 &lt;= m, n &lt;= 100 -104 &lt;= matrix[i][j], target &lt;= 104"
  },
  {
    "number": 75,
    "title": "Sort Colors",
    "titleSlug": "sort-colors",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library&#39;s sort function. &nbsp; Example 1: Input: nums = [2,0,2,1,1,0] Output: [0,0,1,1,2,2] Example 2: Input: nums = [2,0,1] Output: [0,1,2] &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 300 nums[i] is either 0, 1, or 2. &nbsp; Follow up:&nbsp;Could you come up with a one-pass algorithm using only&nbsp;constant extra space?"
  },
  {
    "number": 76,
    "title": "Minimum Window Substring",
    "titleSlug": "minimum-window-substring",
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string &quot;&quot;. The testcases will be generated such that the answer is unique. &nbsp; Example 1: Input: s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot; Output: &quot;BANC&quot; Explanation: The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t. Example 2: Input: s = &quot;a&quot;, t = &quot;a&quot; Output: &quot;a&quot; Explanation: The entire string s is the minimum window. Example 3: Input: s = &quot;a&quot;, t = &quot;aa&quot; Output: &quot;&quot; Explanation: Both &#39;a&#39;s from t must be included in the window. Since the largest window of s only has one &#39;a&#39;, return empty string. &nbsp; Constraints: m == s.length n == t.length 1 &lt;= m, n &lt;= 105 s and t consist of uppercase and lowercase English letters. &nbsp; Follow up: Could you find an algorithm that runs in O(m + n) time?"
  },
  {
    "number": 77,
    "title": "Combinations",
    "titleSlug": "combinations",
    "difficulty": "Medium",
    "tags": [
      "Backtracking"
    ],
    "description": "Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n]. You may return the answer in any order. &nbsp; Example 1: Input: n = 4, k = 2 Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] Explanation: There are 4 choose 2 = 6 total combinations. Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination. Example 2: Input: n = 1, k = 1 Output: [[1]] Explanation: There is 1 choose 1 = 1 total combination. &nbsp; Constraints: 1 &lt;= n &lt;= 20 1 &lt;= k &lt;= n"
  },
  {
    "number": 78,
    "title": "Subsets",
    "titleSlug": "subsets",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order. &nbsp; Example 1: Input: nums = [1,2,3] Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] Example 2: Input: nums = [0] Output: [[],[0]] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 10 -10 &lt;= nums[i] &lt;= 10 All the numbers of&nbsp;nums are unique."
  },
  {
    "number": 79,
    "title": "Word Search",
    "titleSlug": "word-search",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Backtracking",
      "Depth-First Search",
      "Matrix"
    ],
    "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. &nbsp; Example 1: Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot; Output: true Example 2: Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot; Output: true Example 3: Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot; Output: false &nbsp; Constraints: m == board.length n = board[i].length 1 &lt;= m, n &lt;= 6 1 &lt;= word.length &lt;= 15 board and word consists of only lowercase and uppercase English letters. &nbsp; Follow up: Could you use search pruning to make your solution faster with a larger board?"
  },
  {
    "number": 80,
    "title": "Remove Duplicates from Sorted Array II",
    "titleSlug": "remove-duplicates-from-sorted-array-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums&nbsp;should hold the final result. It does not matter what you leave beyond the first&nbsp;k&nbsp;elements. Return k after placing the final result in the first k slots of nums. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. Custom Judge: The judge will test your solution with the following code: int[] nums = [...]; // Input array int[] expectedNums = [...]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length; for (int i = 0; i &lt; k; i++) { assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted. &nbsp; Example 1: Input: nums = [1,1,1,2,2,3] Output: 5, nums = [1,1,2,2,3,_] Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: Input: nums = [0,0,1,1,1,1,2,3,3] Output: 7, nums = [0,0,1,1,2,3,3,_,_] Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). &nbsp; Constraints: 1 &lt;= nums.length &lt;= 3 * 104 -104 &lt;= nums[i] &lt;= 104 nums is sorted in non-decreasing order."
  },
  {
    "number": 81,
    "title": "Search in Rotated Sorted Array II",
    "titleSlug": "search-in-rotated-sorted-array-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "description": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values). Before being passed to your function, nums is rotated at an unknown pivot index k (0 &lt;= k &lt; nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4]. Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums. You must decrease the overall operation steps as much as possible. &nbsp; Example 1: Input: nums = [2,5,6,0,0,1,2], target = 0 Output: true Example 2: Input: nums = [2,5,6,0,0,1,2], target = 3 Output: false &nbsp; Constraints: 1 &lt;= nums.length &lt;= 5000 -104 &lt;= nums[i] &lt;= 104 nums is guaranteed to be rotated at some pivot. -104 &lt;= target &lt;= 104 &nbsp; Follow up: This problem is similar to&nbsp;Search in Rotated Sorted Array, but&nbsp;nums may contain duplicates. Would this affect the runtime complexity? How and why?"
  },
  {
    "number": 82,
    "title": "Remove Duplicates from Sorted List II",
    "titleSlug": "remove-duplicates-from-sorted-list-ii",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well. &nbsp; Example 1: Input: head = [1,2,3,3,4,4,5] Output: [1,2,5] Example 2: Input: head = [1,1,1,2,3] Output: [2,3] &nbsp; Constraints: The number of nodes in the list is in the range [0, 300]. -100 &lt;= Node.val &lt;= 100 The list is guaranteed to be sorted in ascending order."
  },
  {
    "number": 83,
    "title": "Remove Duplicates from Sorted List",
    "titleSlug": "remove-duplicates-from-sorted-list",
    "difficulty": "Easy",
    "tags": [
      "Linked List"
    ],
    "description": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well. &nbsp; Example 1: Input: head = [1,1,2] Output: [1,2] Example 2: Input: head = [1,1,2,3,3] Output: [1,2,3] &nbsp; Constraints: The number of nodes in the list is in the range [0, 300]. -100 &lt;= Node.val &lt;= 100 The list is guaranteed to be sorted in ascending order."
  },
  {
    "number": 84,
    "title": "Largest Rectangle in Histogram",
    "titleSlug": "largest-rectangle-in-histogram",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "Given an array of integers heights representing the histogram&#39;s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram. &nbsp; Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units. Example 2: Input: heights = [2,4] Output: 4 &nbsp; Constraints: 1 &lt;= heights.length &lt;= 105 0 &lt;= heights[i] &lt;= 104"
  },
  {
    "number": 85,
    "title": "Maximal Rectangle",
    "titleSlug": "maximal-rectangle",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Matrix",
      "Monotonic Stack"
    ],
    "description": "Given a rows x cols&nbsp;binary matrix filled with 0&#39;s and 1&#39;s, find the largest rectangle containing only 1&#39;s and return its area. &nbsp; Example 1: Input: matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]] Output: 6 Explanation: The maximal rectangle is shown in the above picture. Example 2: Input: matrix = [[&quot;0&quot;]] Output: 0 Example 3: Input: matrix = [[&quot;1&quot;]] Output: 1 &nbsp; Constraints: rows == matrix.length cols == matrix[i].length 1 &lt;= row, cols &lt;= 200 matrix[i][j] is &#39;0&#39; or &#39;1&#39;."
  },
  {
    "number": 86,
    "title": "Partition List",
    "titleSlug": "partition-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. You should preserve the original relative order of the nodes in each of the two partitions. &nbsp; Example 1: Input: head = [1,4,3,2,5,2], x = 3 Output: [1,2,2,4,3,5] Example 2: Input: head = [2,1], x = 2 Output: [1,2] &nbsp; Constraints: The number of nodes in the list is in the range [0, 200]. -100 &lt;= Node.val &lt;= 100 -200 &lt;= x &lt;= 200"
  },
  {
    "number": 87,
    "title": "Scramble String",
    "titleSlug": "scramble-string",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": "We can scramble a string s to get a string t using the following algorithm: If the length of the string is 1, stop. If the length of the string is &gt; 1, do the following: Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y. Randomly&nbsp;decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x. Apply step 1 recursively on each of the two substrings x and y. Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false. &nbsp; Example 1: Input: s1 = &quot;great&quot;, s2 = &quot;rgeat&quot; Output: true Explanation: One possible scenario applied on s1 is: &quot;great&quot; --&gt; &quot;gr/eat&quot; // divide at random index. &quot;gr/eat&quot; --&gt; &quot;gr/eat&quot; // random decision is not to swap the two substrings and keep them in order. &quot;gr/eat&quot; --&gt; &quot;g/r / e/at&quot; // apply the same algorithm recursively on both substrings. divide at random index each of them. &quot;g/r / e/at&quot; --&gt; &quot;r/g / e/at&quot; // random decision was to swap the first substring and to keep the second substring in the same order. &quot;r/g / e/at&quot; --&gt; &quot;r/g / e/ a/t&quot; // again apply the algorithm recursively, divide &quot;at&quot; to &quot;a/t&quot;. &quot;r/g / e/ a/t&quot; --&gt; &quot;r/g / e/ a/t&quot; // random decision is to keep both substrings in the same order. The algorithm stops now, and the result string is &quot;rgeat&quot; which is s2. As one possible scenario led s1 to be scrambled to s2, we return true. Example 2: Input: s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot; Output: false Example 3: Input: s1 = &quot;a&quot;, s2 = &quot;a&quot; Output: true &nbsp; Constraints: s1.length == s2.length 1 &lt;= s1.length &lt;= 30 s1 and s2 consist of lowercase English letters."
  },
  {
    "number": 88,
    "title": "Merge Sorted Array",
    "titleSlug": "merge-sorted-array",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n. &nbsp; Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. Example 2: Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1]. Example 3: Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1. &nbsp; Constraints: nums1.length == m + n nums2.length == n 0 &lt;= m, n &lt;= 200 1 &lt;= m + n &lt;= 200 -109 &lt;= nums1[i], nums2[j] &lt;= 109 &nbsp; Follow up: Can you come up with an algorithm that runs in O(m + n) time?"
  },
  {
    "number": 89,
    "title": "Gray Code",
    "titleSlug": "gray-code",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "An n-bit gray code sequence is a sequence of 2n integers where: Every integer is in the inclusive range [0, 2n - 1], The first integer is 0, An integer appears no more than once in the sequence, The binary representation of every pair of adjacent integers differs by exactly one bit, and The binary representation of the first and last integers differs by exactly one bit. Given an integer n, return any valid n-bit gray code sequence. &nbsp; Example 1: Input: n = 2 Output: [0,1,3,2] Explanation: The binary representation of [0,1,3,2] is [00,01,11,10]. - 00 and 01 differ by one bit - 01 and 11 differ by one bit - 11 and 10 differ by one bit - 10 and 00 differ by one bit [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01]. - 00 and 10 differ by one bit - 10 and 11 differ by one bit - 11 and 01 differ by one bit - 01 and 00 differ by one bit Example 2: Input: n = 1 Output: [0,1] &nbsp; Constraints: 1 &lt;= n &lt;= 16"
  },
  {
    "number": 90,
    "title": "Subsets II",
    "titleSlug": "subsets-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order. &nbsp; Example 1: Input: nums = [1,2,2] Output: [[],[1],[1,2],[1,2,2],[2],[2,2]] Example 2: Input: nums = [0] Output: [[],[0]] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 10 -10 &lt;= nums[i] &lt;= 10"
  },
  {
    "number": 91,
    "title": "Decode Ways",
    "titleSlug": "decode-ways",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping: &quot;1&quot; -&gt; &#39;A&#39; &quot;2&quot; -&gt; &#39;B&#39; ... &quot;25&quot; -&gt; &#39;Y&#39; &quot;26&quot; -&gt; &#39;Z&#39; However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (&quot;2&quot; and &quot;5&quot; vs &quot;25&quot;). For example, &quot;11106&quot; can be decoded into: &quot;AAJF&quot; with the grouping (1, 1, 10, 6) &quot;KJF&quot; with the grouping (11, 10, 6) The grouping (1, 11, 06) is invalid because &quot;06&quot; is not a valid code (only &quot;6&quot; is valid). Note: there may be strings that are impossible to decode. Given a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0. The test cases are generated so that the answer fits in a 32-bit integer. &nbsp; Example 1: Input: s = &quot;12&quot; Output: 2 Explanation: &quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12). Example 2: Input: s = &quot;226&quot; Output: 3 Explanation: &quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6). Example 3: Input: s = &quot;06&quot; Output: 0 Explanation: &quot;06&quot; cannot be mapped to &quot;F&quot; because of the leading zero (&quot;6&quot; is different from &quot;06&quot;). In this case, the string is not a valid encoding, so return 0. &nbsp; Constraints: 1 &lt;= s.length &lt;= 100 s contains only digits and may contain leading zero(s)."
  },
  {
    "number": 92,
    "title": "Reverse Linked List II",
    "titleSlug": "reverse-linked-list-ii",
    "difficulty": "Medium",
    "tags": [
      "Linked List"
    ],
    "description": "Given the head of a singly linked list and two integers left and right where left &lt;= right, reverse the nodes of the list from position left to position right, and return the reversed list. &nbsp; Example 1: Input: head = [1,2,3,4,5], left = 2, right = 4 Output: [1,4,3,2,5] Example 2: Input: head = [5], left = 1, right = 1 Output: [5] &nbsp; Constraints: The number of nodes in the list is n. 1 &lt;= n &lt;= 500 -500 &lt;= Node.val &lt;= 500 1 &lt;= left &lt;= right &lt;= n &nbsp; Follow up: Could you do it in one pass?"
  },
  {
    "number": 93,
    "title": "Restore IP Addresses",
    "titleSlug": "restore-ip-addresses",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Backtracking"
    ],
    "description": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros. For example, &quot;0.1.2.201&quot; and &quot;192.168.1.1&quot; are valid IP addresses, but &quot;0.011.255.245&quot;, &quot;192.168.1.312&quot; and &quot;192.168@1.1&quot; are invalid IP addresses. Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order. &nbsp; Example 1: Input: s = &quot;25525511135&quot; Output: [&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;] Example 2: Input: s = &quot;0000&quot; Output: [&quot;0.0.0.0&quot;] Example 3: Input: s = &quot;101023&quot; Output: [&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;] &nbsp; Constraints: 1 &lt;= s.length &lt;= 20 s consists of digits only."
  },
  {
    "number": 94,
    "title": "Binary Tree Inorder Traversal",
    "titleSlug": "binary-tree-inorder-traversal",
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes&#39; values. &nbsp; Example 1: Input: root = [1,null,2,3] Output: [1,3,2] Explanation: Example 2: Input: root = [1,2,3,4,5,null,8,null,null,6,7,9] Output: [4,2,6,5,7,1,3,9,8] Explanation: Example 3: Input: root = [] Output: [] Example 4: Input: root = [1] Output: [1] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 100]. -100 &lt;= Node.val &lt;= 100 &nbsp; Follow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "number": 95,
    "title": "Unique Binary Search Trees II",
    "titleSlug": "unique-binary-search-trees-ii",
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming",
      "Backtracking",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given an integer n, return all the structurally unique BST&#39;s (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order. &nbsp; Example 1: Input: n = 3 Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]] Example 2: Input: n = 1 Output: [[1]] &nbsp; Constraints: 1 &lt;= n &lt;= 8"
  },
  {
    "number": 96,
    "title": "Unique Binary Search Trees",
    "titleSlug": "unique-binary-search-trees",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given an integer n, return the number of structurally unique BST&#39;s (binary search trees) which has exactly n nodes of unique values from 1 to n. &nbsp; Example 1: Input: n = 3 Output: 5 Example 2: Input: n = 1 Output: 1 &nbsp; Constraints: 1 &lt;= n &lt;= 19"
  },
  {
    "number": 97,
    "title": "Interleaving String",
    "titleSlug": "interleaving-string",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2. An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that: s = s1 + s2 + ... + sn t = t1 + t2 + ... + tm |n - m| &lt;= 1 The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... Note: a + b is the concatenation of strings a and b. &nbsp; Example 1: Input: s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbcbcac&quot; Output: true Explanation: One way to obtain s3 is: Split s1 into s1 = &quot;aa&quot; + &quot;bc&quot; + &quot;c&quot;, and s2 into s2 = &quot;dbbc&quot; + &quot;a&quot;. Interleaving the two splits, we get &quot;aa&quot; + &quot;dbbc&quot; + &quot;bc&quot; + &quot;a&quot; + &quot;c&quot; = &quot;aadbbcbcac&quot;. Since s3 can be obtained by interleaving s1 and s2, we return true. Example 2: Input: s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, s3 = &quot;aadbbbaccc&quot; Output: false Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3. Example 3: Input: s1 = &quot;&quot;, s2 = &quot;&quot;, s3 = &quot;&quot; Output: true &nbsp; Constraints: 0 &lt;= s1.length, s2.length &lt;= 100 0 &lt;= s3.length &lt;= 200 s1, s2, and s3 consist of lowercase English letters. &nbsp; Follow up: Could you solve it using only O(s2.length) additional memory space?"
  },
  {
    "number": 98,
    "title": "Validate Binary Search Tree",
    "titleSlug": "validate-binary-search-tree",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node&#39;s key. The right subtree of a node contains only nodes with keys greater than the node&#39;s key. Both the left and right subtrees must also be binary search trees. &nbsp; Example 1: Input: root = [2,1,3] Output: true Example 2: Input: root = [5,1,4,null,null,3,6] Output: false Explanation: The root node&#39;s value is 5 but its right child&#39;s value is 4. &nbsp; Constraints: The number of nodes in the tree is in the range [1, 104]. -231 &lt;= Node.val &lt;= 231 - 1"
  },
  {
    "number": 99,
    "title": "Recover Binary Search Tree",
    "titleSlug": "recover-binary-search-tree",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure. &nbsp; Example 1: Input: root = [1,3,null,null,2] Output: [3,1,null,null,2] Explanation: 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid. Example 2: Input: root = [3,1,4,null,null,2] Output: [2,1,4,null,null,3] Explanation: 2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid. &nbsp; Constraints: The number of nodes in the tree is in the range [2, 1000]. -231 &lt;= Node.val &lt;= 231 - 1 &nbsp; Follow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?"
  },
  {
    "number": 100,
    "title": "Same Tree",
    "titleSlug": "same-tree",
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value. &nbsp; Example 1: Input: p = [1,2,3], q = [1,2,3] Output: true Example 2: Input: p = [1,2], q = [1,null,2] Output: false Example 3: Input: p = [1,2,1], q = [1,1,2] Output: false &nbsp; Constraints: The number of nodes in both trees is in the range [0, 100]. -104 &lt;= Node.val &lt;= 104"
  },
  {
    "number": 101,
    "title": "Symmetric Tree",
    "titleSlug": "symmetric-tree",
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center). &nbsp; Example 1: Input: root = [1,2,2,3,4,4,3] Output: true Example 2: Input: root = [1,2,2,null,3,null,3] Output: false &nbsp; Constraints: The number of nodes in the tree is in the range [1, 1000]. -100 &lt;= Node.val &lt;= 100 &nbsp; Follow up: Could you solve it both recursively and iteratively?"
  },
  {
    "number": 102,
    "title": "Binary Tree Level Order Traversal",
    "titleSlug": "binary-tree-level-order-traversal",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the level order traversal of its nodes&#39; values. (i.e., from left to right, level by level). &nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[3],[9,20],[15,7]] Example 2: Input: root = [1] Output: [[1]] Example 3: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 2000]. -1000 &lt;= Node.val &lt;= 1000"
  },
  {
    "number": 103,
    "title": "Binary Tree Zigzag Level Order Traversal",
    "titleSlug": "binary-tree-zigzag-level-order-traversal",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the zigzag level order traversal of its nodes&#39; values. (i.e., from left to right, then right to left for the next level and alternate between). &nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[3],[20,9],[15,7]] Example 2: Input: root = [1] Output: [[1]] Example 3: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 2000]. -100 &lt;= Node.val &lt;= 100"
  },
  {
    "number": 104,
    "title": "Maximum Depth of Binary Tree",
    "titleSlug": "maximum-depth-of-binary-tree",
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return its maximum depth. A binary tree&#39;s maximum depth&nbsp;is the number of nodes along the longest path from the root node down to the farthest leaf node. &nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: 3 Example 2: Input: root = [1,null,2] Output: 2 &nbsp; Constraints: The number of nodes in the tree is in the range [0, 104]. -100 &lt;= Node.val &lt;= 100"
  },
  {
    "number": 105,
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Tree",
      "Binary Tree"
    ],
    "description": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree. &nbsp; Example 1: Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7] Example 2: Input: preorder = [-1], inorder = [-1] Output: [-1] &nbsp; Constraints: 1 &lt;= preorder.length &lt;= 3000 inorder.length == preorder.length -3000 &lt;= preorder[i], inorder[i] &lt;= 3000 preorder and inorder consist of unique values. Each value of inorder also appears in preorder. preorder is guaranteed to be the preorder traversal of the tree. inorder is guaranteed to be the inorder traversal of the tree."
  },
  {
    "number": 106,
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Tree",
      "Binary Tree"
    ],
    "description": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree. &nbsp; Example 1: Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3] Output: [3,9,20,null,null,15,7] Example 2: Input: inorder = [-1], postorder = [-1] Output: [-1] &nbsp; Constraints: 1 &lt;= inorder.length &lt;= 3000 postorder.length == inorder.length -3000 &lt;= inorder[i], postorder[i] &lt;= 3000 inorder and postorder consist of unique values. Each value of postorder also appears in inorder. inorder is guaranteed to be the inorder traversal of the tree. postorder is guaranteed to be the postorder traversal of the tree."
  },
  {
    "number": 107,
    "title": "Binary Tree Level Order Traversal II",
    "titleSlug": "binary-tree-level-order-traversal-ii",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes&#39; values. (i.e., from left to right, level by level from leaf to root). &nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[15,7],[9,20],[3]] Example 2: Input: root = [1] Output: [[1]] Example 3: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 2000]. -1000 &lt;= Node.val &lt;= 1000"
  },
  {
    "number": 108,
    "title": "Convert Sorted Array to Binary Search Tree",
    "titleSlug": "convert-sorted-array-to-binary-search-tree",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree. &nbsp; Example 1: Input: nums = [-10,-3,0,5,9] Output: [0,-3,9,-10,null,5] Explanation: [0,-10,5,null,-3,null,9] is also accepted: Example 2: Input: nums = [1,3] Output: [3,1] Explanation: [1,null,3] and [3,1] are both height-balanced BSTs. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 104 -104 &lt;= nums[i] &lt;= 104 nums is sorted in a strictly increasing order."
  },
  {
    "number": 109,
    "title": "Convert Sorted List to Binary Search Tree",
    "titleSlug": "convert-sorted-list-to-binary-search-tree",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Divide and Conquer",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree. &nbsp; Example 1: Input: head = [-10,-3,0,5,9] Output: [0,-3,9,-10,null,5] Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST. Example 2: Input: head = [] Output: [] &nbsp; Constraints: The number of nodes in head is in the range [0, 2 * 104]. -105 &lt;= Node.val &lt;= 105"
  },
  {
    "number": 110,
    "title": "Balanced Binary Tree",
    "titleSlug": "balanced-binary-tree",
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree, determine if it is height-balanced. &nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: true Example 2: Input: root = [1,2,2,3,3,null,null,4,4] Output: false Example 3: Input: root = [] Output: true &nbsp; Constraints: The number of nodes in the tree is in the range [0, 5000]. -104 &lt;= Node.val &lt;= 104"
  },
  {
    "number": 111,
    "title": "Minimum Depth of Binary Tree",
    "titleSlug": "minimum-depth-of-binary-tree",
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. Note:&nbsp;A leaf is a node with no children. &nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: 2 Example 2: Input: root = [2,null,3,null,4,null,5,null,6] Output: 5 &nbsp; Constraints: The number of nodes in the tree is in the range [0, 105]. -1000 &lt;= Node.val &lt;= 1000"
  },
  {
    "number": 112,
    "title": "Path Sum",
    "titleSlug": "path-sum",
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum. A leaf is a node with no children. &nbsp; Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 Output: true Explanation: The root-to-leaf path with the target sum is shown. Example 2: Input: root = [1,2,3], targetSum = 5 Output: false Explanation: There are two root-to-leaf paths in the tree: (1 --&gt; 2): The sum is 3. (1 --&gt; 3): The sum is 4. There is no root-to-leaf path with sum = 5. Example 3: Input: root = [], targetSum = 0 Output: false Explanation: Since the tree is empty, there are no root-to-leaf paths. &nbsp; Constraints: The number of nodes in the tree is in the range [0, 5000]. -1000 &lt;= Node.val &lt;= 1000 -1000 &lt;= targetSum &lt;= 1000"
  },
  {
    "number": 113,
    "title": "Path Sum II",
    "titleSlug": "path-sum-ii",
    "difficulty": "Medium",
    "tags": [
      "Backtracking",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references. A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children. &nbsp; Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 Output: [[5,4,11,2],[5,8,4,5]] Explanation: There are two paths whose sum equals targetSum: 5 + 4 + 11 + 2 = 22 5 + 8 + 4 + 5 = 22 Example 2: Input: root = [1,2,3], targetSum = 5 Output: [] Example 3: Input: root = [1,2], targetSum = 0 Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 5000]. -1000 &lt;= Node.val &lt;= 1000 -1000 &lt;= targetSum &lt;= 1000"
  },
  {
    "number": 114,
    "title": "Flatten Binary Tree to Linked List",
    "titleSlug": "flatten-binary-tree-to-linked-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, flatten the tree into a &quot;linked list&quot;: The &quot;linked list&quot; should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The &quot;linked list&quot; should be in the same order as a pre-order traversal of the binary tree. &nbsp; Example 1: Input: root = [1,2,5,3,4,null,6] Output: [1,null,2,null,3,null,4,null,5,null,6] Example 2: Input: root = [] Output: [] Example 3: Input: root = [0] Output: [0] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 2000]. -100 &lt;= Node.val &lt;= 100 &nbsp; Follow up: Can you flatten the tree in-place (with O(1) extra space)?"
  },
  {
    "number": 115,
    "title": "Distinct Subsequences",
    "titleSlug": "distinct-subsequences",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings s and t, return the number of distinct subsequences of s which equals t. The test cases are generated so that the answer fits on a 32-bit signed integer. &nbsp; Example 1: Input: s = &quot;rabbbit&quot;, t = &quot;rabbit&quot; Output: 3 Explanation: As shown below, there are 3 ways you can generate &quot;rabbit&quot; from s. rabbbit rabbbit rabbbit Example 2: Input: s = &quot;babgbag&quot;, t = &quot;bag&quot; Output: 5 Explanation: As shown below, there are 5 ways you can generate &quot;bag&quot; from s. babgbag babgbag babgbag babgbag babgbag &nbsp; Constraints: 1 &lt;= s.length, t.length &lt;= 1000 s and t consist of English letters."
  },
  {
    "number": 116,
    "title": "Populating Next Right Pointers in Each Node",
    "titleSlug": "populating-next-right-pointers-in-each-node",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition: struct Node { int val; Node *left; Node *right; Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all next pointers are set to NULL. &nbsp; Example 1: Input: root = [1,2,3,4,5,6,7] Output: [1,#,2,3,#,4,5,6,7,#] Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level. Example 2: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 212 - 1]. -1000 &lt;= Node.val &lt;= 1000 &nbsp; Follow-up: You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem."
  },
  {
    "number": 117,
    "title": "Populating Next Right Pointers in Each Node II",
    "titleSlug": "populating-next-right-pointers-in-each-node-ii",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree struct Node { int val; Node *left; Node *right; Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all next pointers are set to NULL. &nbsp; Example 1: Input: root = [1,2,3,4,5,null,7] Output: [1,#,2,3,#,4,5,7,#] Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level. Example 2: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 6000]. -100 &lt;= Node.val &lt;= 100 &nbsp; Follow-up: You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem."
  },
  {
    "number": 118,
    "title": "Pascal's Triangle",
    "titleSlug": "pascals-triangle",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer numRows, return the first numRows of Pascal&#39;s triangle. In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it as shown: &nbsp; Example 1: Input: numRows = 5 Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] Example 2: Input: numRows = 1 Output: [[1]] &nbsp; Constraints: 1 &lt;= numRows &lt;= 30"
  },
  {
    "number": 119,
    "title": "Pascal's Triangle II",
    "titleSlug": "pascals-triangle-ii",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal&#39;s triangle. In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it as shown: &nbsp; Example 1: Input: rowIndex = 3 Output: [1,3,3,1] Example 2: Input: rowIndex = 0 Output: [1] Example 3: Input: rowIndex = 1 Output: [1,1] &nbsp; Constraints: 0 &lt;= rowIndex &lt;= 33 &nbsp; Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?"
  },
  {
    "number": 120,
    "title": "Triangle",
    "titleSlug": "triangle",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given a triangle array, return the minimum path sum from top to bottom. For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row. &nbsp; Example 1: Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]] Output: 11 Explanation: The triangle looks like: 2 3 4 6 5 7 4 1 8 3 The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above). Example 2: Input: triangle = [[-10]] Output: -10 &nbsp; Constraints: 1 &lt;= triangle.length &lt;= 200 triangle[0].length == 1 triangle[i].length == triangle[i - 1].length + 1 -104 &lt;= triangle[i][j] &lt;= 104 &nbsp; Follow up: Could you&nbsp;do this using only O(n) extra space, where n is the total number of rows in the triangle?"
  },
  {
    "number": 121,
    "title": "Best Time to Buy and Sell Stock",
    "titleSlug": "best-time-to-buy-and-sell-stock",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0. &nbsp; Example 1: Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. Example 2: Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. &nbsp; Constraints: 1 &lt;= prices.length &lt;= 105 0 &lt;= prices[i] &lt;= 104"
  },
  {
    "number": 122,
    "title": "Best Time to Buy and Sell Stock II",
    "titleSlug": "best-time-to-buy-and-sell-stock-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day. On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day. Find and return the maximum profit you can achieve. &nbsp; Example 1: Input: prices = [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Example 2: Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. Example 3: Input: prices = [7,6,4,3,1] Output: 0 Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0. &nbsp; Constraints: 1 &lt;= prices.length &lt;= 3 * 104 0 &lt;= prices[i] &lt;= 104"
  },
  {
    "number": 123,
    "title": "Best Time to Buy and Sell Stock III",
    "titleSlug": "best-time-to-buy-and-sell-stock-iii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete at most two transactions. Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). &nbsp; Example 1: Input: prices = [3,3,5,0,0,3,1,4] Output: 6 Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. Example 2: Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again. Example 3: Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transaction is done, i.e. max profit = 0. &nbsp; Constraints: 1 &lt;= prices.length &lt;= 105 0 &lt;= prices[i] &lt;= 105"
  },
  {
    "number": 124,
    "title": "Binary Tree Maximum Path Sum",
    "titleSlug": "binary-tree-maximum-path-sum",
    "difficulty": "Hard",
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root. The path sum of a path is the sum of the node&#39;s values in the path. Given the root of a binary tree, return the maximum path sum of any non-empty path. &nbsp; Example 1: Input: root = [1,2,3] Output: 6 Explanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6. Example 2: Input: root = [-10,9,20,null,null,15,7] Output: 42 Explanation: The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42. &nbsp; Constraints: The number of nodes in the tree is in the range [1, 3 * 104]. -1000 &lt;= Node.val &lt;= 1000"
  },
  {
    "number": 125,
    "title": "Valid Palindrome",
    "titleSlug": "valid-palindrome",
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers. Given a string s, return true if it is a palindrome, or false otherwise. &nbsp; Example 1: Input: s = &quot;A man, a plan, a canal: Panama&quot; Output: true Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome. Example 2: Input: s = &quot;race a car&quot; Output: false Explanation: &quot;raceacar&quot; is not a palindrome. Example 3: Input: s = &quot; &quot; Output: true Explanation: s is an empty string &quot;&quot; after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome. &nbsp; Constraints: 1 &lt;= s.length &lt;= 2 * 105 s consists only of printable ASCII characters."
  },
  {
    "number": 126,
    "title": "Word Ladder II",
    "titleSlug": "word-ladder-ii",
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String",
      "Backtracking",
      "Breadth-First Search"
    ],
    "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk such that: Every adjacent pair of words differs by a single letter. Every si for 1 &lt;= i &lt;= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk]. &nbsp; Example 1: Input: beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;] Output: [[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]] Explanation:&nbsp;There are 2 shortest transformation sequences: &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot; &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;lot&quot; -&gt; &quot;log&quot; -&gt; &quot;cog&quot; Example 2: Input: beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;] Output: [] Explanation: The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence. &nbsp; Constraints: 1 &lt;= beginWord.length &lt;= 5 endWord.length == beginWord.length 1 &lt;= wordList.length &lt;= 500 wordList[i].length == beginWord.length beginWord, endWord, and wordList[i] consist of lowercase English letters. beginWord != endWord All the words in wordList are unique. The sum of all shortest transformation sequences does not exceed 105."
  },
  {
    "number": 127,
    "title": "Word Ladder",
    "titleSlug": "word-ladder",
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String",
      "Breadth-First Search"
    ],
    "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk such that: Every adjacent pair of words differs by a single letter. Every si for 1 &lt;= i &lt;= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists. &nbsp; Example 1: Input: beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;] Output: 5 Explanation: One shortest transformation sequence is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; cog&quot;, which is 5 words long. Example 2: Input: beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;] Output: 0 Explanation: The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence. &nbsp; Constraints: 1 &lt;= beginWord.length &lt;= 10 endWord.length == beginWord.length 1 &lt;= wordList.length &lt;= 5000 wordList[i].length == beginWord.length beginWord, endWord, and wordList[i] consist of lowercase English letters. beginWord != endWord All the words in wordList are unique."
  },
  {
    "number": 128,
    "title": "Longest Consecutive Sequence",
    "titleSlug": "longest-consecutive-sequence",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Union Find"
    ],
    "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in&nbsp;O(n)&nbsp;time. &nbsp; Example 1: Input: nums = [100,4,200,1,3,2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: nums = [0,3,7,2,5,8,4,6,0,1] Output: 9 Example 3: Input: nums = [1,0,1,2] Output: 3 &nbsp; Constraints: 0 &lt;= nums.length &lt;= 105 -109 &lt;= nums[i] &lt;= 109"
  },
  {
    "number": 129,
    "title": "Sum Root to Leaf Numbers",
    "titleSlug": "sum-root-to-leaf-numbers",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree containing digits from 0 to 9 only. Each root-to-leaf path in the tree represents a number. For example, the root-to-leaf path 1 -&gt; 2 -&gt; 3 represents the number 123. Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer. A leaf node is a node with no children. &nbsp; Example 1: Input: root = [1,2,3] Output: 25 Explanation: The root-to-leaf path 1-&gt;2 represents the number 12. The root-to-leaf path 1-&gt;3 represents the number 13. Therefore, sum = 12 + 13 = 25. Example 2: Input: root = [4,9,0,5,1] Output: 1026 Explanation: The root-to-leaf path 4-&gt;9-&gt;5 represents the number 495. The root-to-leaf path 4-&gt;9-&gt;1 represents the number 491. The root-to-leaf path 4-&gt;0 represents the number 40. Therefore, sum = 495 + 491 + 40 = 1026. &nbsp; Constraints: The number of nodes in the tree is in the range [1, 1000]. 0 &lt;= Node.val &lt;= 9 The depth of the tree will not exceed 10."
  },
  {
    "number": 130,
    "title": "Surrounded Regions",
    "titleSlug": "surrounded-regions",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given an m x n matrix board containing letters &#39;X&#39; and &#39;O&#39;, capture regions that are surrounded: Connect: A cell is connected to adjacent cells horizontally or vertically. Region: To form a region connect every &#39;O&#39; cell. Surround: The region is surrounded with &#39;X&#39; cells if you can connect the region with &#39;X&#39; cells and none of the region cells are on the edge of the board. To capture a surrounded region, replace all &#39;O&#39;s with &#39;X&#39;s in-place within the original board. You do not need to return anything. &nbsp; Example 1: Input: board = [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]] Output: [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]] Explanation: In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded. Example 2: Input: board = [[&quot;X&quot;]] Output: [[&quot;X&quot;]] &nbsp; Constraints: m == board.length n == board[i].length 1 &lt;= m, n &lt;= 200 board[i][j] is &#39;X&#39; or &#39;O&#39;."
  },
  {
    "number": 131,
    "title": "Palindrome Partitioning",
    "titleSlug": "palindrome-partitioning",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s. &nbsp; Example 1: Input: s = \"aab\" Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]] Example 2: Input: s = \"a\" Output: [[\"a\"]] &nbsp; Constraints: 1 &lt;= s.length &lt;= 16 s contains only lowercase English letters."
  },
  {
    "number": 132,
    "title": "Palindrome Partitioning II",
    "titleSlug": "palindrome-partitioning-ii",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, partition s such that every substring of the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of s. &nbsp; Example 1: Input: s = &quot;aab&quot; Output: 1 Explanation: The palindrome partitioning [&quot;aa&quot;,&quot;b&quot;] could be produced using 1 cut. Example 2: Input: s = &quot;a&quot; Output: 0 Example 3: Input: s = &quot;ab&quot; Output: 1 &nbsp; Constraints: 1 &lt;= s.length &lt;= 2000 s consists of lowercase English letters only."
  },
  {
    "number": 133,
    "title": "Clone Graph",
    "titleSlug": "clone-graph",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "Given a reference of a node in a connected undirected graph. Return a deep copy (clone) of the graph. Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors. class Node { public int val; public List&lt;Node&gt; neighbors; } &nbsp; Test case format: For simplicity, each node&#39;s value is the same as the node&#39;s index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list. An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph. The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph. &nbsp; Example 1: Input: adjList = [[2,4],[1,3],[2,4],[1,3]] Output: [[2,4],[1,3],[2,4],[1,3]] Explanation: There are 4 nodes in the graph. 1st node (val = 1)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4). 2nd node (val = 2)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3). 3rd node (val = 3)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4). 4th node (val = 4)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3). Example 2: Input: adjList = [[]] Output: [[]] Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors. Example 3: Input: adjList = [] Output: [] Explanation: This an empty graph, it does not have any nodes. &nbsp; Constraints: The number of nodes in the graph is in the range [0, 100]. 1 &lt;= Node.val &lt;= 100 Node.val is unique for each node. There are no repeated edges and no self-loops in the graph. The Graph is connected and all nodes can be visited starting from the given node."
  },
  {
    "number": 134,
    "title": "Gas Station",
    "titleSlug": "gas-station",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Greedy"
    ],
    "description": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i]. You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays gas and cost, return the starting gas station&#39;s index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique. &nbsp; Example 1: Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2] Output: 3 Explanation: Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index. Example 2: Input: gas = [2,3,4], cost = [3,4,3] Output: -1 Explanation: You can&#39;t start at station 0 or 1, as there is not enough gas to travel to the next station. Let&#39;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 0. Your tank = 4 - 3 + 2 = 3 Travel to station 1. Your tank = 3 - 3 + 3 = 3 You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3. Therefore, you can&#39;t travel around the circuit once no matter where you start. &nbsp; Constraints: n == gas.length == cost.length 1 &lt;= n &lt;= 105 0 &lt;= gas[i], cost[i] &lt;= 104"
  },
  {
    "number": 135,
    "title": "Candy",
    "titleSlug": "candy",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Greedy"
    ],
    "description": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings. You are giving candies to these children subjected to the following requirements: Each child must have at least one candy. Children with a higher rating get more candies than their neighbors. Return the minimum number of candies you need to have to distribute the candies to the children. &nbsp; Example 1: Input: ratings = [1,0,2] Output: 5 Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively. Example 2: Input: ratings = [1,2,2] Output: 4 Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions. &nbsp; Constraints: n == ratings.length 1 &lt;= n &lt;= 2 * 104 0 &lt;= ratings[i] &lt;= 2 * 104"
  },
  {
    "number": 136,
    "title": "Single Number",
    "titleSlug": "single-number",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "Given a non-empty&nbsp;array of integers nums, every element appears twice except for one. Find that single one. You must&nbsp;implement a solution with a linear runtime complexity and use&nbsp;only constant&nbsp;extra space. &nbsp; Example 1: Input: nums = [2,2,1] Output: 1 Example 2: Input: nums = [4,1,2,1,2] Output: 4 Example 3: Input: nums = [1] Output: 1 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 3 * 104 -3 * 104 &lt;= nums[i] &lt;= 3 * 104 Each element in the array appears twice except for one element which appears only once."
  },
  {
    "number": 137,
    "title": "Single Number II",
    "titleSlug": "single-number-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums where&nbsp;every element appears three times except for one, which appears exactly once. Find the single element and return it. You must&nbsp;implement a solution with a linear runtime complexity and use&nbsp;only constant&nbsp;extra space. &nbsp; Example 1: Input: nums = [2,2,3,2] Output: 3 Example 2: Input: nums = [0,1,0,1,0,1,99] Output: 99 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 3 * 104 -231 &lt;= nums[i] &lt;= 231 - 1 Each element in nums appears exactly three times except for one element which appears once."
  },
  {
    "number": 138,
    "title": "Copy List with Random Pointer",
    "titleSlug": "copy-list-with-random-pointer",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Linked List"
    ],
    "description": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null. Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list. For example, if there are two nodes X and Y in the original list, where X.random --&gt; Y, then for the corresponding two nodes x and y in the copied list, x.random --&gt; y. Return the head of the copied linked list. The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where: val: an integer representing Node.val random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node. Your code will only be given the head of the original linked list. &nbsp; Example 1: Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]] Output: [[7,null],[13,0],[11,4],[10,2],[1,0]] Example 2: Input: head = [[1,1],[2,1]] Output: [[1,1],[2,1]] Example 3: Input: head = [[3,null],[3,0],[3,null]] Output: [[3,null],[3,0],[3,null]] &nbsp; Constraints: 0 &lt;= n &lt;= 1000 -104 &lt;= Node.val &lt;= 104 Node.random is null or is pointing to some node in the linked list."
  },
  {
    "number": 139,
    "title": "Word Break",
    "titleSlug": "word-break",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Trie",
      "Memoization"
    ],
    "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation. &nbsp; Example 1: Input: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;,&quot;code&quot;] Output: true Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;. Example 2: Input: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;] Output: true Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;. Note that you are allowed to reuse a dictionary word. Example 3: Input: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;] Output: false &nbsp; Constraints: 1 &lt;= s.length &lt;= 300 1 &lt;= wordDict.length &lt;= 1000 1 &lt;= wordDict[i].length &lt;= 20 s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique."
  },
  {
    "number": 140,
    "title": "Word Break II",
    "titleSlug": "word-break-ii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Trie",
      "Memoization"
    ],
    "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order. Note that the same word in the dictionary may be reused multiple times in the segmentation. &nbsp; Example 1: Input: s = &quot;catsanddog&quot;, wordDict = [&quot;cat&quot;,&quot;cats&quot;,&quot;and&quot;,&quot;sand&quot;,&quot;dog&quot;] Output: [&quot;cats and dog&quot;,&quot;cat sand dog&quot;] Example 2: Input: s = &quot;pineapplepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;,&quot;applepen&quot;,&quot;pine&quot;,&quot;pineapple&quot;] Output: [&quot;pine apple pen apple&quot;,&quot;pineapple pen apple&quot;,&quot;pine applepen apple&quot;] Explanation: Note that you are allowed to reuse a dictionary word. Example 3: Input: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;] Output: [] &nbsp; Constraints: 1 &lt;= s.length &lt;= 20 1 &lt;= wordDict.length &lt;= 1000 1 &lt;= wordDict[i].length &lt;= 10 s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique. Input is generated in a way that the length of the answer doesn&#39;t exceed&nbsp;105."
  },
  {
    "number": 141,
    "title": "Linked List Cycle",
    "titleSlug": "linked-list-cycle",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the&nbsp;next&nbsp;pointer. Internally, pos&nbsp;is used to denote the index of the node that&nbsp;tail&#39;s&nbsp;next&nbsp;pointer is connected to.&nbsp;Note that&nbsp;pos&nbsp;is not passed as a parameter. Return&nbsp;true if there is a cycle in the linked list. Otherwise, return false. &nbsp; Example 1: Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). Example 2: Input: head = [1,2], pos = 0 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 0th node. Example 3: Input: head = [1], pos = -1 Output: false Explanation: There is no cycle in the linked list. &nbsp; Constraints: The number of the nodes in the list is in the range [0, 104]. -105 &lt;= Node.val &lt;= 105 pos is -1 or a valid index in the linked-list. &nbsp; Follow up: Can you solve it using O(1) (i.e. constant) memory?"
  },
  {
    "number": 142,
    "title": "Linked List Cycle II",
    "titleSlug": "linked-list-cycle-ii",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail&#39;s next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter. Do not modify the linked list. &nbsp; Example 1: Input: head = [3,2,0,-4], pos = 1 Output: tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node. Example 2: Input: head = [1,2], pos = 0 Output: tail connects to node index 0 Explanation: There is a cycle in the linked list, where tail connects to the first node. Example 3: Input: head = [1], pos = -1 Output: no cycle Explanation: There is no cycle in the linked list. &nbsp; Constraints: The number of the nodes in the list is in the range [0, 104]. -105 &lt;= Node.val &lt;= 105 pos is -1 or a valid index in the linked-list. &nbsp; Follow up: Can you solve it using O(1) (i.e. constant) memory?"
  },
  {
    "number": 143,
    "title": "Reorder List",
    "titleSlug": "reorder-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Stack",
      "Recursion"
    ],
    "description": "You are given the head of a singly linked-list. The list can be represented as: L0 &rarr; L1 &rarr; &hellip; &rarr; Ln - 1 &rarr; Ln Reorder the list to be on the following form: L0 &rarr; Ln &rarr; L1 &rarr; Ln - 1 &rarr; L2 &rarr; Ln - 2 &rarr; &hellip; You may not modify the values in the list&#39;s nodes. Only nodes themselves may be changed. &nbsp; Example 1: Input: head = [1,2,3,4] Output: [1,4,2,3] Example 2: Input: head = [1,2,3,4,5] Output: [1,5,2,4,3] &nbsp; Constraints: The number of nodes in the list is in the range [1, 5 * 104]. 1 &lt;= Node.val &lt;= 1000"
  },
  {
    "number": 144,
    "title": "Binary Tree Preorder Traversal",
    "titleSlug": "binary-tree-preorder-traversal",
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the preorder traversal of its nodes&#39; values. &nbsp; Example 1: Input: root = [1,null,2,3] Output: [1,2,3] Explanation: Example 2: Input: root = [1,2,3,4,5,null,8,null,null,6,7,9] Output: [1,2,4,5,6,7,3,8,9] Explanation: Example 3: Input: root = [] Output: [] Example 4: Input: root = [1] Output: [1] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 100]. -100 &lt;= Node.val &lt;= 100 &nbsp; Follow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "number": 145,
    "title": "Binary Tree Postorder Traversal",
    "titleSlug": "binary-tree-postorder-traversal",
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a&nbsp;binary tree, return the postorder traversal of its nodes&#39; values. &nbsp; Example 1: Input: root = [1,null,2,3] Output: [3,2,1] Explanation: Example 2: Input: root = [1,2,3,4,5,null,8,null,null,6,7,9] Output: [4,6,7,5,2,9,8,3,1] Explanation: Example 3: Input: root = [] Output: [] Example 4: Input: root = [1] Output: [1] &nbsp; Constraints: The number of the nodes in the tree is in the range [0, 100]. -100 &lt;= Node.val &lt;= 100 &nbsp; Follow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "number": 146,
    "title": "LRU Cache",
    "titleSlug": "lru-cache",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class: LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists, otherwise return -1. void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key. The functions get and put must each run in O(1) average time complexity. &nbsp; Example 1: Input [&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]] Output [null, null, null, 1, null, -1, null, -1, 3, 4] Explanation LRUCache lRUCache = new LRUCache(2); lRUCache.put(1, 1); // cache is {1=1} lRUCache.put(2, 2); // cache is {1=1, 2=2} lRUCache.get(1); // return 1 lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3} lRUCache.get(2); // returns -1 (not found) lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3} lRUCache.get(1); // return -1 (not found) lRUCache.get(3); // return 3 lRUCache.get(4); // return 4 &nbsp; Constraints: 1 &lt;= capacity &lt;= 3000 0 &lt;= key &lt;= 104 0 &lt;= value &lt;= 105 At most 2 * 105 calls will be made to get and put."
  },
  {
    "number": 147,
    "title": "Insertion Sort List",
    "titleSlug": "insertion-sort-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Sorting"
    ],
    "description": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list&#39;s head. The steps of the insertion sort algorithm: Insertion sort iterates, consuming one input element each repetition and growing a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there. It repeats until no input elements remain. The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration. &nbsp; Example 1: Input: head = [4,2,1,3] Output: [1,2,3,4] Example 2: Input: head = [-1,5,3,4,0] Output: [-1,0,3,4,5] &nbsp; Constraints: The number of nodes in the list is in the range [1, 5000]. -5000 &lt;= Node.val &lt;= 5000"
  },
  {
    "number": 148,
    "title": "Sort List",
    "titleSlug": "sort-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Divide and Conquer",
      "Sorting",
      "Merge Sort"
    ],
    "description": "Given the head of a linked list, return the list after sorting it in ascending order. &nbsp; Example 1: Input: head = [4,2,1,3] Output: [1,2,3,4] Example 2: Input: head = [-1,5,3,4,0] Output: [-1,0,3,4,5] Example 3: Input: head = [] Output: [] &nbsp; Constraints: The number of nodes in the list is in the range [0, 5 * 104]. -105 &lt;= Node.val &lt;= 105 &nbsp; Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?"
  },
  {
    "number": 149,
    "title": "Max Points on a Line",
    "titleSlug": "max-points-on-a-line",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Geometry"
    ],
    "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line. &nbsp; Example 1: Input: points = [[1,1],[2,2],[3,3]] Output: 3 Example 2: Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]] Output: 4 &nbsp; Constraints: 1 &lt;= points.length &lt;= 300 points[i].length == 2 -104 &lt;= xi, yi &lt;= 104 All the points are unique."
  },
  {
    "number": 150,
    "title": "Evaluate Reverse Polish Notation",
    "titleSlug": "evaluate-reverse-polish-notation",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Stack"
    ],
    "description": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation. Evaluate the expression. Return an integer that represents the value of the expression. Note that: The valid operators are &#39;+&#39;, &#39;-&#39;, &#39;*&#39;, and &#39;/&#39;. Each operand may be an integer or another expression. The division between two integers always truncates toward zero. There will not be any division by zero. The input represents a valid arithmetic expression in a reverse polish notation. The answer and all the intermediate calculations can be represented in a 32-bit integer. &nbsp; Example 1: Input: tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;] Output: 9 Explanation: ((2 + 1) * 3) = 9 Example 2: Input: tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;] Output: 6 Explanation: (4 + (13 / 5)) = 6 Example 3: Input: tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;] Output: 22 Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22 &nbsp; Constraints: 1 &lt;= tokens.length &lt;= 104 tokens[i] is either an operator: &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, or &quot;/&quot;, or an integer in the range [-200, 200]."
  },
  {
    "number": 151,
    "title": "Reverse Words in a String",
    "titleSlug": "reverse-words-in-a-string",
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": "Given an input string s, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces. &nbsp; Example 1: Input: s = &quot;the sky is blue&quot; Output: &quot;blue is sky the&quot; Example 2: Input: s = &quot; hello world &quot; Output: &quot;world hello&quot; Explanation: Your reversed string should not contain leading or trailing spaces. Example 3: Input: s = &quot;a good example&quot; Output: &quot;example good a&quot; Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string. &nbsp; Constraints: 1 &lt;= s.length &lt;= 104 s contains English letters (upper-case and lower-case), digits, and spaces &#39; &#39;. There is at least one word in s. &nbsp; Follow-up:&nbsp;If the string data type is mutable in your language, can&nbsp;you solve it&nbsp;in-place&nbsp;with&nbsp;O(1)&nbsp;extra space?"
  },
  {
    "number": 152,
    "title": "Maximum Product Subarray",
    "titleSlug": "maximum-product-subarray",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, find a subarray that has the largest product, and return the product. The test cases are generated so that the answer will fit in a 32-bit integer. &nbsp; Example 1: Input: nums = [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. Example 2: Input: nums = [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a subarray. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 2 * 104 -10 &lt;= nums[i] &lt;= 10 The product of any subarray of nums is guaranteed to fit in a 32-bit integer."
  },
  {
    "number": 153,
    "title": "Find Minimum in Rotated Sorted Array",
    "titleSlug": "find-minimum-in-rotated-sorted-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become: [4,5,6,7,0,1,2] if it was rotated 4 times. [0,1,2,4,5,6,7] if it was rotated 7 times. Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. Given the sorted rotated array nums of unique elements, return the minimum element of this array. You must write an algorithm that runs in&nbsp;O(log n) time. &nbsp; Example 1: Input: nums = [3,4,5,1,2] Output: 1 Explanation: The original array was [1,2,3,4,5] rotated 3 times. Example 2: Input: nums = [4,5,6,7,0,1,2] Output: 0 Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times. Example 3: Input: nums = [11,13,15,17] Output: 11 Explanation: The original array was [11,13,15,17] and it was rotated 4 times. &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 5000 -5000 &lt;= nums[i] &lt;= 5000 All the integers of nums are unique. nums is sorted and rotated between 1 and n times."
  },
  {
    "number": 154,
    "title": "Find Minimum in Rotated Sorted Array II",
    "titleSlug": "find-minimum-in-rotated-sorted-array-ii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become: [4,5,6,7,0,1,4] if it was rotated 4 times. [0,1,4,4,5,6,7] if it was rotated 7 times. Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array. You must decrease the overall operation steps as much as possible. &nbsp; Example 1: Input: nums = [1,3,5] Output: 1 Example 2: Input: nums = [2,2,2,0,1] Output: 0 &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 5000 -5000 &lt;= nums[i] &lt;= 5000 nums is sorted and rotated between 1 and n times. &nbsp; Follow up: This problem is similar to&nbsp;Find Minimum in Rotated Sorted Array, but&nbsp;nums may contain duplicates. Would this affect the runtime complexity? How and why? &nbsp;"
  },
  {
    "number": 155,
    "title": "Min Stack",
    "titleSlug": "min-stack",
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Design"
    ],
    "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Implement the MinStack class: MinStack() initializes the stack object. void push(int val) pushes the element val onto the stack. void pop() removes the element on the top of the stack. int top() gets the top element of the stack. int getMin() retrieves the minimum element in the stack. You must implement a solution with O(1) time complexity for each function. &nbsp; Example 1: Input [&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;] [[],[-2],[0],[-3],[],[],[],[]] Output [null,null,null,null,-3,null,0,-2] Explanation MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); // return -3 minStack.pop(); minStack.top(); // return 0 minStack.getMin(); // return -2 &nbsp; Constraints: -231 &lt;= val &lt;= 231 - 1 Methods pop, top and getMin operations will always be called on non-empty stacks. At most 3 * 104 calls will be made to push, pop, top, and getMin."
  },
  {
    "number": 156,
    "title": "Binary Tree Upside Down",
    "titleSlug": "binary-tree-upside-down",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 157,
    "title": "Read N Characters Given Read4",
    "titleSlug": "read-n-characters-given-read4",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Simulation",
      "Interactive"
    ],
    "description": ""
  },
  {
    "number": 158,
    "title": "Read N Characters Given read4 II - Call Multiple Times",
    "titleSlug": "read-n-characters-given-read4-ii-call-multiple-times",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Simulation",
      "Interactive"
    ],
    "description": ""
  },
  {
    "number": 159,
    "title": "Longest Substring with At Most Two Distinct Characters",
    "titleSlug": "longest-substring-with-at-most-two-distinct-characters",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": ""
  },
  {
    "number": 160,
    "title": "Intersection of Two Linked Lists",
    "titleSlug": "intersection-of-two-linked-lists",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null. For example, the following two linked lists begin to intersect at node c1: The test cases are generated such that there are no cycles anywhere in the entire linked structure. Note that the linked lists must retain their original structure after the function returns. Custom Judge: The inputs to the judge are given as follows (your program is not given these inputs): intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node. listA - The first linked list. listB - The second linked list. skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node. skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node. The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted. &nbsp; Example 1: Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3 Output: Intersected at &#39;8&#39; Explanation: The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B. - Note that the intersected node&#39;s value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory. Example 2: Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 Output: Intersected at &#39;2&#39; Explanation: The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B. Example 3: Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2 Output: No intersection Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values. Explanation: The two lists do not intersect, so return null. &nbsp; Constraints: The number of nodes of listA is in the m. The number of nodes of listB is in the n. 1 &lt;= m, n &lt;= 3 * 104 1 &lt;= Node.val &lt;= 105 0 &lt;= skipA &lt;= m 0 &lt;= skipB &lt;= n intersectVal is 0 if listA and listB do not intersect. intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect. &nbsp; Follow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?"
  },
  {
    "number": 161,
    "title": "One Edit Distance",
    "titleSlug": "one-edit-distance",
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": ""
  },
  {
    "number": 162,
    "title": "Find Peak Element",
    "titleSlug": "find-peak-element",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "description": "A peak element is an element that is strictly greater than its neighbors. Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks. You may imagine that nums[-1] = nums[n] = -&infin;. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array. You must write an algorithm that runs in O(log n) time. &nbsp; Example 1: Input: nums = [1,2,3,1] Output: 2 Explanation: 3 is a peak element and your function should return the index number 2. Example 2: Input: nums = [1,2,1,3,5,6,4] Output: 5 Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 1000 -231 &lt;= nums[i] &lt;= 231 - 1 nums[i] != nums[i + 1] for all valid i."
  },
  {
    "number": 163,
    "title": "Missing Ranges",
    "titleSlug": "missing-ranges",
    "difficulty": "Easy",
    "tags": [
      "Array"
    ],
    "description": ""
  },
  {
    "number": 164,
    "title": "Maximum Gap",
    "titleSlug": "maximum-gap",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Sorting",
      "Bucket Sort",
      "Radix Sort"
    ],
    "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0. You must write an algorithm that runs in linear time and uses linear extra space. &nbsp; Example 1: Input: nums = [3,6,9,1] Output: 3 Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3. Example 2: Input: nums = [10] Output: 0 Explanation: The array contains less than 2 elements, therefore return 0. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 0 &lt;= nums[i] &lt;= 109"
  },
  {
    "number": 165,
    "title": "Compare Version Numbers",
    "titleSlug": "compare-version-numbers",
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": "Given two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots &#39;.&#39;. The value of the revision is its integer conversion ignoring leading zeros. To compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0. Return the following: If version1 &lt; version2, return -1. If version1 &gt; version2, return 1. Otherwise, return 0. &nbsp; Example 1: Input: version1 = &quot;1.2&quot;, version2 = &quot;1.10&quot; Output: -1 Explanation: version1&#39;s second revision is &quot;2&quot; and version2&#39;s second revision is &quot;10&quot;: 2 &lt; 10, so version1 &lt; version2. Example 2: Input: version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot; Output: 0 Explanation: Ignoring leading zeroes, both &quot;01&quot; and &quot;001&quot; represent the same integer &quot;1&quot;. Example 3: Input: version1 = &quot;1.0&quot;, version2 = &quot;1.0.0.0&quot; Output: 0 Explanation: version1 has less revisions, which means every missing revision are treated as &quot;0&quot;. &nbsp; Constraints: 1 &lt;= version1.length, version2.length &lt;= 500 version1 and version2&nbsp;only contain digits and &#39;.&#39;. version1 and version2&nbsp;are valid version numbers. All the given revisions in&nbsp;version1 and version2&nbsp;can be stored in&nbsp;a&nbsp;32-bit integer."
  },
  {
    "number": 166,
    "title": "Fraction to Recurring Decimal",
    "titleSlug": "fraction-to-recurring-decimal",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses. If multiple answers are possible, return any of them. It is guaranteed that the length of the answer string is less than 104 for all the given inputs. &nbsp; Example 1: Input: numerator = 1, denominator = 2 Output: &quot;0.5&quot; Example 2: Input: numerator = 2, denominator = 1 Output: &quot;2&quot; Example 3: Input: numerator = 4, denominator = 333 Output: &quot;0.(012)&quot; &nbsp; Constraints: -231 &lt;=&nbsp;numerator, denominator &lt;= 231 - 1 denominator != 0"
  },
  {
    "number": 167,
    "title": "Two Sum II - Input Array Is Sorted",
    "titleSlug": "two-sum-ii-input-array-is-sorted",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search"
    ],
    "description": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 &lt;= index1 &lt; index2 &lt;= numbers.length. Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2. The tests are generated such that there is exactly one solution. You may not use the same element twice. Your solution must use only constant extra space. &nbsp; Example 1: Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]. Example 2: Input: numbers = [2,3,4], target = 6 Output: [1,3] Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3]. Example 3: Input: numbers = [-1,0], target = -1 Output: [1,2] Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]. &nbsp; Constraints: 2 &lt;= numbers.length &lt;= 3 * 104 -1000 &lt;= numbers[i] &lt;= 1000 numbers is sorted in non-decreasing order. -1000 &lt;= target &lt;= 1000 The tests are generated such that there is exactly one solution."
  },
  {
    "number": 168,
    "title": "Excel Sheet Column Title",
    "titleSlug": "excel-sheet-column-title",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String"
    ],
    "description": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet. For example: A -&gt; 1 B -&gt; 2 C -&gt; 3 ... Z -&gt; 26 AA -&gt; 27 AB -&gt; 28 ... &nbsp; Example 1: Input: columnNumber = 1 Output: &quot;A&quot; Example 2: Input: columnNumber = 28 Output: &quot;AB&quot; Example 3: Input: columnNumber = 701 Output: &quot;ZY&quot; &nbsp; Constraints: 1 &lt;= columnNumber &lt;= 231 - 1"
  },
  {
    "number": 169,
    "title": "Majority Element",
    "titleSlug": "majority-element",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Counting"
    ],
    "description": "Given an array nums of size n, return the majority element. The majority element is the element that appears more than &lfloor;n / 2&rfloor; times. You may assume that the majority element always exists in the array. &nbsp; Example 1: Input: nums = [3,2,3] Output: 3 Example 2: Input: nums = [2,2,1,1,1,2,2] Output: 2 &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 5 * 104 -109 &lt;= nums[i] &lt;= 109 &nbsp; Follow-up: Could you solve the problem in linear time and in O(1) space?"
  },
  {
    "number": 170,
    "title": "Two Sum III - Data structure design",
    "titleSlug": "two-sum-iii-data-structure-design",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Design",
      "Data Stream"
    ],
    "description": ""
  },
  {
    "number": 171,
    "title": "Excel Sheet Column Number",
    "titleSlug": "excel-sheet-column-number",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String"
    ],
    "description": "Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number. For example: A -&gt; 1 B -&gt; 2 C -&gt; 3 ... Z -&gt; 26 AA -&gt; 27 AB -&gt; 28 ... &nbsp; Example 1: Input: columnTitle = &quot;A&quot; Output: 1 Example 2: Input: columnTitle = &quot;AB&quot; Output: 28 Example 3: Input: columnTitle = &quot;ZY&quot; Output: 701 &nbsp; Constraints: 1 &lt;= columnTitle.length &lt;= 7 columnTitle consists only of uppercase English letters. columnTitle is in the range [&quot;A&quot;, &quot;FXSHRXW&quot;]."
  },
  {
    "number": 172,
    "title": "Factorial Trailing Zeroes",
    "titleSlug": "factorial-trailing-zeroes",
    "difficulty": "Medium",
    "tags": [
      "Math"
    ],
    "description": "Given an integer n, return the number of trailing zeroes in n!. Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1. &nbsp; Example 1: Input: n = 3 Output: 0 Explanation: 3! = 6, no trailing zero. Example 2: Input: n = 5 Output: 1 Explanation: 5! = 120, one trailing zero. Example 3: Input: n = 0 Output: 0 &nbsp; Constraints: 0 &lt;= n &lt;= 104 &nbsp; Follow up: Could you write a solution that works in logarithmic time complexity?"
  },
  {
    "number": 173,
    "title": "Binary Search Tree Iterator",
    "titleSlug": "binary-search-tree-iterator",
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Tree",
      "Design",
      "Binary Search Tree",
      "Binary Tree",
      "Iterator"
    ],
    "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST): BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST. boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false. int next() Moves the pointer to the right, then returns the number at the pointer. Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST. You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called. &nbsp; Example 1: Input [&quot;BSTIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;] [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []] Output [null, 3, 7, true, 9, true, 15, true, 20, false] Explanation BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); bSTIterator.next(); // return 3 bSTIterator.next(); // return 7 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 9 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 15 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 20 bSTIterator.hasNext(); // return False &nbsp; Constraints: The number of nodes in the tree is in the range [1, 105]. 0 &lt;= Node.val &lt;= 106 At most 105 calls will be made to hasNext, and next. &nbsp; Follow up: Could you implement next() and hasNext() to run in average O(1) time and use&nbsp;O(h) memory, where h is the height of the tree?"
  },
  {
    "number": 174,
    "title": "Dungeon Game",
    "titleSlug": "dungeon-game",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess. The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately. Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight&#39;s health (represented by positive integers). To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. Return the knight&#39;s minimum initial health so that he can rescue the princess. Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned. &nbsp; Example 1: Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]] Output: 7 Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN. Example 2: Input: dungeon = [[0]] Output: 1 &nbsp; Constraints: m == dungeon.length n == dungeon[i].length 1 &lt;= m, n &lt;= 200 -1000 &lt;= dungeon[i][j] &lt;= 1000"
  },
  {
    "number": 175,
    "title": "Combine Two Tables",
    "titleSlug": "combine-two-tables",
    "difficulty": "Easy",
    "tags": [
      "Database"
    ],
    "description": "Table: Person +-------------+---------+ | Column Name | Type | +-------------+---------+ | personId | int | | lastName | varchar | | firstName | varchar | +-------------+---------+ personId is the primary key (column with unique values) for this table. This table contains information about the ID of some persons and their first and last names. &nbsp; Table: Address +-------------+---------+ | Column Name | Type | +-------------+---------+ | addressId | int | | personId | int | | city | varchar | | state | varchar | +-------------+---------+ addressId is the primary key (column with unique values) for this table. Each row of this table contains information about the city and state of one person with ID = PersonId. &nbsp; Write a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead. Return the result table in any order. The result format is in the following example. &nbsp; Example 1: Input: Person table: +----------+----------+-----------+ | personId | lastName | firstName | +----------+----------+-----------+ | 1 | Wang | Allen | | 2 | Alice | Bob | +----------+----------+-----------+ Address table: +-----------+----------+---------------+------------+ | addressId | personId | city | state | +-----------+----------+---------------+------------+ | 1 | 2 | New York City | New York | | 2 | 3 | Leetcode | California | +-----------+----------+---------------+------------+ Output: +-----------+----------+---------------+----------+ | firstName | lastName | city | state | +-----------+----------+---------------+----------+ | Allen | Wang | Null | Null | | Bob | Alice | New York City | New York | +-----------+----------+---------------+----------+ Explanation: There is no address in the address table for the personId = 1 so we return null in their city and state. addressId = 1 contains information about the address of personId = 2."
  },
  {
    "number": 176,
    "title": "Second Highest Salary",
    "titleSlug": "second-highest-salary",
    "difficulty": "Medium",
    "tags": [
      "Database"
    ],
    "description": "Table: Employee +-------------+------+ | Column Name | Type | +-------------+------+ | id | int | | salary | int | +-------------+------+ id is the primary key (column with unique values) for this table. Each row of this table contains information about the salary of an employee. &nbsp; Write a solution to find&nbsp;the second highest distinct salary from the Employee table. If there is no second highest salary,&nbsp;return&nbsp;null (return&nbsp;None in Pandas). The result format is in the following example. &nbsp; Example 1: Input: Employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+ Output: +---------------------+ | SecondHighestSalary | +---------------------+ | 200 | +---------------------+ Example 2: Input: Employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | +----+--------+ Output: +---------------------+ | SecondHighestSalary | +---------------------+ | null | +---------------------+"
  },
  {
    "number": 177,
    "title": "Nth Highest Salary",
    "titleSlug": "nth-highest-salary",
    "difficulty": "Medium",
    "tags": [
      "Database"
    ],
    "description": "Table: Employee +-------------+------+ | Column Name | Type | +-------------+------+ | id | int | | salary | int | +-------------+------+ id is the primary key (column with unique values) for this table. Each row of this table contains information about the salary of an employee. &nbsp; Write a solution to find the nth highest distinct salary from the Employee table. If there are less than n distinct salaries, return&nbsp;null. The result format is in the following example. &nbsp; Example 1: Input: Employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+ n = 2 Output: +------------------------+ | getNthHighestSalary(2) | +------------------------+ | 200 | +------------------------+ Example 2: Input: Employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | +----+--------+ n = 2 Output: +------------------------+ | getNthHighestSalary(2) | +------------------------+ | null | +------------------------+"
  },
  {
    "number": 178,
    "title": "Rank Scores",
    "titleSlug": "rank-scores",
    "difficulty": "Medium",
    "tags": [
      "Database"
    ],
    "description": "Table: Scores +-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | score | decimal | +-------------+---------+ id is the primary key (column with unique values) for this table. Each row of this table contains the score of a game. Score is a floating point value with two decimal places. &nbsp; Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules: The scores should be ranked from the highest to the lowest. If there is a tie between two scores, both should have the same ranking. After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks. Return the result table ordered by score in descending order. The result format is in the following example. &nbsp; Example 1: Input: Scores table: +----+-------+ | id | score | +----+-------+ | 1 | 3.50 | | 2 | 3.65 | | 3 | 4.00 | | 4 | 3.85 | | 5 | 4.00 | | 6 | 3.65 | +----+-------+ Output: +-------+------+ | score | rank | +-------+------+ | 4.00 | 1 | | 4.00 | 1 | | 3.85 | 2 | | 3.65 | 3 | | 3.65 | 3 | | 3.50 | 4 | +-------+------+"
  },
  {
    "number": 179,
    "title": "Largest Number",
    "titleSlug": "largest-number",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Greedy",
      "Sorting"
    ],
    "description": "Given a list of non-negative integers nums, arrange them such that they form the largest number and return it. Since the result may be very large, so you need to return a string instead of an integer. &nbsp; Example 1: Input: nums = [10,2] Output: &quot;210&quot; Example 2: Input: nums = [3,30,34,5,9] Output: &quot;9534330&quot; &nbsp; Constraints: 1 &lt;= nums.length &lt;= 100 0 &lt;= nums[i] &lt;= 109"
  },
  {
    "number": 180,
    "title": "Consecutive Numbers",
    "titleSlug": "consecutive-numbers",
    "difficulty": "Medium",
    "tags": [
      "Database"
    ],
    "description": "Table: Logs +-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | num | varchar | +-------------+---------+ In SQL, id is the primary key for this table. id is an autoincrement column starting from 1. &nbsp; Find all numbers that appear at least three times consecutively. Return the result table in any order. The&nbsp;result format is in the following example. &nbsp; Example 1: Input: Logs table: +----+-----+ | id | num | +----+-----+ | 1 | 1 | | 2 | 1 | | 3 | 1 | | 4 | 2 | | 5 | 1 | | 6 | 2 | | 7 | 2 | +----+-----+ Output: +-----------------+ | ConsecutiveNums | +-----------------+ | 1 | +-----------------+ Explanation: 1 is the only number that appears consecutively for at least three times."
  },
  {
    "number": 181,
    "title": "Employees Earning More Than Their Managers",
    "titleSlug": "employees-earning-more-than-their-managers",
    "difficulty": "Easy",
    "tags": [
      "Database"
    ],
    "description": "Table: Employee +-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | name | varchar | | salary | int | | managerId | int | +-------------+---------+ id is the primary key (column with unique values) for this table. Each row of this table indicates the ID of an employee, their name, salary, and the ID of their manager. &nbsp; Write a solution&nbsp;to find the employees who earn more than their managers. Return the result table in any order. The result format is in the following example. &nbsp; Example 1: Input: Employee table: +----+-------+--------+-----------+ | id | name | salary | managerId | +----+-------+--------+-----------+ | 1 | Joe | 70000 | 3 | | 2 | Henry | 80000 | 4 | | 3 | Sam | 60000 | Null | | 4 | Max | 90000 | Null | +----+-------+--------+-----------+ Output: +----------+ | Employee | +----------+ | Joe | +----------+ Explanation: Joe is the only employee who earns more than his manager."
  },
  {
    "number": 182,
    "title": "Duplicate Emails",
    "titleSlug": "duplicate-emails",
    "difficulty": "Easy",
    "tags": [
      "Database"
    ],
    "description": "Table: Person +-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | email | varchar | +-------------+---------+ id is the primary key (column with unique values) for this table. Each row of this table contains an email. The emails will not contain uppercase letters. &nbsp; Write a solution to report all the duplicate emails. Note that it&#39;s guaranteed that the email&nbsp;field is not NULL. Return the result table in any order. The&nbsp;result format is in the following example. &nbsp; Example 1: Input: Person table: +----+---------+ | id | email | +----+---------+ | 1 | a@b.com | | 2 | c@d.com | | 3 | a@b.com | +----+---------+ Output: +---------+ | Email | +---------+ | a@b.com | +---------+ Explanation: a@b.com is repeated two times."
  },
  {
    "number": 183,
    "title": "Customers Who Never Order",
    "titleSlug": "customers-who-never-order",
    "difficulty": "Easy",
    "tags": [
      "Database"
    ],
    "description": "Table: Customers +-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key (column with unique values) for this table. Each row of this table indicates the ID and name of a customer. &nbsp; Table: Orders +-------------+------+ | Column Name | Type | +-------------+------+ | id | int | | customerId | int | +-------------+------+ id is the primary key (column with unique values) for this table. customerId is a foreign key (reference columns) of the ID from the Customers table. Each row of this table indicates the ID of an order and the ID of the customer who ordered it. &nbsp; Write a solution to find all customers who never order anything. Return the result table in any order. The result format is in the following example. &nbsp; Example 1: Input: Customers table: +----+-------+ | id | name | +----+-------+ | 1 | Joe | | 2 | Henry | | 3 | Sam | | 4 | Max | +----+-------+ Orders table: +----+------------+ | id | customerId | +----+------------+ | 1 | 3 | | 2 | 1 | +----+------------+ Output: +-----------+ | Customers | +-----------+ | Henry | | Max | +-----------+"
  },
  {
    "number": 184,
    "title": "Department Highest Salary",
    "titleSlug": "department-highest-salary",
    "difficulty": "Medium",
    "tags": [
      "Database"
    ],
    "description": "Table: Employee +--------------+---------+ | Column Name | Type | +--------------+---------+ | id | int | | name | varchar | | salary | int | | departmentId | int | +--------------+---------+ id is the primary key (column with unique values) for this table. departmentId is a foreign key (reference columns) of the ID from the Department table. Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department. &nbsp; Table: Department +-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key (column with unique values) for this table. It is guaranteed that department name is not NULL. Each row of this table indicates the ID of a department and its name. &nbsp; Write a solution to find employees who have the highest salary in each of the departments. Return the result table in any order. The result format is in the following example. &nbsp; Example 1: Input: Employee table: +----+-------+--------+--------------+ | id | name | salary | departmentId | +----+-------+--------+--------------+ | 1 | Joe | 70000 | 1 | | 2 | Jim | 90000 | 1 | | 3 | Henry | 80000 | 2 | | 4 | Sam | 60000 | 2 | | 5 | Max | 90000 | 1 | +----+-------+--------+--------------+ Department table: +----+-------+ | id | name | +----+-------+ | 1 | IT | | 2 | Sales | +----+-------+ Output: +------------+----------+--------+ | Department | Employee | Salary | +------------+----------+--------+ | IT | Jim | 90000 | | Sales | Henry | 80000 | | IT | Max | 90000 | +------------+----------+--------+ Explanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department."
  },
  {
    "number": 185,
    "title": "Department Top Three Salaries",
    "titleSlug": "department-top-three-salaries",
    "difficulty": "Hard",
    "tags": [
      "Database"
    ],
    "description": "Table: Employee +--------------+---------+ | Column Name | Type | +--------------+---------+ | id | int | | name | varchar | | salary | int | | departmentId | int | +--------------+---------+ id is the primary key (column with unique values) for this table. departmentId is a foreign key (reference column) of the ID from the Department table. Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department. &nbsp; Table: Department +-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key (column with unique values) for this table. Each row of this table indicates the ID of a department and its name. &nbsp; A company&#39;s executives are interested in seeing who earns the most money in each of the company&#39;s departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department. Write a solution to find the employees who are high earners in each of the departments. Return the result table in any order. The&nbsp;result format is in the following example. &nbsp; Example 1: Input: Employee table: +----+-------+--------+--------------+ | id | name | salary | departmentId | +----+-------+--------+--------------+ | 1 | Joe | 85000 | 1 | | 2 | Henry | 80000 | 2 | | 3 | Sam | 60000 | 2 | | 4 | Max | 90000 | 1 | | 5 | Janet | 69000 | 1 | | 6 | Randy | 85000 | 1 | | 7 | Will | 70000 | 1 | +----+-------+--------+--------------+ Department table: +----+-------+ | id | name | +----+-------+ | 1 | IT | | 2 | Sales | +----+-------+ Output: +------------+----------+--------+ | Department | Employee | Salary | +------------+----------+--------+ | IT | Max | 90000 | | IT | Joe | 85000 | | IT | Randy | 85000 | | IT | Will | 70000 | | Sales | Henry | 80000 | | Sales | Sam | 60000 | +------------+----------+--------+ Explanation: In the IT department: - Max earns the highest unique salary - Both Randy and Joe earn the second-highest unique salary - Will earns the third-highest unique salary In the Sales department: - Henry earns the highest salary - Sam earns the second-highest salary - There is no third-highest salary as there are only two employees &nbsp; Constraints: There are no employees with the exact same name, salary and department."
  },
  {
    "number": 186,
    "title": "Reverse Words in a String II",
    "titleSlug": "reverse-words-in-a-string-ii",
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": ""
  },
  {
    "number": 187,
    "title": "Repeated DNA Sequences",
    "titleSlug": "repeated-dna-sequences",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "description": "The DNA sequence is composed of a series of nucleotides abbreviated as &#39;A&#39;, &#39;C&#39;, &#39;G&#39;, and &#39;T&#39;. For example, &quot;ACGAATTCCG&quot; is a DNA sequence. When studying DNA, it is useful to identify repeated sequences within the DNA. Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order. &nbsp; Example 1: Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" Output: [\"AAAAACCCCC\",\"CCCCCAAAAA\"] Example 2: Input: s = \"AAAAAAAAAAAAA\" Output: [\"AAAAAAAAAA\"] &nbsp; Constraints: 1 &lt;= s.length &lt;= 105 s[i] is either &#39;A&#39;, &#39;C&#39;, &#39;G&#39;, or &#39;T&#39;."
  },
  {
    "number": 188,
    "title": "Best Time to Buy and Sell Stock IV",
    "titleSlug": "best-time-to-buy-and-sell-stock-iv",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k. Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times. Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). &nbsp; Example 1: Input: k = 2, prices = [2,4,1] Output: 2 Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2. Example 2: Input: k = 2, prices = [3,2,6,5,0,3] Output: 7 Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. &nbsp; Constraints: 1 &lt;= k &lt;= 100 1 &lt;= prices.length &lt;= 1000 0 &lt;= prices[i] &lt;= 1000"
  },
  {
    "number": 189,
    "title": "Rotate Array",
    "titleSlug": "rotate-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Two Pointers"
    ],
    "description": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative. &nbsp; Example 1: Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] Example 2: Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -231 &lt;= nums[i] &lt;= 231 - 1 0 &lt;= k &lt;= 105 &nbsp; Follow up: Try to come up with as many solutions as you can. There are at least three different ways to solve this problem. Could you do it in-place with O(1) extra space?"
  },
  {
    "number": 190,
    "title": "Reverse Bits",
    "titleSlug": "reverse-bits",
    "difficulty": "Easy",
    "tags": [
      "Divide and Conquer",
      "Bit Manipulation"
    ],
    "description": "Reverse bits of a given 32 bits unsigned integer. Note: Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer&#39;s internal binary representation is the same, whether it is signed or unsigned. In Java, the compiler represents the signed integers using 2&#39;s complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825. &nbsp; Example 1: Input: n = 00000010100101000001111010011100 Output: 964176192 (00111001011110000010100101000000) Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000. Example 2: Input: n = 11111111111111111111111111111101 Output: 3221225471 (10111111111111111111111111111111) Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111. &nbsp; Constraints: The input must be a binary string of length 32 &nbsp; Follow up: If this function is called many times, how would you optimize it?"
  },
  {
    "number": 191,
    "title": "Number of 1 Bits",
    "titleSlug": "number-of-1-bits",
    "difficulty": "Easy",
    "tags": [
      "Divide and Conquer",
      "Bit Manipulation"
    ],
    "description": "Given a positive integer n, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight). &nbsp; Example 1: Input: n = 11 Output: 3 Explanation: The input binary string 1011 has a total of three set bits. Example 2: Input: n = 128 Output: 1 Explanation: The input binary string 10000000 has a total of one set bit. Example 3: Input: n = 2147483645 Output: 30 Explanation: The input binary string 1111111111111111111111111111101 has a total of thirty set bits. &nbsp; Constraints: 1 &lt;= n &lt;= 231 - 1 &nbsp; Follow up: If this function is called many times, how would you optimize it?"
  },
  {
    "number": 192,
    "title": "Word Frequency",
    "titleSlug": "word-frequency",
    "difficulty": "Medium",
    "tags": [
      "Shell"
    ],
    "description": "Write a bash script to calculate the frequency of each word in a text file words.txt. For simplicity sake, you may assume: words.txt contains only lowercase characters and space &#39; &#39; characters. Each word must consist of lowercase characters only. Words are separated by one or more whitespace characters. Example: Assume that words.txt has the following content: the day is sunny the the the sunny is is Your script should output the following, sorted by descending frequency: the 4 is 3 sunny 2 day 1 Note: Don&#39;t worry about handling ties, it is guaranteed that each word&#39;s frequency count is unique. Could you write it in one-line using Unix pipes?"
  },
  {
    "number": 193,
    "title": "Valid Phone Numbers",
    "titleSlug": "valid-phone-numbers",
    "difficulty": "Easy",
    "tags": [
      "Shell"
    ],
    "description": "Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers. You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit) You may also assume each line in the text file must not contain leading or trailing white spaces. Example: Assume that file.txt has the following content: 987-123-4567 123 456 7890 (123) 456-7890 Your script should output the following valid phone numbers: 987-123-4567 (123) 456-7890"
  },
  {
    "number": 194,
    "title": "Transpose File",
    "titleSlug": "transpose-file",
    "difficulty": "Medium",
    "tags": [
      "Shell"
    ],
    "description": "Given a text file file.txt, transpose its content. You may assume that each row has the same number of columns, and each field is separated by the &#39; &#39; character. Example: If file.txt has the following content: name age alice 21 ryan 30 Output the following: name alice ryan age 21 30"
  },
  {
    "number": 195,
    "title": "Tenth Line",
    "titleSlug": "tenth-line",
    "difficulty": "Easy",
    "tags": [
      "Shell"
    ],
    "description": "Given a text file&nbsp;file.txt, print&nbsp;just the 10th line of the&nbsp;file. Example: Assume that file.txt has the following content: Line 1 Line 2 Line 3 Line 4 Line 5 Line 6 Line 7 Line 8 Line 9 Line 10 Your script should output the tenth line, which is: Line 10 Note: 1. If the file contains less than 10 lines, what should you output? 2. There&#39;s at least three different solutions. Try to explore all possibilities."
  },
  {
    "number": 196,
    "title": "Delete Duplicate Emails",
    "titleSlug": "delete-duplicate-emails",
    "difficulty": "Easy",
    "tags": [
      "Database"
    ],
    "description": "Table: Person +-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | email | varchar | +-------------+---------+ id is the primary key (column with unique values) for this table. Each row of this table contains an email. The emails will not contain uppercase letters. &nbsp; Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id. For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one. For Pandas users, please note that you are supposed to modify Person in place. After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter. The result format is in the following example. &nbsp; Example 1: Input: Person table: +----+------------------+ | id | email | +----+------------------+ | 1 | john@example.com | | 2 | bob@example.com | | 3 | john@example.com | +----+------------------+ Output: +----+------------------+ | id | email | +----+------------------+ | 1 | john@example.com | | 2 | bob@example.com | +----+------------------+ Explanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1."
  },
  {
    "number": 197,
    "title": "Rising Temperature",
    "titleSlug": "rising-temperature",
    "difficulty": "Easy",
    "tags": [
      "Database"
    ],
    "description": "Table: Weather +---------------+---------+ | Column Name | Type | +---------------+---------+ | id | int | | recordDate | date | | temperature | int | +---------------+---------+ id is the column with unique values for this table. There are no different rows with the same recordDate. This table contains information about the temperature on a certain day. &nbsp; Write a solution to find all dates&#39; id with higher temperatures compared to its previous dates (yesterday). Return the result table in any order. The result format is in the following example. &nbsp; Example 1: Input: Weather table: +----+------------+-------------+ | id | recordDate | temperature | +----+------------+-------------+ | 1 | 2015-01-01 | 10 | | 2 | 2015-01-02 | 25 | | 3 | 2015-01-03 | 20 | | 4 | 2015-01-04 | 30 | +----+------------+-------------+ Output: +----+ | id | +----+ | 2 | | 4 | +----+ Explanation: In 2015-01-02, the temperature was higher than the previous day (10 -&gt; 25). In 2015-01-04, the temperature was higher than the previous day (20 -&gt; 30)."
  },
  {
    "number": 198,
    "title": "House Robber",
    "titleSlug": "house-robber",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police. &nbsp; Example 1: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2: Input: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 100 0 &lt;= nums[i] &lt;= 400"
  },
  {
    "number": 199,
    "title": "Binary Tree Right Side View",
    "titleSlug": "binary-tree-right-side-view",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom. &nbsp; Example 1: Input: root = [1,2,3,null,5,null,4] Output: [1,3,4] Explanation: Example 2: Input: root = [1,2,3,4,null,null,null,5] Output: [1,3,4,5] Explanation: Example 3: Input: root = [1,null,3] Output: [1,3] Example 4: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 100]. -100 &lt;= Node.val &lt;= 100"
  },
  {
    "number": 200,
    "title": "Number of Islands",
    "titleSlug": "number-of-islands",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "Given an m x n 2D binary grid grid which represents a map of &#39;1&#39;s (land) and &#39;0&#39;s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. &nbsp; Example 1: Input: grid = [ [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;], [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;], [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;], [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;] ] Output: 1 Example 2: Input: grid = [ [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;], [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;], [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;], [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;] ] Output: 3 &nbsp; Constraints: m == grid.length n == grid[i].length 1 &lt;= m, n &lt;= 300 grid[i][j] is &#39;0&#39; or &#39;1&#39;."
  },
  {
    "number": 201,
    "title": "Bitwise AND of Numbers Range",
    "titleSlug": "bitwise-and-of-numbers-range",
    "difficulty": "Medium",
    "tags": [
      "Bit Manipulation"
    ],
    "description": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive. &nbsp; Example 1: Input: left = 5, right = 7 Output: 4 Example 2: Input: left = 0, right = 0 Output: 0 Example 3: Input: left = 1, right = 2147483647 Output: 0 &nbsp; Constraints: 0 &lt;= left &lt;= right &lt;= 231 - 1"
  },
  {
    "number": 202,
    "title": "Happy Number",
    "titleSlug": "happy-number",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Math",
      "Two Pointers"
    ],
    "description": "Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return true if n is a happy number, and false if not. &nbsp; Example 1: Input: n = 19 Output: true Explanation: 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 Example 2: Input: n = 2 Output: false &nbsp; Constraints: 1 &lt;= n &lt;= 231 - 1"
  },
  {
    "number": 203,
    "title": "Remove Linked List Elements",
    "titleSlug": "remove-linked-list-elements",
    "difficulty": "Easy",
    "tags": [
      "Linked List",
      "Recursion"
    ],
    "description": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head. &nbsp; Example 1: Input: head = [1,2,6,3,4,5,6], val = 6 Output: [1,2,3,4,5] Example 2: Input: head = [], val = 1 Output: [] Example 3: Input: head = [7,7,7,7], val = 7 Output: [] &nbsp; Constraints: The number of nodes in the list is in the range [0, 104]. 1 &lt;= Node.val &lt;= 50 0 &lt;= val &lt;= 50"
  },
  {
    "number": 204,
    "title": "Count Primes",
    "titleSlug": "count-primes",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Enumeration",
      "Number Theory"
    ],
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n. &nbsp; Example 1: Input: n = 10 Output: 4 Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7. Example 2: Input: n = 0 Output: 0 Example 3: Input: n = 1 Output: 0 &nbsp; Constraints: 0 &lt;= n &lt;= 5 * 106"
  },
  {
    "number": 205,
    "title": "Isomorphic Strings",
    "titleSlug": "isomorphic-strings",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String"
    ],
    "description": "Given two strings s and t, determine if they are isomorphic. Two strings s and t are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. &nbsp; Example 1: Input: s = &quot;egg&quot;, t = &quot;add&quot; Output: true Explanation: The strings s and t can be made identical by: Mapping &#39;e&#39; to &#39;a&#39;. Mapping &#39;g&#39; to &#39;d&#39;. Example 2: Input: s = &quot;foo&quot;, t = &quot;bar&quot; Output: false Explanation: The strings s and t can not be made identical as &#39;o&#39; needs to be mapped to both &#39;a&#39; and &#39;r&#39;. Example 3: Input: s = &quot;paper&quot;, t = &quot;title&quot; Output: true &nbsp; Constraints: 1 &lt;= s.length &lt;= 5 * 104 t.length == s.length s and t consist of any valid ascii character."
  },
  {
    "number": 206,
    "title": "Reverse Linked List",
    "titleSlug": "reverse-linked-list",
    "difficulty": "Easy",
    "tags": [
      "Linked List",
      "Recursion"
    ],
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list. &nbsp; Example 1: Input: head = [1,2,3,4,5] Output: [5,4,3,2,1] Example 2: Input: head = [1,2] Output: [2,1] Example 3: Input: head = [] Output: [] &nbsp; Constraints: The number of nodes in the list is the range [0, 5000]. -5000 &lt;= Node.val &lt;= 5000 &nbsp; Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?"
  },
  {
    "number": 207,
    "title": "Course Schedule",
    "titleSlug": "course-schedule",
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. Return true if you can finish all courses. Otherwise, return false. &nbsp; Example 1: Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. Example 2: Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. &nbsp; Constraints: 1 &lt;= numCourses &lt;= 2000 0 &lt;= prerequisites.length &lt;= 5000 prerequisites[i].length == 2 0 &lt;= ai, bi &lt; numCourses All the pairs prerequisites[i] are unique."
  },
  {
    "number": 208,
    "title": "Implement Trie (Prefix Tree)",
    "titleSlug": "implement-trie-prefix-tree",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Design",
      "Trie"
    ],
    "description": "A trie (pronounced as &quot;try&quot;) or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker. Implement the Trie class: Trie() Initializes the trie object. void insert(String word) Inserts the string word into the trie. boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise. boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise. &nbsp; Example 1: Input [&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;] [[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]] Output [null, null, true, false, true, null, true] Explanation Trie trie = new Trie(); trie.insert(&quot;apple&quot;); trie.search(&quot;apple&quot;); // return True trie.search(&quot;app&quot;); // return False trie.startsWith(&quot;app&quot;); // return True trie.insert(&quot;app&quot;); trie.search(&quot;app&quot;); // return True &nbsp; Constraints: 1 &lt;= word.length, prefix.length &lt;= 2000 word and prefix consist only of lowercase English letters. At most 3 * 104 calls in total will be made to insert, search, and startsWith."
  },
  {
    "number": 209,
    "title": "Minimum Size Subarray Sum",
    "titleSlug": "minimum-size-subarray-sum",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead. &nbsp; Example 1: Input: target = 7, nums = [2,3,1,2,4,3] Output: 2 Explanation: The subarray [4,3] has the minimal length under the problem constraint. Example 2: Input: target = 4, nums = [1,4,4] Output: 1 Example 3: Input: target = 11, nums = [1,1,1,1,1,1,1,1] Output: 0 &nbsp; Constraints: 1 &lt;= target &lt;= 109 1 &lt;= nums.length &lt;= 105 1 &lt;= nums[i] &lt;= 104 &nbsp; Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n))."
  },
  {
    "number": 210,
    "title": "Course Schedule II",
    "titleSlug": "course-schedule-ii",
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1. Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array. &nbsp; Example 1: Input: numCourses = 2, prerequisites = [[1,0]] Output: [0,1] Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]. Example 2: Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] Output: [0,2,1,3] Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3]. Example 3: Input: numCourses = 1, prerequisites = [] Output: [0] &nbsp; Constraints: 1 &lt;= numCourses &lt;= 2000 0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1) prerequisites[i].length == 2 0 &lt;= ai, bi &lt; numCourses ai != bi All the pairs [ai, bi] are distinct."
  },
  {
    "number": 211,
    "title": "Design Add and Search Words Data Structure",
    "titleSlug": "design-add-and-search-words-data-structure",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Depth-First Search",
      "Design",
      "Trie"
    ],
    "description": "Design a data structure that supports adding new words and finding if a string matches any previously added string. Implement the WordDictionary class: WordDictionary()&nbsp;Initializes the object. void addWord(word) Adds word to the data structure, it can be matched later. bool search(word)&nbsp;Returns true if there is any string in the data structure that matches word&nbsp;or false otherwise. word may contain dots &#39;.&#39; where dots can be matched with any letter. &nbsp; Example: Input [&quot;WordDictionary&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;] [[],[&quot;bad&quot;],[&quot;dad&quot;],[&quot;mad&quot;],[&quot;pad&quot;],[&quot;bad&quot;],[&quot;.ad&quot;],[&quot;b..&quot;]] Output [null,null,null,null,false,true,true,true] Explanation WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(&quot;bad&quot;); wordDictionary.addWord(&quot;dad&quot;); wordDictionary.addWord(&quot;mad&quot;); wordDictionary.search(&quot;pad&quot;); // return False wordDictionary.search(&quot;bad&quot;); // return True wordDictionary.search(&quot;.ad&quot;); // return True wordDictionary.search(&quot;b..&quot;); // return True &nbsp; Constraints: 1 &lt;= word.length &lt;= 25 word in addWord consists of lowercase English letters. word in search consist of &#39;.&#39; or lowercase English letters. There will be at most 2 dots in word for search queries. At most 104 calls will be made to addWord and search."
  },
  {
    "number": 212,
    "title": "Word Search II",
    "titleSlug": "word-search-ii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Backtracking",
      "Trie",
      "Matrix"
    ],
    "description": "Given an m x n board&nbsp;of characters and a list of strings words, return all words on the board. Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. &nbsp; Example 1: Input: board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;] Output: [&quot;eat&quot;,&quot;oath&quot;] Example 2: Input: board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;] Output: [] &nbsp; Constraints: m == board.length n == board[i].length 1 &lt;= m, n &lt;= 12 board[i][j] is a lowercase English letter. 1 &lt;= words.length &lt;= 3 * 104 1 &lt;= words[i].length &lt;= 10 words[i] consists of lowercase English letters. All the strings of words are unique."
  },
  {
    "number": 213,
    "title": "House Robber II",
    "titleSlug": "house-robber-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and&nbsp;it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police. &nbsp; Example 1: Input: nums = [2,3,2] Output: 3 Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. Example 2: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 3: Input: nums = [1,2,3] Output: 3 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 100 0 &lt;= nums[i] &lt;= 1000"
  },
  {
    "number": 214,
    "title": "Shortest Palindrome",
    "titleSlug": "shortest-palindrome",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a string s. You can convert s to a palindrome by adding characters in front of it. Return the shortest palindrome you can find by performing this transformation. &nbsp; Example 1: Input: s = \"aacecaaa\" Output: \"aaacecaaa\" Example 2: Input: s = \"abcd\" Output: \"dcbabcd\" &nbsp; Constraints: 0 &lt;= s.length &lt;= 5 * 104 s consists of lowercase English letters only."
  },
  {
    "number": 215,
    "title": "Kth Largest Element in an Array",
    "titleSlug": "kth-largest-element-in-an-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "description": "Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. Can you solve it without sorting? &nbsp; Example 1: Input: nums = [3,2,1,5,6,4], k = 2 Output: 5 Example 2: Input: nums = [3,2,3,1,2,4,5,5,6], k = 4 Output: 4 &nbsp; Constraints: 1 &lt;= k &lt;= nums.length &lt;= 105 -104 &lt;= nums[i] &lt;= 104"
  },
  {
    "number": 216,
    "title": "Combination Sum III",
    "titleSlug": "combination-sum-iii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Backtracking"
    ],
    "description": "Find all valid combinations of k numbers that sum up to n such that the following conditions are true: Only numbers 1 through 9 are used. Each number is used at most once. Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order. &nbsp; Example 1: Input: k = 3, n = 7 Output: [[1,2,4]] Explanation: 1 + 2 + 4 = 7 There are no other valid combinations. Example 2: Input: k = 3, n = 9 Output: [[1,2,6],[1,3,5],[2,3,4]] Explanation: 1 + 2 + 6 = 9 1 + 3 + 5 = 9 2 + 3 + 4 = 9 There are no other valid combinations. Example 3: Input: k = 4, n = 1 Output: [] Explanation: There are no valid combinations. Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination. &nbsp; Constraints: 2 &lt;= k &lt;= 9 1 &lt;= n &lt;= 60"
  },
  {
    "number": 217,
    "title": "Contains Duplicate",
    "titleSlug": "contains-duplicate",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct. &nbsp; Example 1: Input: nums = [1,2,3,1] Output: true Explanation: The element 1 occurs at the indices 0 and 3. Example 2: Input: nums = [1,2,3,4] Output: false Explanation: All elements are distinct. Example 3: Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -109 &lt;= nums[i] &lt;= 109"
  },
  {
    "number": 218,
    "title": "The Skyline Problem",
    "titleSlug": "the-skyline-problem",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "A city&#39;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively. The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]: lefti is the x coordinate of the left edge of the ith building. righti is the x coordinate of the right edge of the ith building. heighti is the height of the ith building. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0. The skyline should be represented as a list of &quot;key points&quot; sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour. Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...] &nbsp; Example 1: Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]] Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]] Explanation: Figure A shows the buildings of the input. Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list. Example 2: Input: buildings = [[0,2,3],[2,5,3]] Output: [[0,3],[5,0]] &nbsp; Constraints: 1 &lt;= buildings.length &lt;= 104 0 &lt;= lefti &lt; righti &lt;= 231 - 1 1 &lt;= heighti &lt;= 231 - 1 buildings is sorted by lefti in&nbsp;non-decreasing order."
  },
  {
    "number": 219,
    "title": "Contains Duplicate II",
    "titleSlug": "contains-duplicate-ii",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) &lt;= k. &nbsp; Example 1: Input: nums = [1,2,3,1], k = 3 Output: true Example 2: Input: nums = [1,0,1,1], k = 1 Output: true Example 3: Input: nums = [1,2,3,1,2,3], k = 2 Output: false &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -109 &lt;= nums[i] &lt;= 109 0 &lt;= k &lt;= 105"
  },
  {
    "number": 220,
    "title": "Contains Duplicate III",
    "titleSlug": "contains-duplicate-iii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Sliding Window",
      "Sorting",
      "Bucket Sort",
      "Ordered Set"
    ],
    "description": "You are given an integer array nums and two integers indexDiff and valueDiff. Find a pair of indices (i, j) such that: i != j, abs(i - j) &lt;= indexDiff. abs(nums[i] - nums[j]) &lt;= valueDiff, and Return true if such pair exists or false otherwise. &nbsp; Example 1: Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0 Output: true Explanation: We can choose (i, j) = (0, 3). We satisfy the three conditions: i != j --&gt; 0 != 3 abs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3 abs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0 Example 2: Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3 Output: false Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false. &nbsp; Constraints: 2 &lt;= nums.length &lt;= 105 -109 &lt;= nums[i] &lt;= 109 1 &lt;= indexDiff &lt;= nums.length 0 &lt;= valueDiff &lt;= 109"
  },
  {
    "number": 221,
    "title": "Maximal Square",
    "titleSlug": "maximal-square",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "Given an m x n binary matrix filled with 0&#39;s and 1&#39;s, find the largest square containing only 1&#39;s and return its area. &nbsp; Example 1: Input: matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]] Output: 4 Example 2: Input: matrix = [[&quot;0&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;]] Output: 1 Example 3: Input: matrix = [[&quot;0&quot;]] Output: 0 &nbsp; Constraints: m == matrix.length n == matrix[i].length 1 &lt;= m, n &lt;= 300 matrix[i][j] is &#39;0&#39; or &#39;1&#39;."
  },
  {
    "number": 222,
    "title": "Count Complete Tree Nodes",
    "titleSlug": "count-complete-tree-nodes",
    "difficulty": "Easy",
    "tags": [
      "Binary Search",
      "Bit Manipulation",
      "Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a complete binary tree, return the number of the nodes in the tree. According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h. Design an algorithm that runs in less than&nbsp;O(n)&nbsp;time complexity. &nbsp; Example 1: Input: root = [1,2,3,4,5,6] Output: 6 Example 2: Input: root = [] Output: 0 Example 3: Input: root = [1] Output: 1 &nbsp; Constraints: The number of nodes in the tree is in the range [0, 5 * 104]. 0 &lt;= Node.val &lt;= 5 * 104 The tree is guaranteed to be complete."
  },
  {
    "number": 223,
    "title": "Rectangle Area",
    "titleSlug": "rectangle-area",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Geometry"
    ],
    "description": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles. The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2). The second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2). &nbsp; Example 1: Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2 Output: 45 Example 2: Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2 Output: 16 &nbsp; Constraints: -104 &lt;= ax1 &lt;= ax2 &lt;= 104 -104 &lt;= ay1 &lt;= ay2 &lt;= 104 -104 &lt;= bx1 &lt;= bx2 &lt;= 104 -104 &lt;= by1 &lt;= by2 &lt;= 104"
  },
  {
    "number": 224,
    "title": "Basic Calculator",
    "titleSlug": "basic-calculator",
    "difficulty": "Hard",
    "tags": [
      "Math",
      "String",
      "Stack",
      "Recursion"
    ],
    "description": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation. Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval(). &nbsp; Example 1: Input: s = &quot;1 + 1&quot; Output: 2 Example 2: Input: s = &quot; 2-1 + 2 &quot; Output: 3 Example 3: Input: s = &quot;(1+(4+5+2)-3)+(6+8)&quot; Output: 23 &nbsp; Constraints: 1 &lt;= s.length &lt;= 3 * 105 s consists of digits, &#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, and &#39; &#39;. s represents a valid expression. &#39;+&#39; is not used as a unary operation (i.e., &quot;+1&quot; and &quot;+(2 + 3)&quot; is invalid). &#39;-&#39; could be used as a unary operation (i.e., &quot;-1&quot; and &quot;-(2 + 3)&quot; is valid). There will be no two consecutive operators in the input. Every number and running calculation will fit in a signed 32-bit integer."
  },
  {
    "number": 225,
    "title": "Implement Stack using Queues",
    "titleSlug": "implement-stack-using-queues",
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Design",
      "Queue"
    ],
    "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty). Implement the MyStack class: void push(int x) Pushes element x to the top of the stack. int pop() Removes the element on the top of the stack and returns it. int top() Returns the element on the top of the stack. boolean empty() Returns true if the stack is empty, false otherwise. Notes: You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid. Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue&#39;s standard operations. &nbsp; Example 1: Input [&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;] [[], [1], [2], [], [], []] Output [null, null, null, 2, 2, false] Explanation MyStack myStack = new MyStack(); myStack.push(1); myStack.push(2); myStack.top(); // return 2 myStack.pop(); // return 2 myStack.empty(); // return False &nbsp; Constraints: 1 &lt;= x &lt;= 9 At most 100 calls will be made to push, pop, top, and empty. All the calls to pop and top are valid. &nbsp; Follow-up: Can you implement the stack using only one queue?"
  },
  {
    "number": 226,
    "title": "Invert Binary Tree",
    "titleSlug": "invert-binary-tree",
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, invert the tree, and return its root. &nbsp; Example 1: Input: root = [4,2,7,1,3,6,9] Output: [4,7,2,9,6,3,1] Example 2: Input: root = [2,1,3] Output: [2,3,1] Example 3: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 100]. -100 &lt;= Node.val &lt;= 100"
  },
  {
    "number": 227,
    "title": "Basic Calculator II",
    "titleSlug": "basic-calculator-ii",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "String",
      "Stack"
    ],
    "description": "Given a string s which represents an expression, evaluate this expression and return its value.&nbsp; The integer division should truncate toward zero. You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1]. Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval(). &nbsp; Example 1: Input: s = \"3+2*2\" Output: 7 Example 2: Input: s = \" 3/2 \" Output: 1 Example 3: Input: s = \" 3+5 / 2 \" Output: 5 &nbsp; Constraints: 1 &lt;= s.length &lt;= 3 * 105 s consists of integers and operators (&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;) separated by some number of spaces. s represents a valid expression. All the integers in the expression are non-negative integers in the range [0, 231 - 1]. The answer is guaranteed to fit in a 32-bit integer."
  },
  {
    "number": 228,
    "title": "Summary Ranges",
    "titleSlug": "summary-ranges",
    "difficulty": "Easy",
    "tags": [
      "Array"
    ],
    "description": "You are given a sorted unique integer array nums. A range [a,b] is the set of all integers from a to b (inclusive). Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums. Each range [a,b] in the list should be output as: &quot;a-&gt;b&quot; if a != b &quot;a&quot; if a == b &nbsp; Example 1: Input: nums = [0,1,2,4,5,7] Output: [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;] Explanation: The ranges are: [0,2] --&gt; &quot;0-&gt;2&quot; [4,5] --&gt; &quot;4-&gt;5&quot; [7,7] --&gt; &quot;7&quot; Example 2: Input: nums = [0,2,3,4,6,8,9] Output: [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;] Explanation: The ranges are: [0,0] --&gt; &quot;0&quot; [2,4] --&gt; &quot;2-&gt;4&quot; [6,6] --&gt; &quot;6&quot; [8,9] --&gt; &quot;8-&gt;9&quot; &nbsp; Constraints: 0 &lt;= nums.length &lt;= 20 -231 &lt;= nums[i] &lt;= 231 - 1 All the values of nums are unique. nums is sorted in ascending order."
  },
  {
    "number": 229,
    "title": "Majority Element II",
    "titleSlug": "majority-element-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting"
    ],
    "description": "Given an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times. &nbsp; Example 1: Input: nums = [3,2,3] Output: [3] Example 2: Input: nums = [1] Output: [1] Example 3: Input: nums = [1,2] Output: [1,2] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 5 * 104 -109 &lt;= nums[i] &lt;= 109 &nbsp; Follow up: Could you solve the problem in linear time and in O(1) space?"
  },
  {
    "number": 230,
    "title": "Kth Smallest Element in a BST",
    "titleSlug": "kth-smallest-element-in-a-bst",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree. &nbsp; Example 1: Input: root = [3,1,4,null,2], k = 1 Output: 1 Example 2: Input: root = [5,3,6,2,4,null,null,1], k = 3 Output: 3 &nbsp; Constraints: The number of nodes in the tree is n. 1 &lt;= k &lt;= n &lt;= 104 0 &lt;= Node.val &lt;= 104 &nbsp; Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?"
  },
  {
    "number": 231,
    "title": "Power of Two",
    "titleSlug": "power-of-two",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Bit Manipulation",
      "Recursion"
    ],
    "description": "Given an integer n, return true if it is a power of two. Otherwise, return false. An integer n is a power of two, if there exists an integer x such that n == 2x. &nbsp; Example 1: Input: n = 1 Output: true Explanation: 20 = 1 Example 2: Input: n = 16 Output: true Explanation: 24 = 16 Example 3: Input: n = 3 Output: false &nbsp; Constraints: -231 &lt;= n &lt;= 231 - 1 &nbsp; Follow up: Could you solve it without loops/recursion?"
  },
  {
    "number": 232,
    "title": "Implement Queue using Stacks",
    "titleSlug": "implement-queue-using-stacks",
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Design",
      "Queue"
    ],
    "description": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty). Implement the MyQueue class: void push(int x) Pushes element x to the back of the queue. int pop() Removes the element from the front of the queue and returns it. int peek() Returns the element at the front of the queue. boolean empty() Returns true if the queue is empty, false otherwise. Notes: You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid. Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack&#39;s standard operations. &nbsp; Example 1: Input [&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;] [[], [1], [2], [], [], []] Output [null, null, null, 1, 1, false] Explanation MyQueue myQueue = new MyQueue(); myQueue.push(1); // queue is: [1] myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue) myQueue.peek(); // return 1 myQueue.pop(); // return 1, queue is [2] myQueue.empty(); // return false &nbsp; Constraints: 1 &lt;= x &lt;= 9 At most 100&nbsp;calls will be made to push, pop, peek, and empty. All the calls to pop and peek are valid. &nbsp; Follow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer."
  },
  {
    "number": 233,
    "title": "Number of Digit One",
    "titleSlug": "number-of-digit-one",
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Recursion"
    ],
    "description": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n. &nbsp; Example 1: Input: n = 13 Output: 6 Example 2: Input: n = 0 Output: 0 &nbsp; Constraints: 0 &lt;= n &lt;= 109"
  },
  {
    "number": 234,
    "title": "Palindrome Linked List",
    "titleSlug": "palindrome-linked-list",
    "difficulty": "Easy",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Stack",
      "Recursion"
    ],
    "description": "Given the head of a singly linked list, return true if it is a palindrome or false otherwise. &nbsp; Example 1: Input: head = [1,2,2,1] Output: true Example 2: Input: head = [1,2] Output: false &nbsp; Constraints: The number of nodes in the list is in the range [1, 105]. 0 &lt;= Node.val &lt;= 9 &nbsp; Follow up: Could you do it in O(n) time and O(1) space?"
  },
  {
    "number": 235,
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST. According to the definition of LCA on Wikipedia: &ldquo;The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).&rdquo; &nbsp; Example 1: Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 Output: 6 Explanation: The LCA of nodes 2 and 8 is 6. Example 2: Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 Output: 2 Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. Example 3: Input: root = [2,1], p = 2, q = 1 Output: 2 &nbsp; Constraints: The number of nodes in the tree is in the range [2, 105]. -109 &lt;= Node.val &lt;= 109 All Node.val are unique. p != q p and q will exist in the BST."
  },
  {
    "number": 236,
    "title": "Lowest Common Ancestor of a Binary Tree",
    "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on Wikipedia: &ldquo;The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).&rdquo; &nbsp; Example 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 Output: 3 Explanation: The LCA of nodes 5 and 1 is 3. Example 2: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 Output: 5 Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition. Example 3: Input: root = [1,2], p = 1, q = 2 Output: 1 &nbsp; Constraints: The number of nodes in the tree is in the range [2, 105]. -109 &lt;= Node.val &lt;= 109 All Node.val are unique. p != q p and q will exist in the tree."
  },
  {
    "number": 237,
    "title": "Delete Node in a Linked List",
    "titleSlug": "delete-node-in-a-linked-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List"
    ],
    "description": "There is a singly-linked list head and we want to delete a node node in it. You are given the node to be deleted node. You will not be given access to the first node of head. All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list. Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean: The value of the given node should not exist in the linked list. The number of nodes in the linked list should decrease by one. All the values before node should be in the same order. All the values after node should be in the same order. Custom testing: For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list. We will build the linked list and pass the node to your function. The output will be the entire list after calling your function. &nbsp; Example 1: Input: head = [4,5,1,9], node = 5 Output: [4,1,9] Explanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function. Example 2: Input: head = [4,5,1,9], node = 1 Output: [4,5,9] Explanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function. &nbsp; Constraints: The number of the nodes in the given list is in the range [2, 1000]. -1000 &lt;= Node.val &lt;= 1000 The value of each node in the list is unique. The node to be deleted is in the list and is not a tail node."
  },
  {
    "number": 238,
    "title": "Product of Array Except Self",
    "titleSlug": "product-of-array-except-self",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in&nbsp;O(n)&nbsp;time and without using the division operation. &nbsp; Example 1: Input: nums = [1,2,3,4] Output: [24,12,8,6] Example 2: Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0] &nbsp; Constraints: 2 &lt;= nums.length &lt;= 105 -30 &lt;= nums[i] &lt;= 30 The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer. &nbsp; Follow up:&nbsp;Can you solve the problem in O(1)&nbsp;extra&nbsp;space complexity? (The output array does not count as extra space for space complexity analysis.)"
  },
  {
    "number": 239,
    "title": "Sliding Window Maximum",
    "titleSlug": "sliding-window-maximum",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "description": "You are given an array of integers&nbsp;nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window. &nbsp; Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3,3,5,5,6,7] Explanation: Window position Max --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 Example 2: Input: nums = [1], k = 1 Output: [1] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -104 &lt;= nums[i] &lt;= 104 1 &lt;= k &lt;= nums.length"
  },
  {
    "number": 240,
    "title": "Search a 2D Matrix II",
    "titleSlug": "search-a-2d-matrix-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Matrix"
    ],
    "description": "Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties: Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom. &nbsp; Example 1: Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5 Output: true Example 2: Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20 Output: false &nbsp; Constraints: m == matrix.length n == matrix[i].length 1 &lt;= n, m &lt;= 300 -109 &lt;= matrix[i][j] &lt;= 109 All the integers in each row are sorted in ascending order. All the integers in each column are sorted in ascending order. -109 &lt;= target &lt;= 109"
  },
  {
    "number": 241,
    "title": "Different Ways to Add Parentheses",
    "titleSlug": "different-ways-to-add-parentheses",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "Recursion",
      "Memoization"
    ],
    "description": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order. The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104. &nbsp; Example 1: Input: expression = &quot;2-1-1&quot; Output: [0,2] Explanation: ((2-1)-1) = 0 (2-(1-1)) = 2 Example 2: Input: expression = &quot;2*3-4*5&quot; Output: [-34,-14,-10,-10,10] Explanation: (2*(3-(4*5))) = -34 ((2*3)-(4*5)) = -14 ((2*(3-4))*5) = -10 (2*((3-4)*5)) = -10 (((2*3)-4)*5) = 10 &nbsp; Constraints: 1 &lt;= expression.length &lt;= 20 expression consists of digits and the operator &#39;+&#39;, &#39;-&#39;, and &#39;*&#39;. All the integer values in the input expression are in the range [0, 99]. The integer values in the input expression do not have a leading &#39;-&#39; or &#39;+&#39; denoting the sign."
  },
  {
    "number": 242,
    "title": "Valid Anagram",
    "titleSlug": "valid-anagram",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. &nbsp; Example 1: Input: s = &quot;anagram&quot;, t = &quot;nagaram&quot; Output: true Example 2: Input: s = &quot;rat&quot;, t = &quot;car&quot; Output: false &nbsp; Constraints: 1 &lt;= s.length, t.length &lt;= 5 * 104 s and t consist of lowercase English letters. &nbsp; Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"
  },
  {
    "number": 243,
    "title": "Shortest Word Distance",
    "titleSlug": "shortest-word-distance",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "String"
    ],
    "description": ""
  },
  {
    "number": 244,
    "title": "Shortest Word Distance II",
    "titleSlug": "shortest-word-distance-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Design"
    ],
    "description": ""
  },
  {
    "number": 245,
    "title": "Shortest Word Distance III",
    "titleSlug": "shortest-word-distance-iii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String"
    ],
    "description": ""
  },
  {
    "number": 246,
    "title": "Strobogrammatic Number",
    "titleSlug": "strobogrammatic-number",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Two Pointers",
      "String"
    ],
    "description": ""
  },
  {
    "number": 247,
    "title": "Strobogrammatic Number II",
    "titleSlug": "strobogrammatic-number-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Recursion"
    ],
    "description": ""
  },
  {
    "number": 248,
    "title": "Strobogrammatic Number III",
    "titleSlug": "strobogrammatic-number-iii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Recursion"
    ],
    "description": ""
  },
  {
    "number": 249,
    "title": "Group Shifted Strings",
    "titleSlug": "group-shifted-strings",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": ""
  },
  {
    "number": 250,
    "title": "Count Univalue Subtrees",
    "titleSlug": "count-univalue-subtrees",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 251,
    "title": "Flatten 2D Vector",
    "titleSlug": "flatten-2d-vector",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Design",
      "Iterator"
    ],
    "description": ""
  },
  {
    "number": 252,
    "title": "Meeting Rooms",
    "titleSlug": "meeting-rooms",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Sorting"
    ],
    "description": ""
  },
  {
    "number": 253,
    "title": "Meeting Rooms II",
    "titleSlug": "meeting-rooms-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Prefix Sum"
    ],
    "description": ""
  },
  {
    "number": 254,
    "title": "Factor Combinations",
    "titleSlug": "factor-combinations",
    "difficulty": "Medium",
    "tags": [
      "Backtracking"
    ],
    "description": ""
  },
  {
    "number": 255,
    "title": "Verify Preorder Sequence in Binary Search Tree",
    "titleSlug": "verify-preorder-sequence-in-binary-search-tree",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Stack",
      "Tree",
      "Binary Search Tree",
      "Recursion",
      "Monotonic Stack",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 256,
    "title": "Paint House",
    "titleSlug": "paint-house",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": ""
  },
  {
    "number": 257,
    "title": "Binary Tree Paths",
    "titleSlug": "binary-tree-paths",
    "difficulty": "Easy",
    "tags": [
      "String",
      "Backtracking",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return all root-to-leaf paths in any order. A leaf is a node with no children. &nbsp; Example 1: Input: root = [1,2,3,null,5] Output: [&quot;1-&gt;2-&gt;5&quot;,&quot;1-&gt;3&quot;] Example 2: Input: root = [1] Output: [&quot;1&quot;] &nbsp; Constraints: The number of nodes in the tree is in the range [1, 100]. -100 &lt;= Node.val &lt;= 100"
  },
  {
    "number": 258,
    "title": "Add Digits",
    "titleSlug": "add-digits",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Simulation",
      "Number Theory"
    ],
    "description": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it. &nbsp; Example 1: Input: num = 38 Output: 2 Explanation: The process is 38 --&gt; 3 + 8 --&gt; 11 11 --&gt; 1 + 1 --&gt; 2 Since 2 has only one digit, return it. Example 2: Input: num = 0 Output: 0 &nbsp; Constraints: 0 &lt;= num &lt;= 231 - 1 &nbsp; Follow up: Could you do it without any loop/recursion in O(1) runtime?"
  },
  {
    "number": 259,
    "title": "3Sum Smaller",
    "titleSlug": "3sum-smaller",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": ""
  },
  {
    "number": 260,
    "title": "Single Number III",
    "titleSlug": "single-number-iii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order. You must write an&nbsp;algorithm that runs in linear runtime complexity and uses&nbsp;only constant extra space. &nbsp; Example 1: Input: nums = [1,2,1,3,2,5] Output: [3,5] Explanation: [5, 3] is also a valid answer. Example 2: Input: nums = [-1,0] Output: [-1,0] Example 3: Input: nums = [0,1] Output: [1,0] &nbsp; Constraints: 2 &lt;= nums.length &lt;= 3 * 104 -231 &lt;= nums[i] &lt;= 231 - 1 Each integer in nums will appear twice, only two integers will appear once."
  },
  {
    "number": 261,
    "title": "Graph Valid Tree",
    "titleSlug": "graph-valid-tree",
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": ""
  },
  {
    "number": 262,
    "title": "Trips and Users",
    "titleSlug": "trips-and-users",
    "difficulty": "Hard",
    "tags": [
      "Database"
    ],
    "description": "Table: Trips +-------------+----------+ | Column Name | Type | +-------------+----------+ | id | int | | client_id | int | | driver_id | int | | city_id | int | | status | enum | | request_at | varchar | +-------------+----------+ id is the primary key (column with unique values) for this table. The table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table. Status is an ENUM (category) type of (&#39;completed&#39;, &#39;cancelled_by_driver&#39;, &#39;cancelled_by_client&#39;). &nbsp; Table: Users +-------------+----------+ | Column Name | Type | +-------------+----------+ | users_id | int | | banned | enum | | role | enum | +-------------+----------+ users_id is the primary key (column with unique values) for this table. The table holds all users. Each user has a unique users_id, and role is an ENUM type of (&#39;client&#39;, &#39;driver&#39;, &#39;partner&#39;). banned is an ENUM (category) type of (&#39;Yes&#39;, &#39;No&#39;). &nbsp; The cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day. Write a solution to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between &quot;2013-10-01&quot; and &quot;2013-10-03&quot; with at least one trip. Round Cancellation Rate to two decimal points. Return the result table in any order. The&nbsp;result format is in the following example. &nbsp; Example 1: Input: Trips table: +----+-----------+-----------+---------+---------------------+------------+ | id | client_id | driver_id | city_id | status | request_at | +----+-----------+-----------+---------+---------------------+------------+ | 1 | 1 | 10 | 1 | completed | 2013-10-01 | | 2 | 2 | 11 | 1 | cancelled_by_driver | 2013-10-01 | | 3 | 3 | 12 | 6 | completed | 2013-10-01 | | 4 | 4 | 13 | 6 | cancelled_by_client | 2013-10-01 | | 5 | 1 | 10 | 1 | completed | 2013-10-02 | | 6 | 2 | 11 | 6 | completed | 2013-10-02 | | 7 | 3 | 12 | 6 | completed | 2013-10-02 | | 8 | 2 | 12 | 12 | completed | 2013-10-03 | | 9 | 3 | 10 | 12 | completed | 2013-10-03 | | 10 | 4 | 13 | 12 | cancelled_by_driver | 2013-10-03 | +----+-----------+-----------+---------+---------------------+------------+ Users table: +----------+--------+--------+ | users_id | banned | role | +----------+--------+--------+ | 1 | No | client | | 2 | Yes | client | | 3 | No | client | | 4 | No | client | | 10 | No | driver | | 11 | No | driver | | 12 | No | driver | | 13 | No | driver | +----------+--------+--------+ Output: +------------+-------------------+ | Day | Cancellation Rate | +------------+-------------------+ | 2013-10-01 | 0.33 | | 2013-10-02 | 0.00 | | 2013-10-03 | 0.50 | +------------+-------------------+ Explanation: On 2013-10-01: - There were 4 requests in total, 2 of which were canceled. - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation. - Hence there are 3 unbanned requests in total, 1 of which was canceled. - The Cancellation Rate is (1 / 3) = 0.33 On 2013-10-02: - There were 3 requests in total, 0 of which were canceled. - The request with Id=6 was made by a banned client, so it is ignored. - Hence there are 2 unbanned requests in total, 0 of which were canceled. - The Cancellation Rate is (0 / 2) = 0.00 On 2013-10-03: - There were 3 requests in total, 1 of which was canceled. - The request with Id=8 was made by a banned client, so it is ignored. - Hence there are 2 unbanned request in total, 1 of which were canceled. - The Cancellation Rate is (1 / 2) = 0.50"
  },
  {
    "number": 263,
    "title": "Ugly Number",
    "titleSlug": "ugly-number",
    "difficulty": "Easy",
    "tags": [
      "Math"
    ],
    "description": "An ugly number is a positive integer which does not have a prime factor other than 2, 3, and 5. Given an integer n, return true if n is an ugly number. &nbsp; Example 1: Input: n = 6 Output: true Explanation: 6 = 2 &times; 3 Example 2: Input: n = 1 Output: true Explanation: 1 has no prime factors. Example 3: Input: n = 14 Output: false Explanation: 14 is not ugly since it includes the prime factor 7. &nbsp; Constraints: -231 &lt;= n &lt;= 231 - 1"
  },
  {
    "number": 264,
    "title": "Ugly Number II",
    "titleSlug": "ugly-number-ii",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "description": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer n, return the nth ugly number. &nbsp; Example 1: Input: n = 10 Output: 12 Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers. Example 2: Input: n = 1 Output: 1 Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5. &nbsp; Constraints: 1 &lt;= n &lt;= 1690"
  },
  {
    "number": 265,
    "title": "Paint House II",
    "titleSlug": "paint-house-ii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": ""
  },
  {
    "number": 266,
    "title": "Palindrome Permutation",
    "titleSlug": "palindrome-permutation",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String",
      "Bit Manipulation"
    ],
    "description": ""
  },
  {
    "number": 267,
    "title": "Palindrome Permutation II",
    "titleSlug": "palindrome-permutation-ii",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Backtracking"
    ],
    "description": ""
  },
  {
    "number": 268,
    "title": "Missing Number",
    "titleSlug": "missing-number",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Binary Search",
      "Bit Manipulation",
      "Sorting"
    ],
    "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array. &nbsp; Example 1: Input: nums = [3,0,1] Output: 2 Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. Example 2: Input: nums = [0,1] Output: 2 Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. Example 3: Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 104 0 &lt;= nums[i] &lt;= n All the numbers of nums are unique. &nbsp; Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?"
  },
  {
    "number": 269,
    "title": "Alien Dictionary",
    "titleSlug": "alien-dictionary",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": ""
  },
  {
    "number": 270,
    "title": "Closest Binary Search Tree Value",
    "titleSlug": "closest-binary-search-tree-value",
    "difficulty": "Easy",
    "tags": [
      "Binary Search",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 271,
    "title": "Encode and Decode Strings",
    "titleSlug": "encode-and-decode-strings",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Design"
    ],
    "description": ""
  },
  {
    "number": 272,
    "title": "Closest Binary Search Tree Value II",
    "titleSlug": "closest-binary-search-tree-value-ii",
    "difficulty": "Hard",
    "tags": [
      "Two Pointers",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Heap (Priority Queue)",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 273,
    "title": "Integer to English Words",
    "titleSlug": "integer-to-english-words",
    "difficulty": "Hard",
    "tags": [
      "Math",
      "String",
      "Recursion"
    ],
    "description": "Convert a non-negative integer num to its English words representation. &nbsp; Example 1: Input: num = 123 Output: &quot;One Hundred Twenty Three&quot; Example 2: Input: num = 12345 Output: &quot;Twelve Thousand Three Hundred Forty Five&quot; Example 3: Input: num = 1234567 Output: &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot; &nbsp; Constraints: 0 &lt;= num &lt;= 231 - 1"
  },
  {
    "number": 274,
    "title": "H-Index",
    "titleSlug": "h-index",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Sorting",
      "Counting Sort"
    ],
    "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher&#39;s h-index. According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times. &nbsp; Example 1: Input: citations = [3,0,6,1,5] Output: 3 Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. Example 2: Input: citations = [1,3,1] Output: 1 &nbsp; Constraints: n == citations.length 1 &lt;= n &lt;= 5000 0 &lt;= citations[i] &lt;= 1000"
  },
  {
    "number": 275,
    "title": "H-Index II",
    "titleSlug": "h-index-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in non-descending order, return the researcher&#39;s h-index. According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times. You must write an algorithm that runs in logarithmic time. &nbsp; Example 1: Input: citations = [0,1,3,5,6] Output: 3 Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. Example 2: Input: citations = [1,2,100] Output: 2 &nbsp; Constraints: n == citations.length 1 &lt;= n &lt;= 105 0 &lt;= citations[i] &lt;= 1000 citations is sorted in ascending order."
  },
  {
    "number": 276,
    "title": "Paint Fence",
    "titleSlug": "paint-fence",
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming"
    ],
    "description": ""
  },
  {
    "number": 277,
    "title": "Find the Celebrity",
    "titleSlug": "find-the-celebrity",
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "Graph",
      "Interactive"
    ],
    "description": ""
  },
  {
    "number": 278,
    "title": "First Bad Version",
    "titleSlug": "first-bad-version",
    "difficulty": "Easy",
    "tags": [
      "Binary Search",
      "Interactive"
    ],
    "description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API. &nbsp; Example 1: Input: n = 5, bad = 4 Output: 4 Explanation: call isBadVersion(3) -&gt; false call isBadVersion(5)&nbsp;-&gt; true call isBadVersion(4)&nbsp;-&gt; true Then 4 is the first bad version. Example 2: Input: n = 1, bad = 1 Output: 1 &nbsp; Constraints: 1 &lt;= bad &lt;= n &lt;= 231 - 1"
  },
  {
    "number": 279,
    "title": "Perfect Squares",
    "titleSlug": "perfect-squares",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Breadth-First Search"
    ],
    "description": "Given an integer n, return the least number of perfect square numbers that sum to n. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not. &nbsp; Example 1: Input: n = 12 Output: 3 Explanation: 12 = 4 + 4 + 4. Example 2: Input: n = 13 Output: 2 Explanation: 13 = 4 + 9. &nbsp; Constraints: 1 &lt;= n &lt;= 104"
  },
  {
    "number": 280,
    "title": "Wiggle Sort",
    "titleSlug": "wiggle-sort",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": ""
  },
  {
    "number": 281,
    "title": "Zigzag Iterator",
    "titleSlug": "zigzag-iterator",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Design",
      "Queue",
      "Iterator"
    ],
    "description": ""
  },
  {
    "number": 282,
    "title": "Expression Add Operators",
    "titleSlug": "expression-add-operators",
    "difficulty": "Hard",
    "tags": [
      "Math",
      "String",
      "Backtracking"
    ],
    "description": "Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators &#39;+&#39;, &#39;-&#39;, and/or &#39;*&#39; between the digits of num so that the resultant expression evaluates to the target value. Note that operands in the returned expressions should not contain leading zeros. &nbsp; Example 1: Input: num = &quot;123&quot;, target = 6 Output: [&quot;1*2*3&quot;,&quot;1+2+3&quot;] Explanation: Both &quot;1*2*3&quot; and &quot;1+2+3&quot; evaluate to 6. Example 2: Input: num = &quot;232&quot;, target = 8 Output: [&quot;2*3+2&quot;,&quot;2+3*2&quot;] Explanation: Both &quot;2*3+2&quot; and &quot;2+3*2&quot; evaluate to 8. Example 3: Input: num = &quot;3456237490&quot;, target = 9191 Output: [] Explanation: There are no expressions that can be created from &quot;3456237490&quot; to evaluate to 9191. &nbsp; Constraints: 1 &lt;= num.length &lt;= 10 num consists of only digits. -231 &lt;= target &lt;= 231 - 1"
  },
  {
    "number": 283,
    "title": "Move Zeroes",
    "titleSlug": "move-zeroes",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums, move all 0&#39;s to the end of it while maintaining the relative order of the non-zero elements. Note that you must do this in-place without making a copy of the array. &nbsp; Example 1: Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] Example 2: Input: nums = [0] Output: [0] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 104 -231 &lt;= nums[i] &lt;= 231 - 1 &nbsp; Follow up: Could you minimize the total number of operations done?"
  },
  {
    "number": 284,
    "title": "Peeking Iterator",
    "titleSlug": "peeking-iterator",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Design",
      "Iterator"
    ],
    "description": "Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations. Implement the PeekingIterator class: PeekingIterator(Iterator&lt;int&gt; nums) Initializes the object with the given integer iterator iterator. int next() Returns the next element in the array and moves the pointer to the next element. boolean hasNext() Returns true if there are still elements in the array. int peek() Returns the next element in the array without moving the pointer. Note: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions. &nbsp; Example 1: Input [&quot;PeekingIterator&quot;, &quot;next&quot;, &quot;peek&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;] [[[1, 2, 3]], [], [], [], [], []] Output [null, 1, 2, 2, 3, false] Explanation PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3] peekingIterator.next(); // return 1, the pointer moves to the next element [1,2,3]. peekingIterator.peek(); // return 2, the pointer does not move [1,2,3]. peekingIterator.next(); // return 2, the pointer moves to the next element [1,2,3] peekingIterator.next(); // return 3, the pointer moves to the next element [1,2,3] peekingIterator.hasNext(); // return False &nbsp; Constraints: 1 &lt;= nums.length &lt;= 1000 1 &lt;= nums[i] &lt;= 1000 All the calls to next and peek are valid. At most 1000 calls will be made to next, hasNext, and peek. &nbsp; Follow up: How would you extend your design to be generic and work with all types, not just integer?"
  },
  {
    "number": 285,
    "title": "Inorder Successor in BST",
    "titleSlug": "inorder-successor-in-bst",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 286,
    "title": "Walls and Gates",
    "titleSlug": "walls-and-gates",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 287,
    "title": "Find the Duplicate Number",
    "titleSlug": "find-the-duplicate-number",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Bit Manipulation"
    ],
    "description": "Given an array of integers nums containing&nbsp;n + 1 integers where each integer is in the range [1, n] inclusive. There is only one repeated number in nums, return this&nbsp;repeated&nbsp;number. You must solve the problem without modifying the array nums&nbsp;and using only constant extra space. &nbsp; Example 1: Input: nums = [1,3,4,2,2] Output: 2 Example 2: Input: nums = [3,1,3,4,2] Output: 3 Example 3: Input: nums = [3,3,3,3,3] Output: 3 &nbsp; Constraints: 1 &lt;= n &lt;= 105 nums.length == n + 1 1 &lt;= nums[i] &lt;= n All the integers in nums appear only once except for precisely one integer which appears two or more times. &nbsp; Follow up: How can we prove that at least one duplicate number must exist in nums? Can you solve the problem in linear runtime complexity?"
  },
  {
    "number": 288,
    "title": "Unique Word Abbreviation",
    "titleSlug": "unique-word-abbreviation",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Design"
    ],
    "description": ""
  },
  {
    "number": 289,
    "title": "Game of Life",
    "titleSlug": "game-of-life",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "According to Wikipedia&#39;s article: &quot;The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot; The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article): Any live cell with fewer than two live neighbors dies as if caused by under-population. Any live cell with two or three live neighbors lives on to the next generation. Any live cell with more than three live neighbors dies, as if by over-population. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. The next state of the board is determined by applying the above rules simultaneously to every cell in the current state of the m x n grid board. In this process, births and deaths occur simultaneously. Given the current state of the board, update the board to reflect its next state. Note that you do not need to return anything. &nbsp; Example 1: Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]] Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]] Example 2: Input: board = [[1,1],[1,0]] Output: [[1,1],[1,1]] &nbsp; Constraints: m == board.length n == board[i].length 1 &lt;= m, n &lt;= 25 board[i][j] is 0 or 1. &nbsp; Follow up: Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells. In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?"
  },
  {
    "number": 290,
    "title": "Word Pattern",
    "titleSlug": "word-pattern",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String"
    ],
    "description": "Given a pattern and a string s, find if s&nbsp;follows the same pattern. Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically: Each letter in pattern maps to exactly one unique word in s. Each unique word in s maps to exactly one letter in pattern. No two letters map to the same word, and no two words map to the same letter. &nbsp; Example 1: Input: pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot; Output: true Explanation: The bijection can be established as: &#39;a&#39; maps to &quot;dog&quot;. &#39;b&#39; maps to &quot;cat&quot;. Example 2: Input: pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot; Output: false Example 3: Input: pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot; Output: false &nbsp; Constraints: 1 &lt;= pattern.length &lt;= 300 pattern contains only lower-case English letters. 1 &lt;= s.length &lt;= 3000 s contains only lowercase English letters and spaces &#39; &#39;. s does not contain any leading or trailing spaces. All the words in s are separated by a single space."
  },
  {
    "number": 291,
    "title": "Word Pattern II",
    "titleSlug": "word-pattern-ii",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Backtracking"
    ],
    "description": ""
  },
  {
    "number": 292,
    "title": "Nim Game",
    "titleSlug": "nim-game",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Brainteaser",
      "Game Theory"
    ],
    "description": "You are playing the following Nim Game with your friend: Initially, there is a heap of stones on the table. You and your friend will alternate taking turns, and you go first. On each turn, the person whose turn it is will remove 1 to 3 stones from the heap. The one who removes the last stone is the winner. Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false. &nbsp; Example 1: Input: n = 4 Output: false Explanation: These are the possible outcomes: 1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins. 2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins. 3. You remove 3 stones. Your friend removes the last stone. Your friend wins. In all outcomes, your friend wins. Example 2: Input: n = 1 Output: true Example 3: Input: n = 2 Output: true &nbsp; Constraints: 1 &lt;= n &lt;= 231 - 1"
  },
  {
    "number": 293,
    "title": "Flip Game",
    "titleSlug": "flip-game",
    "difficulty": "Easy",
    "tags": [
      "String"
    ],
    "description": ""
  },
  {
    "number": 294,
    "title": "Flip Game II",
    "titleSlug": "flip-game-ii",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Memoization",
      "Game Theory"
    ],
    "description": ""
  },
  {
    "number": 295,
    "title": "Find Median from Data Stream",
    "titleSlug": "find-median-from-data-stream",
    "difficulty": "Hard",
    "tags": [
      "Two Pointers",
      "Design",
      "Sorting",
      "Heap (Priority Queue)",
      "Data Stream"
    ],
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values. For example, for arr = [2,3,4], the median is 3. For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5. Implement the MedianFinder class: MedianFinder() initializes the MedianFinder object. void addNum(int num) adds the integer num from the data stream to the data structure. double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted. &nbsp; Example 1: Input [&quot;MedianFinder&quot;, &quot;addNum&quot;, &quot;addNum&quot;, &quot;findMedian&quot;, &quot;addNum&quot;, &quot;findMedian&quot;] [[], [1], [2], [], [3], []] Output [null, null, null, 1.5, null, 2.0] Explanation MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1); // arr = [1] medianFinder.addNum(2); // arr = [1, 2] medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2) medianFinder.addNum(3); // arr[1, 2, 3] medianFinder.findMedian(); // return 2.0 &nbsp; Constraints: -105 &lt;= num &lt;= 105 There will be at least one element in the data structure before calling findMedian. At most 5 * 104 calls will be made to addNum and findMedian. &nbsp; Follow up: If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution? If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?"
  },
  {
    "number": 296,
    "title": "Best Meeting Point",
    "titleSlug": "best-meeting-point",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Math",
      "Sorting",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 297,
    "title": "Serialize and Deserialize Binary Tree",
    "titleSlug": "serialize-and-deserialize-binary-tree",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself. &nbsp; Example 1: Input: root = [1,2,3,null,null,4,5] Output: [1,2,3,null,null,4,5] Example 2: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 104]. -1000 &lt;= Node.val &lt;= 1000"
  },
  {
    "number": 298,
    "title": "Binary Tree Longest Consecutive Sequence",
    "titleSlug": "binary-tree-longest-consecutive-sequence",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 299,
    "title": "Bulls and Cows",
    "titleSlug": "bulls-and-cows",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are playing the Bulls and Cows game with your friend. You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info: The number of &quot;bulls&quot;, which are digits in the guess that are in the correct position. The number of &quot;cows&quot;, which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls. Given the secret number secret and your friend&#39;s guess guess, return the hint for your friend&#39;s guess. The hint should be formatted as &quot;xAyB&quot;, where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits. &nbsp; Example 1: Input: secret = &quot;1807&quot;, guess = &quot;7810&quot; Output: &quot;1A3B&quot; Explanation: Bulls are connected with a &#39;|&#39; and cows are underlined: &quot;1807&quot; | &quot;7810&quot; Example 2: Input: secret = &quot;1123&quot;, guess = &quot;0111&quot; Output: &quot;1A1B&quot; Explanation: Bulls are connected with a &#39;|&#39; and cows are underlined: &quot;1123&quot; &quot;1123&quot; | or | &quot;0111&quot; &quot;0111&quot; Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull. &nbsp; Constraints: 1 &lt;= secret.length, guess.length &lt;= 1000 secret.length == guess.length secret and guess consist of digits only."
  },
  {
    "number": 300,
    "title": "Longest Increasing Subsequence",
    "titleSlug": "longest-increasing-subsequence",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence. &nbsp; Example 1: Input: nums = [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Example 2: Input: nums = [0,1,0,3,2,3] Output: 4 Example 3: Input: nums = [7,7,7,7,7,7,7] Output: 1 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 2500 -104 &lt;= nums[i] &lt;= 104 &nbsp; Follow up:&nbsp;Can you come up with an algorithm that runs in&nbsp;O(n log(n)) time complexity?"
  },
  {
    "number": 301,
    "title": "Remove Invalid Parentheses",
    "titleSlug": "remove-invalid-parentheses",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Backtracking",
      "Breadth-First Search"
    ],
    "description": "Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid. Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order. &nbsp; Example 1: Input: s = &quot;()())()&quot; Output: [&quot;(())()&quot;,&quot;()()()&quot;] Example 2: Input: s = &quot;(a)())()&quot; Output: [&quot;(a())()&quot;,&quot;(a)()()&quot;] Example 3: Input: s = &quot;)(&quot; Output: [&quot;&quot;] &nbsp; Constraints: 1 &lt;= s.length &lt;= 25 s consists of lowercase English letters and parentheses &#39;(&#39; and &#39;)&#39;. There will be at most 20 parentheses in s."
  },
  {
    "number": 302,
    "title": "Smallest Rectangle Enclosing Black Pixels",
    "titleSlug": "smallest-rectangle-enclosing-black-pixels",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 303,
    "title": "Range Sum Query - Immutable",
    "titleSlug": "range-sum-query-immutable",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Design",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums, handle multiple queries of the following type: Calculate the sum of the elements of nums between indices left and right inclusive where left &lt;= right. Implement the NumArray class: NumArray(int[] nums) Initializes the object with the integer array nums. int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]). &nbsp; Example 1: Input [&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;sumRange&quot;, &quot;sumRange&quot;] [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]] Output [null, 1, -1, -3] Explanation NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]); numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1 numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1 numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 104 -105 &lt;= nums[i] &lt;= 105 0 &lt;= left &lt;= right &lt; nums.length At most 104 calls will be made to sumRange."
  },
  {
    "number": 304,
    "title": "Range Sum Query 2D - Immutable",
    "titleSlug": "range-sum-query-2d-immutable",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Design",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "Given a 2D matrix matrix, handle multiple queries of the following type: Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). Implement the NumMatrix class: NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix. int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). You must design an algorithm where sumRegion works on O(1) time complexity. &nbsp; Example 1: Input [&quot;NumMatrix&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;] [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]] Output [null, 8, 11, 12] Explanation NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle) numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle) numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle) &nbsp; Constraints: m == matrix.length n == matrix[i].length 1 &lt;= m, n &lt;= 200 -104 &lt;= matrix[i][j] &lt;= 104 0 &lt;= row1 &lt;= row2 &lt; m 0 &lt;= col1 &lt;= col2 &lt; n At most 104 calls will be made to sumRegion."
  },
  {
    "number": 305,
    "title": "Number of Islands II",
    "titleSlug": "number-of-islands-ii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Union Find"
    ],
    "description": ""
  },
  {
    "number": 306,
    "title": "Additive Number",
    "titleSlug": "additive-number",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Backtracking"
    ],
    "description": "An additive number is a string whose digits can form an additive sequence. A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two. Given a string containing only digits, return true if it is an additive number or false otherwise. Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid. &nbsp; Example 1: Input: &quot;112358&quot; Output: true Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8 Example 2: Input: &quot;199100199&quot; Output: true Explanation: The additive sequence is: 1, 99, 100, 199.&nbsp; 1 + 99 = 100, 99 + 100 = 199 &nbsp; Constraints: 1 &lt;= num.length &lt;= 35 num consists only of digits. &nbsp; Follow up: How would you handle overflow for very large input integers?"
  },
  {
    "number": 307,
    "title": "Range Sum Query - Mutable",
    "titleSlug": "range-sum-query-mutable",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Design",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "Given an integer array nums, handle multiple queries of the following types: Update the value of an element in nums. Calculate the sum of the elements of nums between indices left and right inclusive where left &lt;= right. Implement the NumArray class: NumArray(int[] nums) Initializes the object with the integer array nums. void update(int index, int val) Updates the value of nums[index] to be val. int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]). &nbsp; Example 1: Input [&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;update&quot;, &quot;sumRange&quot;] [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]] Output [null, 9, null, 8] Explanation NumArray numArray = new NumArray([1, 3, 5]); numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9 numArray.update(1, 2); // nums = [1, 2, 5] numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 3 * 104 -100 &lt;= nums[i] &lt;= 100 0 &lt;= index &lt; nums.length -100 &lt;= val &lt;= 100 0 &lt;= left &lt;= right &lt; nums.length At most 3 * 104 calls will be made to update and sumRange."
  },
  {
    "number": 308,
    "title": "Range Sum Query 2D - Mutable",
    "titleSlug": "range-sum-query-2d-mutable",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Design",
      "Binary Indexed Tree",
      "Segment Tree",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 309,
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). &nbsp; Example 1: Input: prices = [1,2,3,0,2] Output: 3 Explanation: transactions = [buy, sell, cooldown, buy, sell] Example 2: Input: prices = [1] Output: 0 &nbsp; Constraints: 1 &lt;= prices.length &lt;= 5000 0 &lt;= prices[i] &lt;= 1000"
  },
  {
    "number": 310,
    "title": "Minimum Height Trees",
    "titleSlug": "minimum-height-trees",
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "A tree is an undirected graph in which any two vertices are connected by&nbsp;exactly&nbsp;one path. In other words, any connected graph without simple cycles is a tree. Given a tree of n nodes&nbsp;labelled from 0 to n - 1, and an array of&nbsp;n - 1&nbsp;edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes&nbsp;ai and&nbsp;bi in the tree,&nbsp;you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))&nbsp; are called minimum height trees (MHTs). Return a list of all MHTs&#39; root labels.&nbsp;You can return the answer in any order. The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf. &nbsp; Example 1: Input: n = 4, edges = [[1,0],[1,2],[1,3]] Output: [1] Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT. Example 2: Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]] Output: [3,4] &nbsp; Constraints: 1 &lt;= n &lt;= 2 * 104 edges.length == n - 1 0 &lt;= ai, bi &lt; n ai != bi All the pairs (ai, bi) are distinct. The given input is guaranteed to be a tree and there will be no repeated edges."
  },
  {
    "number": 311,
    "title": "Sparse Matrix Multiplication",
    "titleSlug": "sparse-matrix-multiplication",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 312,
    "title": "Burst Balloons",
    "titleSlug": "burst-balloons",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons. If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it. Return the maximum coins you can collect by bursting the balloons wisely. &nbsp; Example 1: Input: nums = [3,1,5,8] Output: 167 Explanation: nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; [] coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167 Example 2: Input: nums = [1,5] Output: 10 &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 300 0 &lt;= nums[i] &lt;= 100"
  },
  {
    "number": 313,
    "title": "Super Ugly Number",
    "titleSlug": "super-ugly-number",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "description": "A super ugly number is a positive integer whose prime factors are in the array primes. Given an integer n and an array of integers primes, return the nth super ugly number. The nth super ugly number is guaranteed to fit in a 32-bit signed integer. &nbsp; Example 1: Input: n = 12, primes = [2,7,13,19] Output: 32 Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19]. Example 2: Input: n = 1, primes = [2,3,5] Output: 1 Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5]. &nbsp; Constraints: 1 &lt;= n &lt;= 105 1 &lt;= primes.length &lt;= 100 2 &lt;= primes[i] &lt;= 1000 primes[i] is guaranteed to be a prime number. All the values of primes are unique and sorted in ascending order."
  },
  {
    "number": 314,
    "title": "Binary Tree Vertical Order Traversal",
    "titleSlug": "binary-tree-vertical-order-traversal",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Sorting",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 315,
    "title": "Count of Smaller Numbers After Self",
    "titleSlug": "count-of-smaller-numbers-after-self",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i]. &nbsp; Example 1: Input: nums = [5,2,6,1] Output: [2,1,1,0] Explanation: To the right of 5 there are 2 smaller elements (2 and 1). To the right of 2 there is only 1 smaller element (1). To the right of 6 there is 1 smaller element (1). To the right of 1 there is 0 smaller element. Example 2: Input: nums = [-1] Output: [0] Example 3: Input: nums = [-1,-1] Output: [0,0] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -104 &lt;= nums[i] &lt;= 104"
  },
  {
    "number": 316,
    "title": "Remove Duplicate Letters",
    "titleSlug": "remove-duplicate-letters",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results. &nbsp; Example 1: Input: s = &quot;bcabc&quot; Output: &quot;abc&quot; Example 2: Input: s = &quot;cbacdcbc&quot; Output: &quot;acdb&quot; &nbsp; Constraints: 1 &lt;= s.length &lt;= 104 s consists of lowercase English letters. &nbsp; Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/"
  },
  {
    "number": 317,
    "title": "Shortest Distance from All Buildings",
    "titleSlug": "shortest-distance-from-all-buildings",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 318,
    "title": "Maximum Product of Word Lengths",
    "titleSlug": "maximum-product-of-word-lengths",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Bit Manipulation"
    ],
    "description": "Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0. &nbsp; Example 1: Input: words = [&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;] Output: 16 Explanation: The two words can be &quot;abcw&quot;, &quot;xtfn&quot;. Example 2: Input: words = [&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;] Output: 4 Explanation: The two words can be &quot;ab&quot;, &quot;cd&quot;. Example 3: Input: words = [&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;] Output: 0 Explanation: No such pair of words. &nbsp; Constraints: 2 &lt;= words.length &lt;= 1000 1 &lt;= words[i].length &lt;= 1000 words[i] consists only of lowercase English letters."
  },
  {
    "number": 319,
    "title": "Bulb Switcher",
    "titleSlug": "bulb-switcher",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Brainteaser"
    ],
    "description": "There are n bulbs that are initially off. You first turn on all the bulbs, then&nbsp;you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it&#39;s off or turning off if it&#39;s on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Return the number of bulbs that are on after n rounds. &nbsp; Example 1: Input: n = 3 Output: 1 Explanation: At first, the three bulbs are [off, off, off]. After the first round, the three bulbs are [on, on, on]. After the second round, the three bulbs are [on, off, on]. After the third round, the three bulbs are [on, off, off]. So you should return 1 because there is only one bulb is on. Example 2: Input: n = 0 Output: 0 Example 3: Input: n = 1 Output: 1 &nbsp; Constraints: 0 &lt;= n &lt;= 109"
  },
  {
    "number": 320,
    "title": "Generalized Abbreviation",
    "titleSlug": "generalized-abbreviation",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": ""
  },
  {
    "number": 321,
    "title": "Create Maximum Number",
    "titleSlug": "create-maximum-number",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Two Pointers",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k. Create the maximum number of length k &lt;= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved. Return an array of the k digits representing the answer. &nbsp; Example 1: Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5 Output: [9,8,6,5,3] Example 2: Input: nums1 = [6,7], nums2 = [6,0,4], k = 5 Output: [6,7,6,0,4] Example 3: Input: nums1 = [3,9], nums2 = [8,9], k = 3 Output: [9,8,9] &nbsp; Constraints: m == nums1.length n == nums2.length 1 &lt;= m, n &lt;= 500 0 &lt;= nums1[i], nums2[i] &lt;= 9 1 &lt;= k &lt;= m + n nums1 and nums2 do not have leading zeros."
  },
  {
    "number": 322,
    "title": "Coin Change",
    "titleSlug": "coin-change",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search"
    ],
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. &nbsp; Example 1: Input: coins = [1,2,5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example 2: Input: coins = [2], amount = 3 Output: -1 Example 3: Input: coins = [1], amount = 0 Output: 0 &nbsp; Constraints: 1 &lt;= coins.length &lt;= 12 1 &lt;= coins[i] &lt;= 231 - 1 0 &lt;= amount &lt;= 104"
  },
  {
    "number": 323,
    "title": "Number of Connected Components in an Undirected Graph",
    "titleSlug": "number-of-connected-components-in-an-undirected-graph",
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": ""
  },
  {
    "number": 324,
    "title": "Wiggle Sort II",
    "titleSlug": "wiggle-sort-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Greedy",
      "Sorting",
      "Quickselect"
    ],
    "description": "Given an integer array nums, reorder it such that nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3].... You may assume the input array always has a valid answer. &nbsp; Example 1: Input: nums = [1,5,1,1,6,4] Output: [1,6,1,5,1,4] Explanation: [1,4,1,5,1,6] is also accepted. Example 2: Input: nums = [1,3,2,2,3,1] Output: [2,3,1,3,1,2] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 5 * 104 0 &lt;= nums[i] &lt;= 5000 It is guaranteed that there will be an answer for the given input nums. &nbsp; Follow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?"
  },
  {
    "number": 325,
    "title": "Maximum Size Subarray Sum Equals k",
    "titleSlug": "maximum-size-subarray-sum-equals-k",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": ""
  },
  {
    "number": 326,
    "title": "Power of Three",
    "titleSlug": "power-of-three",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Recursion"
    ],
    "description": "Given an integer n, return true if it is a power of three. Otherwise, return false. An integer n is a power of three, if there exists an integer x such that n == 3x. &nbsp; Example 1: Input: n = 27 Output: true Explanation: 27 = 33 Example 2: Input: n = 0 Output: false Explanation: There is no x where 3x = 0. Example 3: Input: n = -1 Output: false Explanation: There is no x where 3x = (-1). &nbsp; Constraints: -231 &lt;= n &lt;= 231 - 1 &nbsp; Follow up: Could you solve it without loops/recursion?"
  },
  {
    "number": 327,
    "title": "Count of Range Sum",
    "titleSlug": "count-of-range-sum",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive. Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i &lt;= j. &nbsp; Example 1: Input: nums = [-2,5,-1], lower = -2, upper = 2 Output: 3 Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2. Example 2: Input: nums = [0], lower = 0, upper = 0 Output: 1 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -231 &lt;= nums[i] &lt;= 231 - 1 -105 &lt;= lower &lt;= upper &lt;= 105 The answer is guaranteed to fit in a 32-bit integer."
  },
  {
    "number": 328,
    "title": "Odd Even Linked List",
    "titleSlug": "odd-even-linked-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List"
    ],
    "description": "Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. The first node is considered odd, and the second node is even, and so on. Note that the relative order inside both the even and odd groups should remain as it was in the input. You must solve the problem&nbsp;in O(1)&nbsp;extra space complexity and O(n) time complexity. &nbsp; Example 1: Input: head = [1,2,3,4,5] Output: [1,3,5,2,4] Example 2: Input: head = [2,1,3,5,6,4,7] Output: [2,3,6,7,1,5,4] &nbsp; Constraints: The number of nodes in the linked list is in the range [0, 104]. -106 &lt;= Node.val &lt;= 106"
  },
  {
    "number": 329,
    "title": "Longest Increasing Path in a Matrix",
    "titleSlug": "longest-increasing-path-in-a-matrix",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix"
    ],
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix. From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed). &nbsp; Example 1: Input: matrix = [[9,9,4],[6,6,8],[2,1,1]] Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. Example 2: Input: matrix = [[3,4,5],[3,2,6],[2,2,1]] Output: 4 Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed. Example 3: Input: matrix = [[1]] Output: 1 &nbsp; Constraints: m == matrix.length n == matrix[i].length 1 &lt;= m, n &lt;= 200 0 &lt;= matrix[i][j] &lt;= 231 - 1"
  },
  {
    "number": 330,
    "title": "Patching Array",
    "titleSlug": "patching-array",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Greedy"
    ],
    "description": "Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required. &nbsp; Example 1: Input: nums = [1,3], n = 6 Output: 1 Explanation: Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4. Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3]. Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6]. So we only need 1 patch. Example 2: Input: nums = [1,5,10], n = 20 Output: 2 Explanation: The two patches can be [2, 4]. Example 3: Input: nums = [1,2,2], n = 5 Output: 0 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 1000 1 &lt;= nums[i] &lt;= 104 nums is sorted in ascending order. 1 &lt;= n &lt;= 231 - 1"
  },
  {
    "number": 331,
    "title": "Verify Preorder Serialization of a Binary Tree",
    "titleSlug": "verify-preorder-serialization-of-a-binary-tree",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Stack",
      "Tree",
      "Binary Tree"
    ],
    "description": "One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node&#39;s value. If it is a null node, we record using a sentinel value such as &#39;#&#39;. For example, the above binary tree can be serialized to the string &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;, where &#39;#&#39; represents a null node. Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree. It is guaranteed that each comma-separated value in the string must be either an integer or a character &#39;#&#39; representing null pointer. You may assume that the input format is always valid. For example, it could never contain two consecutive commas, such as &quot;1,,3&quot;. Note:&nbsp;You are not allowed to reconstruct the tree. &nbsp; Example 1: Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\" Output: true Example 2: Input: preorder = \"1,#\" Output: false Example 3: Input: preorder = \"9,#,#,1\" Output: false &nbsp; Constraints: 1 &lt;= preorder.length &lt;= 104 preorder consist of integers in the range [0, 100] and &#39;#&#39; separated by commas &#39;,&#39;."
  },
  {
    "number": 332,
    "title": "Reconstruct Itinerary",
    "titleSlug": "reconstruct-itinerary",
    "difficulty": "Hard",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "description": "You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it. All of the tickets belong to a man who departs from &quot;JFK&quot;, thus, the itinerary must begin with &quot;JFK&quot;. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [&quot;JFK&quot;, &quot;LGA&quot;] has a smaller lexical order than [&quot;JFK&quot;, &quot;LGB&quot;]. You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once. &nbsp; Example 1: Input: tickets = [[&quot;MUC&quot;,&quot;LHR&quot;],[&quot;JFK&quot;,&quot;MUC&quot;],[&quot;SFO&quot;,&quot;SJC&quot;],[&quot;LHR&quot;,&quot;SFO&quot;]] Output: [&quot;JFK&quot;,&quot;MUC&quot;,&quot;LHR&quot;,&quot;SFO&quot;,&quot;SJC&quot;] Example 2: Input: tickets = [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]] Output: [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;] Explanation: Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;] but it is larger in lexical order. &nbsp; Constraints: 1 &lt;= tickets.length &lt;= 300 tickets[i].length == 2 fromi.length == 3 toi.length == 3 fromi and toi consist of uppercase English letters. fromi != toi"
  },
  {
    "number": 333,
    "title": "Largest BST Subtree",
    "titleSlug": "largest-bst-subtree",
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 334,
    "title": "Increasing Triplet Subsequence",
    "titleSlug": "increasing-triplet-subsequence",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Greedy"
    ],
    "description": "Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i &lt; j &lt; k and nums[i] &lt; nums[j] &lt; nums[k]. If no such indices exists, return false. &nbsp; Example 1: Input: nums = [1,2,3,4,5] Output: true Explanation: Any triplet where i &lt; j &lt; k is valid. Example 2: Input: nums = [5,4,3,2,1] Output: false Explanation: No triplet exists. Example 3: Input: nums = [2,1,5,0,4,6] Output: true Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 5 * 105 -231 &lt;= nums[i] &lt;= 231 - 1 &nbsp; Follow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?"
  },
  {
    "number": 335,
    "title": "Self Crossing",
    "titleSlug": "self-crossing",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "You are given an array of integers distance. You start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise. Return true if your path crosses itself or false if it does not. &nbsp; Example 1: Input: distance = [2,1,1,2] Output: true Explanation: The path crosses itself at the point (0, 1). Example 2: Input: distance = [1,2,3,4] Output: false Explanation: The path does not cross itself at any point. Example 3: Input: distance = [1,1,1,2,1] Output: true Explanation: The path crosses itself at the point (0, 0). &nbsp; Constraints: 1 &lt;=&nbsp;distance.length &lt;= 105 1 &lt;=&nbsp;distance[i] &lt;= 105"
  },
  {
    "number": 336,
    "title": "Palindrome Pairs",
    "titleSlug": "palindrome-pairs",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Trie"
    ],
    "description": "You are given a 0-indexed array of unique strings words. A palindrome pair is a pair of integers (i, j) such that: 0 &lt;= i, j &lt; words.length, i != j, and words[i] + words[j] (the concatenation of the two strings) is a palindrome. Return an array of all the palindrome pairs of words. You must write an algorithm with&nbsp;O(sum of words[i].length)&nbsp;runtime complexity. &nbsp; Example 1: Input: words = [&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;] Output: [[0,1],[1,0],[3,2],[2,4]] Explanation: The palindromes are [&quot;abcddcba&quot;,&quot;dcbaabcd&quot;,&quot;slls&quot;,&quot;llssssll&quot;] Example 2: Input: words = [&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;] Output: [[0,1],[1,0]] Explanation: The palindromes are [&quot;battab&quot;,&quot;tabbat&quot;] Example 3: Input: words = [&quot;a&quot;,&quot;&quot;] Output: [[0,1],[1,0]] Explanation: The palindromes are [&quot;a&quot;,&quot;a&quot;] &nbsp; Constraints: 1 &lt;= words.length &lt;= 5000 0 &lt;= words[i].length &lt;= 300 words[i] consists of lowercase English letters."
  },
  {
    "number": 337,
    "title": "House Robber III",
    "titleSlug": "house-robber-iii",
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root. Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night. Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police. &nbsp; Example 1: Input: root = [3,2,3,null,3,null,1] Output: 7 Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7. Example 2: Input: root = [3,4,5,1,3,null,1] Output: 9 Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9. &nbsp; Constraints: The number of nodes in the tree is in the range [1, 104]. 0 &lt;= Node.val &lt;= 104"
  },
  {
    "number": 338,
    "title": "Counting Bits",
    "titleSlug": "counting-bits",
    "difficulty": "Easy",
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "Given an integer n, return an array ans of length n + 1 such that for each i (0 &lt;= i &lt;= n), ans[i] is the number of 1&#39;s in the binary representation of i. &nbsp; Example 1: Input: n = 2 Output: [0,1,1] Explanation: 0 --&gt; 0 1 --&gt; 1 2 --&gt; 10 Example 2: Input: n = 5 Output: [0,1,1,2,1,2] Explanation: 0 --&gt; 0 1 --&gt; 1 2 --&gt; 10 3 --&gt; 11 4 --&gt; 100 5 --&gt; 101 &nbsp; Constraints: 0 &lt;= n &lt;= 105 &nbsp; Follow up: It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass? Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?"
  },
  {
    "number": 339,
    "title": "Nested List Weight Sum",
    "titleSlug": "nested-list-weight-sum",
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": ""
  },
  {
    "number": 340,
    "title": "Longest Substring with At Most K Distinct Characters",
    "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": ""
  },
  {
    "number": 341,
    "title": "Flatten Nested List Iterator",
    "titleSlug": "flatten-nested-list-iterator",
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Design",
      "Queue",
      "Iterator"
    ],
    "description": "You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it. Implement the NestedIterator class: NestedIterator(List&lt;NestedInteger&gt; nestedList) Initializes the iterator with the nested list nestedList. int next() Returns the next integer in the nested list. boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise. Your code will be tested with the following pseudocode: initialize iterator with nestedList res = [] while iterator.hasNext() append iterator.next() to the end of res return res If res matches the expected flattened list, then your code will be judged as correct. &nbsp; Example 1: Input: nestedList = [[1,1],2,[1,1]] Output: [1,1,2,1,1] Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1]. Example 2: Input: nestedList = [1,[4,[6]]] Output: [1,4,6] Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]. &nbsp; Constraints: 1 &lt;= nestedList.length &lt;= 500 The values of the integers in the nested list is in the range [-106, 106]."
  },
  {
    "number": 342,
    "title": "Power of Four",
    "titleSlug": "power-of-four",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Bit Manipulation",
      "Recursion"
    ],
    "description": "Given an integer n, return true if it is a power of four. Otherwise, return false. An integer n is a power of four, if there exists an integer x such that n == 4x. &nbsp; Example 1: Input: n = 16 Output: true Example 2: Input: n = 5 Output: false Example 3: Input: n = 1 Output: true &nbsp; Constraints: -231 &lt;= n &lt;= 231 - 1 &nbsp; Follow up: Could you solve it without loops/recursion?"
  },
  {
    "number": 343,
    "title": "Integer Break",
    "titleSlug": "integer-break",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "description": "Given an integer n, break it into the sum of k positive integers, where k &gt;= 2, and maximize the product of those integers. Return the maximum product you can get. &nbsp; Example 1: Input: n = 2 Output: 1 Explanation: 2 = 1 + 1, 1 &times; 1 = 1. Example 2: Input: n = 10 Output: 36 Explanation: 10 = 3 + 3 + 4, 3 &times; 3 &times; 4 = 36. &nbsp; Constraints: 2 &lt;= n &lt;= 58"
  },
  {
    "number": 344,
    "title": "Reverse String",
    "titleSlug": "reverse-string",
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": "Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory. &nbsp; Example 1: Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"] Output: [\"o\",\"l\",\"l\",\"e\",\"h\"] Example 2: Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"] &nbsp; Constraints: 1 &lt;= s.length &lt;= 105 s[i] is a printable ascii character."
  },
  {
    "number": 345,
    "title": "Reverse Vowels of a String",
    "titleSlug": "reverse-vowels-of-a-string",
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s, reverse only all the vowels in the string and return it. The vowels are &#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, and &#39;u&#39;, and they can appear in both lower and upper cases, more than once. &nbsp; Example 1: Input: s = &quot;IceCreAm&quot; Output: &quot;AceCreIm&quot; Explanation: The vowels in s are [&#39;I&#39;, &#39;e&#39;, &#39;e&#39;, &#39;A&#39;]. On reversing the vowels, s becomes &quot;AceCreIm&quot;. Example 2: Input: s = &quot;leetcode&quot; Output: &quot;leotcede&quot; &nbsp; Constraints: 1 &lt;= s.length &lt;= 3 * 105 s consist of printable ASCII characters."
  },
  {
    "number": 346,
    "title": "Moving Average from Data Stream",
    "titleSlug": "moving-average-from-data-stream",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Design",
      "Queue",
      "Data Stream"
    ],
    "description": ""
  },
  {
    "number": 347,
    "title": "Top K Frequent Elements",
    "titleSlug": "top-k-frequent-elements",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
      "Quickselect"
    ],
    "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order. &nbsp; Example 1: Input: nums = [1,1,1,2,2,3], k = 2 Output: [1,2] Example 2: Input: nums = [1], k = 1 Output: [1] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 -104 &lt;= nums[i] &lt;= 104 k is in the range [1, the number of unique elements in the array]. It is guaranteed that the answer is unique. &nbsp; Follow up: Your algorithm&#39;s time complexity must be better than O(n log n), where n is the array&#39;s size."
  },
  {
    "number": 348,
    "title": "Design Tic-Tac-Toe",
    "titleSlug": "design-tic-tac-toe",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Design",
      "Matrix",
      "Simulation"
    ],
    "description": ""
  },
  {
    "number": 349,
    "title": "Intersection of Two Arrays",
    "titleSlug": "intersection-of-two-arrays",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order. &nbsp; Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4] Explanation: [4,9] is also accepted. &nbsp; Constraints: 1 &lt;= nums1.length, nums2.length &lt;= 1000 0 &lt;= nums1[i], nums2[i] &lt;= 1000"
  },
  {
    "number": 350,
    "title": "Intersection of Two Arrays II",
    "titleSlug": "intersection-of-two-arrays-ii",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order. &nbsp; Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2,2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9] Explanation: [9,4] is also accepted. &nbsp; Constraints: 1 &lt;= nums1.length, nums2.length &lt;= 1000 0 &lt;= nums1[i], nums2[i] &lt;= 1000 &nbsp; Follow up: What if the given array is already sorted? How would you optimize your algorithm? What if nums1&#39;s size is small compared to nums2&#39;s size? Which algorithm is better? What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?"
  },
  {
    "number": 351,
    "title": "Android Unlock Patterns",
    "titleSlug": "android-unlock-patterns",
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": ""
  },
  {
    "number": 352,
    "title": "Data Stream as Disjoint Intervals",
    "titleSlug": "data-stream-as-disjoint-intervals",
    "difficulty": "Hard",
    "tags": [
      "Binary Search",
      "Design",
      "Ordered Set"
    ],
    "description": "Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals. Implement the SummaryRanges class: SummaryRanges() Initializes the object with an empty stream. void addNum(int value) Adds the integer value to the stream. int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti. &nbsp; Example 1: Input [&quot;SummaryRanges&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;] [[], [1], [], [3], [], [7], [], [2], [], [6], []] Output [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]] Explanation SummaryRanges summaryRanges = new SummaryRanges(); summaryRanges.addNum(1); // arr = [1] summaryRanges.getIntervals(); // return [[1, 1]] summaryRanges.addNum(3); // arr = [1, 3] summaryRanges.getIntervals(); // return [[1, 1], [3, 3]] summaryRanges.addNum(7); // arr = [1, 3, 7] summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]] summaryRanges.addNum(2); // arr = [1, 2, 3, 7] summaryRanges.getIntervals(); // return [[1, 3], [7, 7]] summaryRanges.addNum(6); // arr = [1, 2, 3, 6, 7] summaryRanges.getIntervals(); // return [[1, 3], [6, 7]] &nbsp; Constraints: 0 &lt;= value &lt;= 104 At most 3 * 104 calls will be made to addNum and getIntervals. At most 102&nbsp;calls will be made to&nbsp;getIntervals. &nbsp; Follow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?"
  },
  {
    "number": 353,
    "title": "Design Snake Game",
    "titleSlug": "design-snake-game",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Design",
      "Queue",
      "Simulation"
    ],
    "description": ""
  },
  {
    "number": 354,
    "title": "Russian Doll Envelopes",
    "titleSlug": "russian-doll-envelopes",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope. One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope&#39;s width and height. Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other). Note: You cannot rotate an envelope. &nbsp; Example 1: Input: envelopes = [[5,4],[6,4],[6,7],[2,3]] Output: 3 Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]). Example 2: Input: envelopes = [[1,1],[1,1],[1,1]] Output: 1 &nbsp; Constraints: 1 &lt;= envelopes.length &lt;= 105 envelopes[i].length == 2 1 &lt;= wi, hi &lt;= 105"
  },
  {
    "number": 355,
    "title": "Design Twitter",
    "titleSlug": "design-twitter",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Heap (Priority Queue)"
    ],
    "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user&#39;s news feed. Implement the Twitter class: Twitter() Initializes your twitter object. void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId. List&lt;Integer&gt; getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user&#39;s news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent. void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId. void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId. &nbsp; Example 1: Input [&quot;Twitter&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;follow&quot;, &quot;postTweet&quot;, &quot;getNewsFeed&quot;, &quot;unfollow&quot;, &quot;getNewsFeed&quot;] [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]] Output [null, null, [5], null, null, [6, 5], null, [5]] Explanation Twitter twitter = new Twitter(); twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5). twitter.getNewsFeed(1); // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5]. return [5] twitter.follow(1, 2); // User 1 follows user 2. twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6). twitter.getNewsFeed(1); // User 1&#39;s news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5. twitter.unfollow(1, 2); // User 1 unfollows user 2. twitter.getNewsFeed(1); // User 1&#39;s news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2. &nbsp; Constraints: 1 &lt;= userId, followerId, followeeId &lt;= 500 0 &lt;= tweetId &lt;= 104 All the tweets have unique IDs. At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow. A user cannot follow himself."
  },
  {
    "number": 356,
    "title": "Line Reflection",
    "titleSlug": "line-reflection",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Math"
    ],
    "description": ""
  },
  {
    "number": 357,
    "title": "Count Numbers with Unique Digits",
    "titleSlug": "count-numbers-with-unique-digits",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "Given an integer n, return the count of all numbers with unique digits, x, where 0 &lt;= x &lt; 10n. &nbsp; Example 1: Input: n = 2 Output: 91 Explanation: The answer should be the total numbers in the range of 0 &le; x &lt; 100, excluding 11,22,33,44,55,66,77,88,99 Example 2: Input: n = 0 Output: 1 &nbsp; Constraints: 0 &lt;= n &lt;= 8"
  },
  {
    "number": 358,
    "title": "Rearrange String k Distance Apart",
    "titleSlug": "rearrange-string-k-distance-apart",
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Counting"
    ],
    "description": ""
  },
  {
    "number": 359,
    "title": "Logger Rate Limiter",
    "titleSlug": "logger-rate-limiter",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Design",
      "Data Stream"
    ],
    "description": ""
  },
  {
    "number": 360,
    "title": "Sort Transformed Array",
    "titleSlug": "sort-transformed-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Two Pointers",
      "Sorting"
    ],
    "description": ""
  },
  {
    "number": 361,
    "title": "Bomb Enemy",
    "titleSlug": "bomb-enemy",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 362,
    "title": "Design Hit Counter",
    "titleSlug": "design-hit-counter",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Design",
      "Queue",
      "Data Stream"
    ],
    "description": ""
  },
  {
    "number": 363,
    "title": "Max Sum of Rectangle No Larger Than K",
    "titleSlug": "max-sum-of-rectangle-no-larger-than-k",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Matrix",
      "Prefix Sum",
      "Ordered Set"
    ],
    "description": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k. It is guaranteed that there will be a rectangle with a sum no larger than k. &nbsp; Example 1: Input: matrix = [[1,0,1],[0,-2,3]], k = 2 Output: 2 Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2). Example 2: Input: matrix = [[2,2,-1]], k = 3 Output: 3 &nbsp; Constraints: m == matrix.length n == matrix[i].length 1 &lt;= m, n &lt;= 100 -100 &lt;= matrix[i][j] &lt;= 100 -105 &lt;= k &lt;= 105 &nbsp; Follow up: What if the number of rows is much larger than the number of columns?"
  },
  {
    "number": 364,
    "title": "Nested List Weight Sum II",
    "titleSlug": "nested-list-weight-sum-ii",
    "difficulty": "Medium",
    "tags": [
      "Stack",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": ""
  },
  {
    "number": 365,
    "title": "Water and Jug Problem",
    "titleSlug": "water-and-jug-problem",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "You are given two jugs with capacities x liters and y liters. You have an infinite water supply. Return whether the total amount of water in both jugs may reach target using the following operations: Fill either jug completely with water. Completely empty either jug. Pour water from one jug into another until the receiving jug is full, or the transferring jug is empty. &nbsp; Example 1: Input: x = 3, y = 5, target = 4 Output: true Explanation: Follow these steps to reach a total of 4 liters: Fill the 5-liter jug (0, 5). Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3, 2). Empty the 3-liter jug (0, 2). Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2, 0). Fill the 5-liter jug again (2, 5). Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. This leaves 4 liters in the 5-liter jug (3, 4). Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter jug (0, 4). Reference: The Die Hard example. Example 2: Input: x = 2, y = 6, target = 5 Output: false Example 3: Input: x = 1, y = 2, target = 3 Output: true Explanation: Fill both jugs. The total amount of water in both jugs is equal to 3 now. &nbsp; Constraints: 1 &lt;= x, y, target&nbsp;&lt;= 103"
  },
  {
    "number": 366,
    "title": "Find Leaves of Binary Tree",
    "titleSlug": "find-leaves-of-binary-tree",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 367,
    "title": "Valid Perfect Square",
    "titleSlug": "valid-perfect-square",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "description": "Given a positive integer num, return true if num is a perfect square or false otherwise. A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself. You must not use any built-in library function, such as sqrt. &nbsp; Example 1: Input: num = 16 Output: true Explanation: We return true because 4 * 4 = 16 and 4 is an integer. Example 2: Input: num = 14 Output: false Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer. &nbsp; Constraints: 1 &lt;= num &lt;= 231 - 1"
  },
  {
    "number": 368,
    "title": "Largest Divisible Subset",
    "titleSlug": "largest-divisible-subset",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies: answer[i] % answer[j] == 0, or answer[j] % answer[i] == 0 If there are multiple solutions, return any of them. &nbsp; Example 1: Input: nums = [1,2,3] Output: [1,2] Explanation: [1,3] is also accepted. Example 2: Input: nums = [1,2,4,8] Output: [1,2,4,8] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 1000 1 &lt;= nums[i] &lt;= 2 * 109 All the integers in nums are unique."
  },
  {
    "number": 369,
    "title": "Plus One Linked List",
    "titleSlug": "plus-one-linked-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Math"
    ],
    "description": ""
  },
  {
    "number": 370,
    "title": "Range Addition",
    "titleSlug": "range-addition",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Prefix Sum"
    ],
    "description": ""
  },
  {
    "number": 371,
    "title": "Sum of Two Integers",
    "titleSlug": "sum-of-two-integers",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "Given two integers a and b, return the sum of the two integers without using the operators + and -. &nbsp; Example 1: Input: a = 1, b = 2 Output: 3 Example 2: Input: a = 2, b = 3 Output: 5 &nbsp; Constraints: -1000 &lt;= a, b &lt;= 1000"
  },
  {
    "number": 372,
    "title": "Super Pow",
    "titleSlug": "super-pow",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Divide and Conquer"
    ],
    "description": "Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array. &nbsp; Example 1: Input: a = 2, b = [3] Output: 8 Example 2: Input: a = 2, b = [1,0] Output: 1024 Example 3: Input: a = 1, b = [4,3,3,8,5,2] Output: 1 &nbsp; Constraints: 1 &lt;= a &lt;= 231 - 1 1 &lt;= b.length &lt;= 2000 0 &lt;= b[i] &lt;= 9 b does not contain leading zeros."
  },
  {
    "number": 373,
    "title": "Find K Pairs with Smallest Sums",
    "titleSlug": "find-k-pairs-with-smallest-sums",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two integer arrays nums1 and nums2 sorted in non-decreasing&nbsp;order and an integer k. Define a pair (u, v) which consists of one element from the first array and one element from the second array. Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums. &nbsp; Example 1: Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3 Output: [[1,2],[1,4],[1,6]] Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6] Example 2: Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2 Output: [[1,1],[1,1]] Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3] &nbsp; Constraints: 1 &lt;= nums1.length, nums2.length &lt;= 105 -109 &lt;= nums1[i], nums2[i] &lt;= 109 nums1 and nums2 both are sorted in non-decreasing order. 1 &lt;= k &lt;= 104 k &lt;=&nbsp;nums1.length *&nbsp;nums2.length"
  },
  {
    "number": 374,
    "title": "Guess Number Higher or Lower",
    "titleSlug": "guess-number-higher-or-lower",
    "difficulty": "Easy",
    "tags": [
      "Binary Search",
      "Interactive"
    ],
    "description": "We are playing the Guess Game. The game is as follows: I pick a number from 1 to n. You have to guess which number I picked. Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess. You call a pre-defined API int guess(int num), which returns three possible results: -1: Your guess is higher than the number I picked (i.e. num &gt; pick). 1: Your guess is lower than the number I picked (i.e. num &lt; pick). 0: your guess is equal to the number I picked (i.e. num == pick). Return the number that I picked. &nbsp; Example 1: Input: n = 10, pick = 6 Output: 6 Example 2: Input: n = 1, pick = 1 Output: 1 Example 3: Input: n = 2, pick = 1 Output: 1 &nbsp; Constraints: 1 &lt;= n &lt;= 231 - 1 1 &lt;= pick &lt;= n"
  },
  {
    "number": 375,
    "title": "Guess Number Higher or Lower II",
    "titleSlug": "guess-number-higher-or-lower-ii",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "description": "We are playing the Guessing Game. The game will work as follows: I pick a number between&nbsp;1&nbsp;and&nbsp;n. You guess a number. If you guess the right number, you win the game. If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing. Every time you guess a wrong number&nbsp;x, you will pay&nbsp;x&nbsp;dollars. If you run out of money, you lose the game. Given a particular&nbsp;n, return&nbsp;the minimum amount of money you need to&nbsp;guarantee a win regardless of what number I pick. &nbsp; Example 1: Input: n = 10 Output: 16 Explanation: The winning strategy is as follows: - The range is [1,10]. Guess 7. &nbsp; - If this is my number, your total is $0. Otherwise, you pay $7. &nbsp; - If my number is higher, the range is [8,10]. Guess 9. &nbsp; - If this is my number, your total is $7. Otherwise, you pay $9. &nbsp; - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16. &nbsp; - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16. &nbsp; - If my number is lower, the range is [1,6]. Guess 3. &nbsp; - If this is my number, your total is $7. Otherwise, you pay $3. &nbsp; - If my number is higher, the range is [4,6]. Guess 5. &nbsp; - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5. &nbsp; - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15. &nbsp; - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15. &nbsp; - If my number is lower, the range is [1,2]. Guess 1. &nbsp; - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1. &nbsp; - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11. The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win. Example 2: Input: n = 1 Output: 0 Explanation:&nbsp;There is only one possible number, so you can guess 1 and not have to pay anything. Example 3: Input: n = 2 Output: 1 Explanation:&nbsp;There are two possible numbers, 1 and 2. - Guess 1. &nbsp; - If this is my number, your total is $0. Otherwise, you pay $1. &nbsp; - If my number is higher, it must be 2. Guess 2. Your total is $1. The worst case is that you pay $1. &nbsp; Constraints: 1 &lt;= n &lt;= 200"
  },
  {
    "number": 376,
    "title": "Wiggle Subsequence",
    "titleSlug": "wiggle-subsequence",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences. For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative. In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero. A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order. Given an integer array nums, return the length of the longest wiggle subsequence of nums. &nbsp; Example 1: Input: nums = [1,7,4,9,2,5] Output: 6 Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3). Example 2: Input: nums = [1,17,5,10,13,15,10,5,16,8] Output: 7 Explanation: There are several subsequences that achieve this length. One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8). Example 3: Input: nums = [1,2,3,4,5,6,7,8,9] Output: 2 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 1000 0 &lt;= nums[i] &lt;= 1000 &nbsp; Follow up: Could you solve this in O(n) time?"
  },
  {
    "number": 377,
    "title": "Combination Sum IV",
    "titleSlug": "combination-sum-iv",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to&nbsp;target. The test cases are generated so that the answer can fit in a 32-bit integer. &nbsp; Example 1: Input: nums = [1,2,3], target = 4 Output: 7 Explanation: The possible combination ways are: (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) Note that different sequences are counted as different combinations. Example 2: Input: nums = [9], target = 3 Output: 0 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 200 1 &lt;= nums[i] &lt;= 1000 All the elements of nums are unique. 1 &lt;= target &lt;= 1000 &nbsp; Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?"
  },
  {
    "number": 378,
    "title": "Kth Smallest Element in a Sorted Matrix",
    "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix. Note that it is the kth smallest element in the sorted order, not the kth distinct element. You must find a solution with a memory complexity better than O(n2). &nbsp; Example 1: Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8 Output: 13 Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13 Example 2: Input: matrix = [[-5]], k = 1 Output: -5 &nbsp; Constraints: n == matrix.length == matrix[i].length 1 &lt;= n &lt;= 300 -109 &lt;= matrix[i][j] &lt;= 109 All the rows and columns of matrix are guaranteed to be sorted in non-decreasing order. 1 &lt;= k &lt;= n2 &nbsp; Follow up: Could you solve the problem with a constant memory (i.e., O(1) memory complexity)? Could you solve the problem in O(n) time complexity? The solution may be too advanced for an interview but you may find reading this paper fun."
  },
  {
    "number": 379,
    "title": "Design Phone Directory",
    "titleSlug": "design-phone-directory",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Linked List",
      "Design",
      "Queue"
    ],
    "description": ""
  },
  {
    "number": 380,
    "title": "Insert Delete GetRandom O(1)",
    "titleSlug": "insert-delete-getrandom-o1",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Design",
      "Randomized"
    ],
    "description": "Implement the RandomizedSet class: RandomizedSet() Initializes the RandomizedSet object. bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise. bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise. int getRandom() Returns a random element from the current set of elements (it&#39;s guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned. You must implement the functions of the class such that each function works in&nbsp;average&nbsp;O(1)&nbsp;time complexity. &nbsp; Example 1: Input [&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;] [[], [1], [2], [2], [], [1], [2], []] Output [null, true, false, true, 2, true, false, 2] Explanation RandomizedSet randomizedSet = new RandomizedSet(); randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully. randomizedSet.remove(2); // Returns false as 2 does not exist in the set. randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2]. randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly. randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2]. randomizedSet.insert(2); // 2 was already in the set, so return false. randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2. &nbsp; Constraints: -231 &lt;= val &lt;= 231 - 1 At most 2 *&nbsp;105 calls will be made to insert, remove, and getRandom. There will be at least one element in the data structure when getRandom is called."
  },
  {
    "number": 381,
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Design",
      "Randomized"
    ],
    "description": "RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element. Implement the RandomizedCollection class: RandomizedCollection() Initializes the empty RandomizedCollection object. bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise. bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them. int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains. You must implement the functions of the class such that each function works on average O(1) time complexity. Note: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection. &nbsp; Example 1: Input [&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;] [[], [1], [1], [2], [], [1], []] Output [null, true, false, true, 2, true, 1] Explanation RandomizedCollection randomizedCollection = new RandomizedCollection(); randomizedCollection.insert(1); // return true since the collection does not contain 1. // Inserts 1 into the collection. randomizedCollection.insert(1); // return false since the collection contains 1. // Inserts another 1 into the collection. Collection now contains [1,1]. randomizedCollection.insert(2); // return true since the collection does not contain 2. // Inserts 2 into the collection. Collection now contains [1,1,2]. randomizedCollection.getRandom(); // getRandom should: // - return 1 with probability 2/3, or // - return 2 with probability 1/3. randomizedCollection.remove(1); // return true since the collection contains 1. // Removes 1 from the collection. Collection now contains [1,2]. randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely. &nbsp; Constraints: -231 &lt;= val &lt;= 231 - 1 At most 2 * 105 calls in total will be made to insert, remove, and getRandom. There will be at least one element in the data structure when getRandom is called."
  },
  {
    "number": 382,
    "title": "Linked List Random Node",
    "titleSlug": "linked-list-random-node",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "description": "Given a singly linked list, return a random node&#39;s value from the linked list. Each node must have the same probability of being chosen. Implement the Solution class: Solution(ListNode head) Initializes the object with the head of the singly-linked list head. int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen. &nbsp; Example 1: Input [&quot;Solution&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;] [[[1, 2, 3]], [], [], [], [], []] Output [null, 1, 3, 2, 2, 3] Explanation Solution solution = new Solution([1, 2, 3]); solution.getRandom(); // return 1 solution.getRandom(); // return 3 solution.getRandom(); // return 2 solution.getRandom(); // return 2 solution.getRandom(); // return 3 // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning. &nbsp; Constraints: The number of nodes in the linked list will be in the range [1, 104]. -104 &lt;= Node.val &lt;= 104 At most 104 calls will be made to getRandom. &nbsp; Follow up: What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?"
  },
  {
    "number": 383,
    "title": "Ransom Note",
    "titleSlug": "ransom-note",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise. Each letter in magazine can only be used once in ransomNote. &nbsp; Example 1: Input: ransomNote = \"a\", magazine = \"b\" Output: false Example 2: Input: ransomNote = \"aa\", magazine = \"ab\" Output: false Example 3: Input: ransomNote = \"aa\", magazine = \"aab\" Output: true &nbsp; Constraints: 1 &lt;= ransomNote.length, magazine.length &lt;= 105 ransomNote and magazine consist of lowercase English letters."
  },
  {
    "number": 384,
    "title": "Shuffle an Array",
    "titleSlug": "shuffle-an-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Design",
      "Randomized"
    ],
    "description": "Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling. Implement the Solution class: Solution(int[] nums) Initializes the object with the integer array nums. int[] reset() Resets the array to its original configuration and returns it. int[] shuffle() Returns a random shuffling of the array. &nbsp; Example 1: Input [&quot;Solution&quot;, &quot;shuffle&quot;, &quot;reset&quot;, &quot;shuffle&quot;] [[[1, 2, 3]], [], [], []] Output [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]] Explanation Solution solution = new Solution([1, 2, 3]); solution.shuffle(); // Shuffle the array [1,2,3] and return its result. // Any permutation of [1,2,3] must be equally likely to be returned. // Example: return [3, 1, 2] solution.reset(); // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3] solution.shuffle(); // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 50 -106 &lt;= nums[i] &lt;= 106 All the elements of nums are unique. At most 104 calls in total will be made to reset and shuffle."
  },
  {
    "number": 385,
    "title": "Mini Parser",
    "titleSlug": "mini-parser",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Stack",
      "Depth-First Search"
    ],
    "description": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger. Each element is either an integer or a list whose elements may also be integers or other lists. &nbsp; Example 1: Input: s = &quot;324&quot; Output: 324 Explanation: You should return a NestedInteger object which contains a single integer 324. Example 2: Input: s = &quot;[123,[456,[789]]]&quot; Output: [123,[456,[789]]] Explanation: Return a NestedInteger object containing a nested list with 2 elements: 1. An integer containing value 123. 2. A nested list containing two elements: i. An integer containing value 456. ii. A nested list with one element: a. An integer containing value 789 &nbsp; Constraints: 1 &lt;= s.length &lt;= 5 * 104 s consists of digits, square brackets &quot;[]&quot;, negative sign &#39;-&#39;, and commas &#39;,&#39;. s is the serialization of valid NestedInteger. All the values in the input are in the range [-106, 106]."
  },
  {
    "number": 386,
    "title": "Lexicographical Numbers",
    "titleSlug": "lexicographical-numbers",
    "difficulty": "Medium",
    "tags": [
      "Depth-First Search",
      "Trie"
    ],
    "description": "Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order. You must write an algorithm that runs in&nbsp;O(n)&nbsp;time and uses O(1) extra space.&nbsp; &nbsp; Example 1: Input: n = 13 Output: [1,10,11,12,13,2,3,4,5,6,7,8,9] Example 2: Input: n = 2 Output: [1,2] &nbsp; Constraints: 1 &lt;= n &lt;= 5 * 104"
  },
  {
    "number": 387,
    "title": "First Unique Character in a String",
    "titleSlug": "first-unique-character-in-a-string",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String",
      "Queue",
      "Counting"
    ],
    "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1. &nbsp; Example 1: Input: s = &quot;leetcode&quot; Output: 0 Explanation: The character &#39;l&#39; at index 0 is the first character that does not occur at any other index. Example 2: Input: s = &quot;loveleetcode&quot; Output: 2 Example 3: Input: s = &quot;aabb&quot; Output: -1 &nbsp; Constraints: 1 &lt;= s.length &lt;= 105 s consists of only lowercase English letters."
  },
  {
    "number": 388,
    "title": "Longest Absolute File Path",
    "titleSlug": "longest-absolute-file-path",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Stack",
      "Depth-First Search"
    ],
    "description": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture: Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext. In text form, it looks like this (with ⟶ representing the tab character): dir ⟶ subdir1 ⟶ ⟶ file1.ext ⟶ ⟶ subsubdir1 ⟶ subdir2 ⟶ ⟶ subsubdir2 ⟶ ⟶ ⟶ file2.ext If we were to write this representation in code, it will look like this: &quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;. Note that the &#39;\\n&#39; and &#39;\\t&#39; are the new-line and tab characters. Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by &#39;/&#39;s. Using the above example, the absolute path to file2.ext is &quot;dir/subdir2/subsubdir2/file2.ext&quot;. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces. Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0. Note that the testcases are generated such that the file system is valid and no file or directory name has length 0. &nbsp; Example 1: Input: input = &quot;dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext&quot; Output: 20 Explanation: We have only one file, and the absolute path is &quot;dir/subdir2/file.ext&quot; of length 20. Example 2: Input: input = &quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot; Output: 32 Explanation: We have two files: &quot;dir/subdir1/file1.ext&quot; of length 21 &quot;dir/subdir2/subsubdir2/file2.ext&quot; of length 32. We return 32 since it is the longest absolute path to a file. Example 3: Input: input = &quot;a&quot; Output: 0 Explanation: We do not have any files, just a single directory named &quot;a&quot;. &nbsp; Constraints: 1 &lt;= input.length &lt;= 104 input may contain lowercase or uppercase English letters, a new line character &#39;\\n&#39;, a tab character &#39;\\t&#39;, a dot &#39;.&#39;, a space &#39; &#39;, and digits. All file and directory names have positive length."
  },
  {
    "number": 389,
    "title": "Find the Difference",
    "titleSlug": "find-the-difference",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sorting"
    ],
    "description": "You are given two strings s and t. String t is generated by random shuffling string s and then add one more letter at a random position. Return the letter that was added to t. &nbsp; Example 1: Input: s = &quot;abcd&quot;, t = &quot;abcde&quot; Output: &quot;e&quot; Explanation: &#39;e&#39; is the letter that was added. Example 2: Input: s = &quot;&quot;, t = &quot;y&quot; Output: &quot;y&quot; &nbsp; Constraints: 0 &lt;= s.length &lt;= 1000 t.length == s.length + 1 s and t consist of lowercase English letters."
  },
  {
    "number": 390,
    "title": "Elimination Game",
    "titleSlug": "elimination-game",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Recursion"
    ],
    "description": "You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr: Starting from left to right, remove the first number and every other number afterward until you reach the end of the list. Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers. Keep repeating the steps again, alternating left to right and right to left, until a single number remains. Given the integer n, return the last number that remains in arr. &nbsp; Example 1: Input: n = 9 Output: 6 Explanation: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] arr = [2, 4, 6, 8] arr = [2, 6] arr = [6] Example 2: Input: n = 1 Output: 1 &nbsp; Constraints: 1 &lt;= n &lt;= 109"
  },
  {
    "number": 391,
    "title": "Perfect Rectangle",
    "titleSlug": "perfect-rectangle",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Line Sweep"
    ],
    "description": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi). Return true if all the rectangles together form an exact cover of a rectangular region. &nbsp; Example 1: Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]] Output: true Explanation: All 5 rectangles together form an exact cover of a rectangular region. Example 2: Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]] Output: false Explanation: Because there is a gap between the two rectangular regions. Example 3: Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]] Output: false Explanation: Because two of the rectangles overlap with each other. &nbsp; Constraints: 1 &lt;= rectangles.length &lt;= 2 * 104 rectangles[i].length == 4 -105 &lt;= xi &lt; ai &lt;= 105 -105 &lt;= yi &lt; bi &lt;= 105"
  },
  {
    "number": 392,
    "title": "Is Subsequence",
    "titleSlug": "is-subsequence",
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., &quot;ace&quot; is a subsequence of &quot;abcde&quot; while &quot;aec&quot; is not). &nbsp; Example 1: Input: s = \"abc\", t = \"ahbgdc\" Output: true Example 2: Input: s = \"axc\", t = \"ahbgdc\" Output: false &nbsp; Constraints: 0 &lt;= s.length &lt;= 100 0 &lt;= t.length &lt;= 104 s and t consist only of lowercase English letters. &nbsp; Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k &gt;= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?"
  },
  {
    "number": 393,
    "title": "UTF-8 Validation",
    "titleSlug": "utf-8-validation",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters). A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules: For a 1-byte character, the first bit is a 0, followed by its Unicode code. For an n-bytes character, the first n bits are all one&#39;s, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10. This is how the UTF-8 encoding would work: Number of Bytes | UTF-8 Octet Sequence | (binary) --------------------+----------------------------------------- 1 | 0xxxxxxx 2 | 110xxxxx 10xxxxxx 3 | 1110xxxx 10xxxxxx 10xxxxxx 4 | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx x denotes a bit in the binary form of a byte that may be either 0 or 1. Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data. &nbsp; Example 1: Input: data = [197,130,1] Output: true Explanation: data represents the octet sequence: 11000101 10000010 00000001. It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character. Example 2: Input: data = [235,140,4] Output: false Explanation: data represented the octet sequence: 11101011 10001100 00000100. The first 3 bits are all one&#39;s and the 4th bit is 0 means it is a 3-bytes character. The next byte is a continuation byte which starts with 10 and that&#39;s correct. But the second continuation byte does not start with 10, so it is invalid. &nbsp; Constraints: 1 &lt;= data.length &lt;= 2 * 104 0 &lt;= data[i] &lt;= 255"
  },
  {
    "number": 394,
    "title": "Decode String",
    "titleSlug": "decode-string",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Stack",
      "Recursion"
    ],
    "description": "Given an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer. You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4]. The test cases are generated so that the length of the output will never exceed 105. &nbsp; Example 1: Input: s = &quot;3[a]2[bc]&quot; Output: &quot;aaabcbc&quot; Example 2: Input: s = &quot;3[a2[c]]&quot; Output: &quot;accaccacc&quot; Example 3: Input: s = &quot;2[abc]3[cd]ef&quot; Output: &quot;abcabccdcdcdef&quot; &nbsp; Constraints: 1 &lt;= s.length &lt;= 30 s consists of lowercase English letters, digits, and square brackets &#39;[]&#39;. s is guaranteed to be a valid input. All the integers in s are in the range [1, 300]."
  },
  {
    "number": 395,
    "title": "Longest Substring with At Least K Repeating Characters",
    "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Divide and Conquer",
      "Sliding Window"
    ],
    "description": "Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k. if no such substring exists, return 0. &nbsp; Example 1: Input: s = &quot;aaabb&quot;, k = 3 Output: 3 Explanation: The longest substring is &quot;aaa&quot;, as &#39;a&#39; is repeated 3 times. Example 2: Input: s = &quot;ababbc&quot;, k = 2 Output: 5 Explanation: The longest substring is &quot;ababb&quot;, as &#39;a&#39; is repeated 2 times and &#39;b&#39; is repeated 3 times. &nbsp; Constraints: 1 &lt;= s.length &lt;= 104 s consists of only lowercase English letters. 1 &lt;= k &lt;= 105"
  },
  {
    "number": 396,
    "title": "Rotate Function",
    "titleSlug": "rotate-function",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums of length n. Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow: F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1]. Return the maximum value of F(0), F(1), ..., F(n-1). The test cases are generated so that the answer fits in a 32-bit integer. &nbsp; Example 1: Input: nums = [4,3,2,6] Output: 26 Explanation: F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25 F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16 F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23 F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26 So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26. Example 2: Input: nums = [100] Output: 0 &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 105 -100 &lt;= nums[i] &lt;= 100"
  },
  {
    "number": 397,
    "title": "Integer Replacement",
    "titleSlug": "integer-replacement",
    "difficulty": "Medium",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Bit Manipulation",
      "Memoization"
    ],
    "description": "Given a positive integer n,&nbsp;you can apply one of the following&nbsp;operations: If n is even, replace n with n / 2. If n is odd, replace n with either n + 1 or n - 1. Return the minimum number of operations needed for n to become 1. &nbsp; Example 1: Input: n = 8 Output: 3 Explanation: 8 -&gt; 4 -&gt; 2 -&gt; 1 Example 2: Input: n = 7 Output: 4 Explanation: 7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 or 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1 Example 3: Input: n = 4 Output: 2 &nbsp; Constraints: 1 &lt;= n &lt;= 231 - 1"
  },
  {
    "number": 398,
    "title": "Random Pick Index",
    "titleSlug": "random-pick-index",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "description": "Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array. Implement the Solution class: Solution(int[] nums) Initializes the object with the array nums. int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i&#39;s, then each index should have an equal probability of returning. &nbsp; Example 1: Input [&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;] [[[1, 2, 3, 3, 3]], [3], [1], [3]] Output [null, 4, 0, 2] Explanation Solution solution = new Solution([1, 2, 3, 3, 3]); solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning. solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1. solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 2 * 104 -231 &lt;= nums[i] &lt;= 231 - 1 target is an integer from nums. At most 104 calls will be made to pick."
  },
  {
    "number": 399,
    "title": "Evaluate Division",
    "titleSlug": "evaluate-division",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Shortest Path"
    ],
    "description": "You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable. You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?. Return the answers to all queries. If a single answer cannot be determined, return -1.0. Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction. Note:&nbsp;The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them. &nbsp; Example 1: Input: equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]] Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000] Explanation: Given: a / b = 2.0, b / c = 3.0 queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? return: [6.0, 0.5, -1.0, 1.0, -1.0 ] note: x is undefined =&gt; -1.0 Example 2: Input: equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;],[&quot;bc&quot;,&quot;cd&quot;]], values = [1.5,2.5,5.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;c&quot;,&quot;b&quot;],[&quot;bc&quot;,&quot;cd&quot;],[&quot;cd&quot;,&quot;bc&quot;]] Output: [3.75000,0.40000,5.00000,0.20000] Example 3: Input: equations = [[&quot;a&quot;,&quot;b&quot;]], values = [0.5], queries = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;c&quot;],[&quot;x&quot;,&quot;y&quot;]] Output: [0.50000,2.00000,-1.00000,-1.00000] &nbsp; Constraints: 1 &lt;= equations.length &lt;= 20 equations[i].length == 2 1 &lt;= Ai.length, Bi.length &lt;= 5 values.length == equations.length 0.0 &lt; values[i] &lt;= 20.0 1 &lt;= queries.length &lt;= 20 queries[i].length == 2 1 &lt;= Cj.length, Dj.length &lt;= 5 Ai, Bi, Cj, Dj consist of lower case English letters and digits."
  },
  {
    "number": 400,
    "title": "Nth Digit",
    "titleSlug": "nth-digit",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "description": "Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]. &nbsp; Example 1: Input: n = 3 Output: 3 Example 2: Input: n = 11 Output: 0 Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10. &nbsp; Constraints: 1 &lt;= n &lt;= 231 - 1"
  },
  {
    "number": 401,
    "title": "Binary Watch",
    "titleSlug": "binary-watch",
    "difficulty": "Easy",
    "tags": [
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent&nbsp;the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right. For example, the below binary watch reads &quot;4:51&quot;. Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order. The hour must not contain a leading zero. For example, &quot;01:00&quot; is not valid. It should be &quot;1:00&quot;. The minute must&nbsp;consist of two digits and may contain a leading zero. For example, &quot;10:2&quot; is not valid. It should be &quot;10:02&quot;. &nbsp; Example 1: Input: turnedOn = 1 Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"] Example 2: Input: turnedOn = 9 Output: [] &nbsp; Constraints: 0 &lt;= turnedOn &lt;= 10"
  },
  {
    "number": 402,
    "title": "Remove K Digits",
    "titleSlug": "remove-k-digits",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num. &nbsp; Example 1: Input: num = &quot;1432219&quot;, k = 3 Output: &quot;1219&quot; Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest. Example 2: Input: num = &quot;10200&quot;, k = 1 Output: &quot;200&quot; Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes. Example 3: Input: num = &quot;10&quot;, k = 2 Output: &quot;0&quot; Explanation: Remove all the digits from the number and it is left with nothing which is 0. &nbsp; Constraints: 1 &lt;= k &lt;= num.length &lt;= 105 num consists of only digits. num does not have any leading zeros except for the zero itself."
  },
  {
    "number": 403,
    "title": "Frog Jump",
    "titleSlug": "frog-jump",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water. Given a list of stones&nbsp;positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit. If the frog&#39;s last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction. &nbsp; Example 1: Input: stones = [0,1,3,5,6,8,12,17] Output: true Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone. Example 2: Input: stones = [0,1,2,3,4,8,9,11] Output: false Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large. &nbsp; Constraints: 2 &lt;= stones.length &lt;= 2000 0 &lt;= stones[i] &lt;= 231 - 1 stones[0] == 0 stones&nbsp;is sorted in a strictly increasing order."
  },
  {
    "number": 404,
    "title": "Sum of Left Leaves",
    "titleSlug": "sum-of-left-leaves",
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the sum of all left leaves. A leaf is a node with no children. A left leaf is a leaf that is the left child of another node. &nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: 24 Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively. Example 2: Input: root = [1] Output: 0 &nbsp; Constraints: The number of nodes in the tree is in the range [1, 1000]. -1000 &lt;= Node.val &lt;= 1000"
  },
  {
    "number": 405,
    "title": "Convert a Number to Hexadecimal",
    "titleSlug": "convert-a-number-to-hexadecimal",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "Given a 32-bit integer num, return a string representing its hexadecimal representation. For negative integers, two&rsquo;s complement method is used. All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself. Note:&nbsp;You are not allowed to use any built-in library method to directly solve this problem. &nbsp; Example 1: Input: num = 26 Output: \"1a\" Example 2: Input: num = -1 Output: \"ffffffff\" &nbsp; Constraints: -231 &lt;= num &lt;= 231 - 1"
  },
  {
    "number": 406,
    "title": "Queue Reconstruction by Height",
    "titleSlug": "queue-reconstruction-by-height",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Indexed Tree",
      "Segment Tree",
      "Sorting"
    ],
    "description": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi. Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue). &nbsp; Example 1: Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]] Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] Explanation: Person 0 has height 5 with no other people taller or the same height in front. Person 1 has height 7 with no other people taller or the same height in front. Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1. Person 3 has height 6 with one person taller or the same height in front, which is person 1. Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3. Person 5 has height 7 with one person taller or the same height in front, which is person 1. Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue. Example 2: Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]] Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]] &nbsp; Constraints: 1 &lt;= people.length &lt;= 2000 0 &lt;= hi &lt;= 106 0 &lt;= ki &lt; people.length It is guaranteed that the queue can be reconstructed."
  },
  {
    "number": 407,
    "title": "Trapping Rain Water II",
    "titleSlug": "trapping-rain-water-ii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Breadth-First Search",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining. &nbsp; Example 1: Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] Output: 4 Explanation: After the rain, water is trapped between the blocks. We have two small ponds 1 and 3 units trapped. The total volume of water trapped is 4. Example 2: Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]] Output: 10 &nbsp; Constraints: m == heightMap.length n == heightMap[i].length 1 &lt;= m, n &lt;= 200 0 &lt;= heightMap[i][j] &lt;= 2 * 104"
  },
  {
    "number": 408,
    "title": "Valid Word Abbreviation",
    "titleSlug": "valid-word-abbreviation",
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": ""
  },
  {
    "number": 409,
    "title": "Longest Palindrome",
    "titleSlug": "longest-palindrome",
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String",
      "Greedy"
    ],
    "description": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome&nbsp;that can be built with those letters. Letters are case sensitive, for example, &quot;Aa&quot; is not considered a palindrome. &nbsp; Example 1: Input: s = &quot;abccccdd&quot; Output: 7 Explanation: One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7. Example 2: Input: s = &quot;a&quot; Output: 1 Explanation: The longest palindrome that can be built is &quot;a&quot;, whose length is 1. &nbsp; Constraints: 1 &lt;= s.length &lt;= 2000 s consists of lowercase and/or uppercase English&nbsp;letters only."
  },
  {
    "number": 410,
    "title": "Split Array Largest Sum",
    "titleSlug": "split-array-largest-sum",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized. Return the minimized largest sum of the split. A subarray is a contiguous part of the array. &nbsp; Example 1: Input: nums = [7,2,5,10,8], k = 2 Output: 18 Explanation: There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. Example 2: Input: nums = [1,2,3,4,5], k = 2 Output: 9 Explanation: There are four ways to split nums into two subarrays. The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 1000 0 &lt;= nums[i] &lt;= 106 1 &lt;= k &lt;= min(50, nums.length)"
  },
  {
    "number": 411,
    "title": "Minimum Unique Word Abbreviation",
    "titleSlug": "minimum-unique-word-abbreviation",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": ""
  },
  {
    "number": 412,
    "title": "Fizz Buzz",
    "titleSlug": "fizz-buzz",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "Given an integer n, return a string array answer (1-indexed) where: answer[i] == &quot;FizzBuzz&quot; if i is divisible by 3 and 5. answer[i] == &quot;Fizz&quot; if i is divisible by 3. answer[i] == &quot;Buzz&quot; if i is divisible by 5. answer[i] == i (as a string) if none of the above conditions are true. &nbsp; Example 1: Input: n = 3 Output: [\"1\",\"2\",\"Fizz\"] Example 2: Input: n = 5 Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"] Example 3: Input: n = 15 Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"] &nbsp; Constraints: 1 &lt;= n &lt;= 104"
  },
  {
    "number": 413,
    "title": "Arithmetic Slices",
    "titleSlug": "arithmetic-slices",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": "An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences. Given an integer array nums, return the number of arithmetic subarrays of nums. A subarray is a contiguous subsequence of the array. &nbsp; Example 1: Input: nums = [1,2,3,4] Output: 3 Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself. Example 2: Input: nums = [1] Output: 0 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 5000 -1000 &lt;= nums[i] &lt;= 1000"
  },
  {
    "number": 414,
    "title": "Third Maximum Number",
    "titleSlug": "third-maximum-number",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Sorting"
    ],
    "description": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number. &nbsp; Example 1: Input: nums = [3,2,1] Output: 1 Explanation: The first distinct maximum is 3. The second distinct maximum is 2. The third distinct maximum is 1. Example 2: Input: nums = [1,2] Output: 2 Explanation: The first distinct maximum is 2. The second distinct maximum is 1. The third distinct maximum does not exist, so the maximum (2) is returned instead. Example 3: Input: nums = [2,2,3,1] Output: 1 Explanation: The first distinct maximum is 3. The second distinct maximum is 2 (both 2&#39;s are counted together since they have the same value). The third distinct maximum is 1. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 104 -231 &lt;= nums[i] &lt;= 231 - 1 &nbsp; Follow up: Can you find an O(n) solution?"
  },
  {
    "number": 415,
    "title": "Add Strings",
    "titleSlug": "add-strings",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string. You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly. &nbsp; Example 1: Input: num1 = &quot;11&quot;, num2 = &quot;123&quot; Output: &quot;134&quot; Example 2: Input: num1 = &quot;456&quot;, num2 = &quot;77&quot; Output: &quot;533&quot; Example 3: Input: num1 = &quot;0&quot;, num2 = &quot;0&quot; Output: &quot;0&quot; &nbsp; Constraints: 1 &lt;= num1.length, num2.length &lt;= 104 num1 and num2 consist of only digits. num1 and num2 don&#39;t have any leading zeros except for the zero itself."
  },
  {
    "number": 416,
    "title": "Partition Equal Subset Sum",
    "titleSlug": "partition-equal-subset-sum",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise. &nbsp; Example 1: Input: nums = [1,5,11,5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2: Input: nums = [1,2,3,5] Output: false Explanation: The array cannot be partitioned into equal sum subsets. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 200 1 &lt;= nums[i] &lt;= 100"
  },
  {
    "number": 417,
    "title": "Pacific Atlantic Water Flow",
    "titleSlug": "pacific-atlantic-water-flow",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island&#39;s left and top edges, and the Atlantic Ocean touches the island&#39;s right and bottom edges. The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c). The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell&#39;s height is less than or equal to the current cell&#39;s height. Water can flow from any cell adjacent to an ocean into the ocean. Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans. &nbsp; Example 1: Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]] Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below: [0,4]: [0,4] -&gt; Pacific Ocean &nbsp; [0,4] -&gt; Atlantic Ocean [1,3]: [1,3] -&gt; [0,3] -&gt; Pacific Ocean &nbsp; [1,3] -&gt; [1,4] -&gt; Atlantic Ocean [1,4]: [1,4] -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Ocean &nbsp; [1,4] -&gt; Atlantic Ocean [2,2]: [2,2] -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Ocean &nbsp; [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Ocean [3,0]: [3,0] -&gt; Pacific Ocean &nbsp; [3,0] -&gt; [4,0] -&gt; Atlantic Ocean [3,1]: [3,1] -&gt; [3,0] -&gt; Pacific Ocean &nbsp; [3,1] -&gt; [4,1] -&gt; Atlantic Ocean [4,0]: [4,0] -&gt; Pacific Ocean [4,0] -&gt; Atlantic Ocean Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans. Example 2: Input: heights = [[1]] Output: [[0,0]] Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans. &nbsp; Constraints: m == heights.length n == heights[r].length 1 &lt;= m, n &lt;= 200 0 &lt;= heights[r][c] &lt;= 105"
  },
  {
    "number": 418,
    "title": "Sentence Screen Fitting",
    "titleSlug": "sentence-screen-fitting",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "description": ""
  },
  {
    "number": 419,
    "title": "Battleships in a Board",
    "titleSlug": "battleships-in-a-board",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Depth-First Search",
      "Matrix"
    ],
    "description": "Given an m x n matrix board where each cell is a battleship &#39;X&#39; or empty &#39;.&#39;, return the number of the battleships on board. Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships). &nbsp; Example 1: Input: board = [[&quot;X&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;X&quot;]] Output: 2 Example 2: Input: board = [[&quot;.&quot;]] Output: 0 &nbsp; Constraints: m == board.length n == board[i].length 1 &lt;= m, n &lt;= 200 board[i][j] is either &#39;.&#39; or &#39;X&#39;. &nbsp; Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?"
  },
  {
    "number": 420,
    "title": "Strong Password Checker",
    "titleSlug": "strong-password-checker",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "A password is considered strong if the below conditions are all met: It has at least 6 characters and at most 20 characters. It contains at least one lowercase letter, at least one uppercase letter, and at least one digit. It does not contain three repeating characters in a row (i.e., &quot;Baaabb0&quot; is weak, but &quot;Baaba0&quot; is strong). Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0. In one step, you can: Insert one character to password, Delete one character from password, or Replace one character of password with another character. &nbsp; Example 1: Input: password = \"a\" Output: 5 Example 2: Input: password = \"aA1\" Output: 3 Example 3: Input: password = \"1337C0d3\" Output: 0 &nbsp; Constraints: 1 &lt;= password.length &lt;= 50 password consists of letters, digits, dot&nbsp;&#39;.&#39; or exclamation mark &#39;!&#39;."
  },
  {
    "number": 421,
    "title": "Maximum XOR of Two Numbers in an Array",
    "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Trie"
    ],
    "description": "Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 &lt;= i &lt;= j &lt; n. &nbsp; Example 1: Input: nums = [3,10,5,25,2,8] Output: 28 Explanation: The maximum result is 5 XOR 25 = 28. Example 2: Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70] Output: 127 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 2 * 105 0 &lt;= nums[i] &lt;= 231 - 1"
  },
  {
    "number": 422,
    "title": "Valid Word Square",
    "titleSlug": "valid-word-square",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 423,
    "title": "Reconstruct Original Digits from English",
    "titleSlug": "reconstruct-original-digits-from-english",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "description": "Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order. &nbsp; Example 1: Input: s = \"owoztneoer\" Output: \"012\" Example 2: Input: s = \"fviefuro\" Output: \"45\" &nbsp; Constraints: 1 &lt;= s.length &lt;= 105 s[i] is one of the characters [&quot;e&quot;,&quot;g&quot;,&quot;f&quot;,&quot;i&quot;,&quot;h&quot;,&quot;o&quot;,&quot;n&quot;,&quot;s&quot;,&quot;r&quot;,&quot;u&quot;,&quot;t&quot;,&quot;w&quot;,&quot;v&quot;,&quot;x&quot;,&quot;z&quot;]. s is guaranteed to be valid."
  },
  {
    "number": 424,
    "title": "Longest Repeating Character Replacement",
    "titleSlug": "longest-repeating-character-replacement",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times. Return the length of the longest substring containing the same letter you can get after performing the above operations. &nbsp; Example 1: Input: s = &quot;ABAB&quot;, k = 2 Output: 4 Explanation: Replace the two &#39;A&#39;s with two &#39;B&#39;s or vice versa. Example 2: Input: s = &quot;AABABBA&quot;, k = 1 Output: 4 Explanation: Replace the one &#39;A&#39; in the middle with &#39;B&#39; and form &quot;AABBBBA&quot;. The substring &quot;BBBB&quot; has the longest repeating letters, which is 4. There may exists other ways to achieve this answer too. &nbsp; Constraints: 1 &lt;= s.length &lt;= 105 s consists of only uppercase English letters. 0 &lt;= k &lt;= s.length"
  },
  {
    "number": 425,
    "title": "Word Squares",
    "titleSlug": "word-squares",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Backtracking",
      "Trie"
    ],
    "description": ""
  },
  {
    "number": 426,
    "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
    "titleSlug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree",
      "Doubly-Linked List"
    ],
    "description": ""
  },
  {
    "number": 427,
    "title": "Construct Quad Tree",
    "titleSlug": "construct-quad-tree",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Divide and Conquer",
      "Tree",
      "Matrix"
    ],
    "description": "Given a n * n matrix grid of 0&#39;s and 1&#39;s only. We want to represent grid with a Quad-Tree. Return the root of the Quad-Tree representing grid. A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes: val: True if the node represents a grid of 1&#39;s or False if the node represents a grid of 0&#39;s. Notice that you can assign the val to True or False when isLeaf is False, and both are accepted in the answer. isLeaf: True if the node is a leaf node on the tree or False if the node has four children. class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } We can construct a Quad-Tree from a two-dimensional area using the following steps: If the current grid has the same value (i.e all 1&#39;s or all 0&#39;s) set isLeaf True and set val to the value of the grid and set the four children to Null and stop. If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo. Recurse for each of the children with the proper sub-grid. If you want to know more about the Quad-Tree, you can refer to the wiki. Quad-Tree format: You don&#39;t need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below. It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val]. If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0. &nbsp; Example 1: Input: grid = [[0,1],[1,0]] Output: [[0,1],[1,0],[1,1],[1,1],[1,0]] Explanation: The explanation of this example is shown below: Notice that 0 represents False and 1 represents True in the photo representing the Quad-Tree. Example 2: Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]] Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] Explanation: All values in the grid are not the same. We divide the grid into four sub-grids. The topLeft, bottomLeft and bottomRight each has the same value. The topRight have different values so we divide it into 4 sub-grids where each has the same value. Explanation is shown in the photo below: &nbsp; Constraints: n == grid.length == grid[i].length n == 2x where 0 &lt;= x &lt;= 6"
  },
  {
    "number": 428,
    "title": "Serialize and Deserialize N-ary Tree",
    "titleSlug": "serialize-and-deserialize-n-ary-tree",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": ""
  },
  {
    "number": 429,
    "title": "N-ary Tree Level Order Traversal",
    "titleSlug": "n-ary-tree-level-order-traversal",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "description": "Given an n-ary tree, return the level order traversal of its nodes&#39; values. Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples). &nbsp; Example 1: Input: root = [1,null,3,2,4,null,5,6] Output: [[1],[3,2,4],[5,6]] Example 2: Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]] &nbsp; Constraints: The height of the n-ary tree is less than or equal to 1000 The total number of nodes is between [0, 104]"
  },
  {
    "number": 430,
    "title": "Flatten a Multilevel Doubly Linked List",
    "titleSlug": "flatten-a-multilevel-doubly-linked-list",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Depth-First Search",
      "Doubly-Linked List"
    ],
    "description": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below. Given the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list. Return the head of the flattened list. The nodes in the list must have all of their child pointers set to null. &nbsp; Example 1: Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12] Output: [1,2,3,7,8,11,12,9,10,4,5,6] Explanation: The multilevel linked list in the input is shown. After flattening the multilevel linked list it becomes: Example 2: Input: head = [1,2,null,3] Output: [1,3,2] Explanation: The multilevel linked list in the input is shown. After flattening the multilevel linked list it becomes: Example 3: Input: head = [] Output: [] Explanation: There could be empty list in the input. &nbsp; Constraints: The number of Nodes will not exceed 1000. 1 &lt;= Node.val &lt;= 105 &nbsp; How the multilevel linked list is represented in test cases: We use the multilevel linked list from Example 1 above: 1---2---3---4---5---6--NULL | 7---8---9---10--NULL | 11--12--NULL The serialization of each level is as follows: [1,2,3,4,5,6,null] [7,8,9,10,null] [11,12,null] To serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes: [1, 2, 3, 4, 5, 6, null] | [null, null, 7, 8, 9, 10, null] | [ null, 11, 12, null] Merging the serialization of each level and removing trailing nulls we obtain: [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]"
  },
  {
    "number": 431,
    "title": "Encode N-ary Tree to Binary Tree",
    "titleSlug": "encode-n-ary-tree-to-binary-tree",
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "description": ""
  },
  {
    "number": 432,
    "title": "All O`one Data Structure",
    "titleSlug": "all-oone-data-structure",
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "description": "Design a data structure to store the strings&#39; count with the ability to return the strings with minimum and maximum counts. Implement the AllOne class: AllOne() Initializes the object of the data structure. inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1. dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement. getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string &quot;&quot;. getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string &quot;&quot;. Note that each function must run in O(1) average time complexity. &nbsp; Example 1: Input [&quot;AllOne&quot;, &quot;inc&quot;, &quot;inc&quot;, &quot;getMaxKey&quot;, &quot;getMinKey&quot;, &quot;inc&quot;, &quot;getMaxKey&quot;, &quot;getMinKey&quot;] [[], [&quot;hello&quot;], [&quot;hello&quot;], [], [], [&quot;leet&quot;], [], []] Output [null, null, null, &quot;hello&quot;, &quot;hello&quot;, null, &quot;hello&quot;, &quot;leet&quot;] Explanation AllOne allOne = new AllOne(); allOne.inc(&quot;hello&quot;); allOne.inc(&quot;hello&quot;); allOne.getMaxKey(); // return &quot;hello&quot; allOne.getMinKey(); // return &quot;hello&quot; allOne.inc(&quot;leet&quot;); allOne.getMaxKey(); // return &quot;hello&quot; allOne.getMinKey(); // return &quot;leet&quot; &nbsp; Constraints: 1 &lt;= key.length &lt;= 10 key consists of lowercase English letters. It is guaranteed that for each call to dec, key is existing in the data structure. At most 5 * 104&nbsp;calls will be made to inc, dec, getMaxKey, and getMinKey."
  },
  {
    "number": 433,
    "title": "Minimum Genetic Mutation",
    "titleSlug": "minimum-genetic-mutation",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Breadth-First Search"
    ],
    "description": "A gene string can be represented by an 8-character long string, with choices from &#39;A&#39;, &#39;C&#39;, &#39;G&#39;, and &#39;T&#39;. Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string. For example, &quot;AACCGGTT&quot; --&gt; &quot;AACCGGTA&quot; is one mutation. There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string. Given the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1. Note that the starting point is assumed to be valid, so it might not be included in the bank. &nbsp; Example 1: Input: startGene = &quot;AACCGGTT&quot;, endGene = &quot;AACCGGTA&quot;, bank = [&quot;AACCGGTA&quot;] Output: 1 Example 2: Input: startGene = &quot;AACCGGTT&quot;, endGene = &quot;AAACGGTA&quot;, bank = [&quot;AACCGGTA&quot;,&quot;AACCGCTA&quot;,&quot;AAACGGTA&quot;] Output: 2 &nbsp; Constraints: 0 &lt;= bank.length &lt;= 10 startGene.length == endGene.length == bank[i].length == 8 startGene, endGene, and bank[i] consist of only the characters [&#39;A&#39;, &#39;C&#39;, &#39;G&#39;, &#39;T&#39;]."
  },
  {
    "number": 434,
    "title": "Number of Segments in a String",
    "titleSlug": "number-of-segments-in-a-string",
    "difficulty": "Easy",
    "tags": [
      "String"
    ],
    "description": "Given a string s, return the number of segments in the string. A segment is defined to be a contiguous sequence of non-space characters. &nbsp; Example 1: Input: s = &quot;Hello, my name is John&quot; Output: 5 Explanation: The five segments are [&quot;Hello,&quot;, &quot;my&quot;, &quot;name&quot;, &quot;is&quot;, &quot;John&quot;] Example 2: Input: s = &quot;Hello&quot; Output: 1 &nbsp; Constraints: 0 &lt;= s.length &lt;= 300 s consists of lowercase and uppercase English letters, digits, or one of the following characters &quot;!@#$%^&amp;*()_+-=&#39;,.:&quot;. The only space character in s is &#39; &#39;."
  },
  {
    "number": 435,
    "title": "Non-overlapping Intervals",
    "titleSlug": "non-overlapping-intervals",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping. &nbsp; Example 1: Input: intervals = [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping. Example 2: Input: intervals = [[1,2],[1,2],[1,2]] Output: 2 Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping. Example 3: Input: intervals = [[1,2],[2,3]] Output: 0 Explanation: You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping. &nbsp; Constraints: 1 &lt;= intervals.length &lt;= 105 intervals[i].length == 2 -5 * 104 &lt;= starti &lt; endi &lt;= 5 * 104"
  },
  {
    "number": 436,
    "title": "Find Right Interval",
    "titleSlug": "find-right-interval",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique. The right interval for an interval i is an interval j such that startj &gt;= endi and startj is minimized. Note that i may equal j. Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i. &nbsp; Example 1: Input: intervals = [[1,2]] Output: [-1] Explanation: There is only one interval in the collection, so it outputs -1. Example 2: Input: intervals = [[3,4],[2,3],[1,2]] Output: [-1,0,1] Explanation: There is no right interval for [3,4]. The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is &gt;= end1 = 3. The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is &gt;= end2 = 2. Example 3: Input: intervals = [[1,4],[2,3],[3,4]] Output: [-1,2,-1] Explanation: There is no right interval for [1,4] and [3,4]. The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is &gt;= end1 = 3. &nbsp; Constraints: 1 &lt;= intervals.length &lt;= 2 * 104 intervals[i].length == 2 -106 &lt;= starti &lt;= endi &lt;= 106 The start point of each interval is unique."
  },
  {
    "number": 437,
    "title": "Path Sum III",
    "titleSlug": "path-sum-iii",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values&nbsp;along the path equals&nbsp;targetSum. The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes). &nbsp; Example 1: Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8 Output: 3 Explanation: The paths that sum to 8 are shown. Example 2: Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 Output: 3 &nbsp; Constraints: The number of nodes in the tree is in the range [0, 1000]. -109 &lt;= Node.val &lt;= 109 -1000 &lt;= targetSum &lt;= 1000"
  },
  {
    "number": 438,
    "title": "Find All Anagrams in a String",
    "titleSlug": "find-all-anagrams-in-a-string",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given two strings s and p, return an array of all the start indices of p&#39;s anagrams in s. You may return the answer in any order. &nbsp; Example 1: Input: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot; Output: [0,6] Explanation: The substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;. The substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;. Example 2: Input: s = &quot;abab&quot;, p = &quot;ab&quot; Output: [0,1,2] Explanation: The substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;. The substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;. The substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;. &nbsp; Constraints: 1 &lt;= s.length, p.length &lt;= 3 * 104 s and p consist of lowercase English letters."
  },
  {
    "number": 439,
    "title": "Ternary Expression Parser",
    "titleSlug": "ternary-expression-parser",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Stack",
      "Recursion"
    ],
    "description": ""
  },
  {
    "number": 440,
    "title": "K-th Smallest in Lexicographical Order",
    "titleSlug": "k-th-smallest-in-lexicographical-order",
    "difficulty": "Hard",
    "tags": [
      "Trie"
    ],
    "description": "Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n]. &nbsp; Example 1: Input: n = 13, k = 2 Output: 10 Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10. Example 2: Input: n = 1, k = 1 Output: 1 &nbsp; Constraints: 1 &lt;= k &lt;= n &lt;= 109"
  },
  {
    "number": 441,
    "title": "Arranging Coins",
    "titleSlug": "arranging-coins",
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "description": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete. Given the integer n, return the number of complete rows of the staircase you will build. &nbsp; Example 1: Input: n = 5 Output: 2 Explanation: Because the 3rd row is incomplete, we return 2. Example 2: Input: n = 8 Output: 3 Explanation: Because the 4th row is incomplete, we return 3. &nbsp; Constraints: 1 &lt;= n &lt;= 231 - 1"
  },
  {
    "number": 442,
    "title": "Find All Duplicates in an Array",
    "titleSlug": "find-all-duplicates-in-an-array",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears at most twice, return an array of all the integers that appears twice. You must write an algorithm that runs in O(n) time and uses only constant auxiliary space, excluding the space needed to store the output &nbsp; Example 1: Input: nums = [4,3,2,7,8,2,3,1] Output: [2,3] Example 2: Input: nums = [1,1,2] Output: [1] Example 3: Input: nums = [1] Output: [] &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 105 1 &lt;= nums[i] &lt;= n Each element in nums appears once or twice."
  },
  {
    "number": 443,
    "title": "String Compression",
    "titleSlug": "string-compression",
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": "Given an array of characters chars, compress it using the following algorithm: Begin with an empty string s. For each group of consecutive repeating characters in chars: If the group&#39;s length is 1, append the character to s. Otherwise, append the character followed by the group&#39;s length. The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars. After you are done modifying the input array, return the new length of the array. You must write an algorithm that uses only constant extra space. &nbsp; Example 1: Input: chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;] Output: Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;] Explanation: The groups are &quot;aa&quot;, &quot;bb&quot;, and &quot;ccc&quot;. This compresses to &quot;a2b2c3&quot;. Example 2: Input: chars = [&quot;a&quot;] Output: Return 1, and the first character of the input array should be: [&quot;a&quot;] Explanation: The only group is &quot;a&quot;, which remains uncompressed since it&#39;s a single character. Example 3: Input: chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;] Output: Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]. Explanation: The groups are &quot;a&quot; and &quot;bbbbbbbbbbbb&quot;. This compresses to &quot;ab12&quot;. &nbsp; Constraints: 1 &lt;= chars.length &lt;= 2000 chars[i] is a lowercase English letter, uppercase English letter, digit, or symbol."
  },
  {
    "number": 444,
    "title": "Sequence Reconstruction",
    "titleSlug": "sequence-reconstruction",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Graph",
      "Topological Sort"
    ],
    "description": ""
  },
  {
    "number": 445,
    "title": "Add Two Numbers II",
    "titleSlug": "add-two-numbers-ii",
    "difficulty": "Medium",
    "tags": [
      "Linked List",
      "Math",
      "Stack"
    ],
    "description": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. &nbsp; Example 1: Input: l1 = [7,2,4,3], l2 = [5,6,4] Output: [7,8,0,7] Example 2: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [8,0,7] Example 3: Input: l1 = [0], l2 = [0] Output: [0] &nbsp; Constraints: The number of nodes in each linked list is in the range [1, 100]. 0 &lt;= Node.val &lt;= 9 It is guaranteed that the list represents a number that does not have leading zeros. &nbsp; Follow up:&nbsp;Could you solve it without reversing the input lists?"
  },
  {
    "number": 446,
    "title": "Arithmetic Slices II - Subsequence",
    "titleSlug": "arithmetic-slices-ii-subsequence",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, return the number of all the arithmetic subsequences of nums. A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences. For example, [1, 1, 2, 5, 7] is not an arithmetic sequence. A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array. For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10]. The test cases are generated so that the answer fits in 32-bit integer. &nbsp; Example 1: Input: nums = [2,4,6,8,10] Output: 7 Explanation: All arithmetic subsequence slices are: [2,4,6] [4,6,8] [6,8,10] [2,4,6,8] [4,6,8,10] [2,4,6,8,10] [2,6,10] Example 2: Input: nums = [7,7,7,7,7] Output: 16 Explanation: Any subsequence of this array is arithmetic. &nbsp; Constraints: 1&nbsp; &lt;= nums.length &lt;= 1000 -231 &lt;= nums[i] &lt;= 231 - 1"
  },
  {
    "number": 447,
    "title": "Number of Boomerangs",
    "titleSlug": "number-of-boomerangs",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Math"
    ],
    "description": "You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters). Return the number of boomerangs. &nbsp; Example 1: Input: points = [[0,0],[1,0],[2,0]] Output: 2 Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]. Example 2: Input: points = [[1,1],[2,2],[3,3]] Output: 2 Example 3: Input: points = [[1,1]] Output: 0 &nbsp; Constraints: n == points.length 1 &lt;= n &lt;= 500 points[i].length == 2 -104 &lt;= xi, yi &lt;= 104 All the points are unique."
  },
  {
    "number": 448,
    "title": "Find All Numbers Disappeared in an Array",
    "titleSlug": "find-all-numbers-disappeared-in-an-array",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums. &nbsp; Example 1: Input: nums = [4,3,2,7,8,2,3,1] Output: [5,6] Example 2: Input: nums = [1,1] Output: [2] &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 105 1 &lt;= nums[i] &lt;= n &nbsp; Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space."
  },
  {
    "number": 449,
    "title": "Serialize and Deserialize BST",
    "titleSlug": "serialize-and-deserialize-bst",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure. The encoded string should be as compact as possible. &nbsp; Example 1: Input: root = [2,1,3] Output: [2,1,3] Example 2: Input: root = [] Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 104]. 0 &lt;= Node.val &lt;= 104 The input tree is guaranteed to be a binary search tree."
  },
  {
    "number": 450,
    "title": "Delete Node in a BST",
    "titleSlug": "delete-node-in-a-bst",
    "difficulty": "Medium",
    "tags": [
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST. Basically, the deletion can be divided into two stages: Search for a node to remove. If the node is found, delete the node. &nbsp; Example 1: Input: root = [5,3,6,2,4,null,7], key = 3 Output: [5,4,6,2,null,null,7] Explanation: Given key to delete is 3. So we find the node with value 3 and delete it. One valid answer is [5,4,6,2,null,null,7], shown in the above BST. Please notice that another valid answer is [5,2,6,null,4,null,7] and it&#39;s also accepted. Example 2: Input: root = [5,3,6,2,4,null,7], key = 0 Output: [5,3,6,2,4,null,7] Explanation: The tree does not contain a node with value = 0. Example 3: Input: root = [], key = 0 Output: [] &nbsp; Constraints: The number of nodes in the tree is in the range [0, 104]. -105 &lt;= Node.val &lt;= 105 Each node has a unique value. root is a valid binary search tree. -105 &lt;= key &lt;= 105 &nbsp; Follow up: Could you solve it with time complexity O(height of tree)?"
  },
  {
    "number": 451,
    "title": "Sort Characters By Frequency",
    "titleSlug": "sort-characters-by-frequency",
    "difficulty": "Medium",
    "tags": [
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting"
    ],
    "description": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string. Return the sorted string. If there are multiple answers, return any of them. &nbsp; Example 1: Input: s = &quot;tree&quot; Output: &quot;eert&quot; Explanation: &#39;e&#39; appears twice while &#39;r&#39; and &#39;t&#39; both appear once. So &#39;e&#39; must appear before both &#39;r&#39; and &#39;t&#39;. Therefore &quot;eetr&quot; is also a valid answer. Example 2: Input: s = &quot;cccaaa&quot; Output: &quot;aaaccc&quot; Explanation: Both &#39;c&#39; and &#39;a&#39; appear three times, so both &quot;cccaaa&quot; and &quot;aaaccc&quot; are valid answers. Note that &quot;cacaca&quot; is incorrect, as the same characters must be together. Example 3: Input: s = &quot;Aabb&quot; Output: &quot;bbAa&quot; Explanation: &quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect. Note that &#39;A&#39; and &#39;a&#39; are treated as two different characters. &nbsp; Constraints: 1 &lt;= s.length &lt;= 5 * 105 s consists of uppercase and lowercase English letters and digits."
  },
  {
    "number": 452,
    "title": "Minimum Number of Arrows to Burst Balloons",
    "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons. Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart &lt;= x &lt;= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path. Given the array points, return the minimum number of arrows that must be shot to burst all balloons. &nbsp; Example 1: Input: points = [[10,16],[2,8],[1,6],[7,12]] Output: 2 Explanation: The balloons can be burst by 2 arrows: - Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6]. - Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12]. Example 2: Input: points = [[1,2],[3,4],[5,6],[7,8]] Output: 4 Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows. Example 3: Input: points = [[1,2],[2,3],[3,4],[4,5]] Output: 2 Explanation: The balloons can be burst by 2 arrows: - Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3]. - Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5]. &nbsp; Constraints: 1 &lt;= points.length &lt;= 105 points[i].length == 2 -231 &lt;= xstart &lt; xend &lt;= 231 - 1"
  },
  {
    "number": 453,
    "title": "Minimum Moves to Equal Array Elements",
    "titleSlug": "minimum-moves-to-equal-array-elements",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math"
    ],
    "description": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal. In one move, you can increment n - 1 elements of the array by 1. &nbsp; Example 1: Input: nums = [1,2,3] Output: 3 Explanation: Only three moves are needed (remember each move increments two elements): [1,2,3] =&gt; [2,3,3] =&gt; [3,4,3] =&gt; [4,4,4] Example 2: Input: nums = [1,1,1] Output: 0 &nbsp; Constraints: n == nums.length 1 &lt;= nums.length &lt;= 105 -109 &lt;= nums[i] &lt;= 109 The answer is guaranteed to fit in a 32-bit integer."
  },
  {
    "number": 454,
    "title": "4Sum II",
    "titleSlug": "4sum-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table"
    ],
    "description": "Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that: 0 &lt;= i, j, k, l &lt; n nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0 &nbsp; Example 1: Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2] Output: 2 Explanation: The two tuples are: 1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0 Example 2: Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0] Output: 1 &nbsp; Constraints: n == nums1.length n == nums2.length n == nums3.length n == nums4.length 1 &lt;= n &lt;= 200 -228 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 228"
  },
  {
    "number": 455,
    "title": "Assign Cookies",
    "titleSlug": "assign-cookies",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] &gt;= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number. &nbsp; Example 1: Input: g = [1,2,3], s = [1,1] Output: 1 Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. You need to output 1. Example 2: Input: g = [1,2], s = [1,2,3] Output: 2 Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. You have 3 cookies and their sizes are big enough to gratify all of the children, You need to output 2. &nbsp; Constraints: 1 &lt;= g.length &lt;= 3 * 104 0 &lt;= s.length &lt;= 3 * 104 1 &lt;= g[i], s[j] &lt;= 231 - 1 &nbsp; Note: This question is the same as 2410: Maximum Matching of Players With Trainers."
  },
  {
    "number": 456,
    "title": "132 Pattern",
    "titleSlug": "132-pattern",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Binary Search",
      "Stack",
      "Monotonic Stack",
      "Ordered Set"
    ],
    "description": "Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i &lt; j &lt; k and nums[i] &lt; nums[k] &lt; nums[j]. Return true if there is a 132 pattern in nums, otherwise, return false. &nbsp; Example 1: Input: nums = [1,2,3,4] Output: false Explanation: There is no 132 pattern in the sequence. Example 2: Input: nums = [3,1,4,2] Output: true Explanation: There is a 132 pattern in the sequence: [1, 4, 2]. Example 3: Input: nums = [-1,3,2,0] Output: true Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]. &nbsp; Constraints: n == nums.length 1 &lt;= n &lt;= 2 * 105 -109 &lt;= nums[i] &lt;= 109"
  },
  {
    "number": 457,
    "title": "Circular Array Loop",
    "titleSlug": "circular-array-loop",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "description": "You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i: If nums[i] is positive, move nums[i] steps forward, and If nums[i] is negative, move nums[i] steps backward. Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element. A cycle in the array consists of a sequence of indices seq of length k where: Following the movement rules above results in the repeating index sequence seq[0] -&gt; seq[1] -&gt; ... -&gt; seq[k - 1] -&gt; seq[0] -&gt; ... Every nums[seq[j]] is either all positive or all negative. k &gt; 1 Return true if there is a cycle in nums, or false otherwise. &nbsp; Example 1: Input: nums = [2,-1,1,2,2] Output: true Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. We can see the cycle 0 --&gt; 2 --&gt; 3 --&gt; 0 --&gt; ..., and all of its nodes are white (jumping in the same direction). Example 2: Input: nums = [-1,-2,-3,-4,-5,6] Output: false Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. The only cycle is of size 1, so we return false. Example 3: Input: nums = [1,-1,5,1,4] Output: true Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. We can see the cycle 0 --&gt; 1 --&gt; 0 --&gt; ..., and while it is of size &gt; 1, it has a node jumping forward and a node jumping backward, so it is not a cycle. We can see the cycle 3 --&gt; 4 --&gt; 3 --&gt; ..., and all of its nodes are white (jumping in the same direction). &nbsp; Constraints: 1 &lt;= nums.length &lt;= 5000 -1000 &lt;= nums[i] &lt;= 1000 nums[i] != 0 &nbsp; Follow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?"
  },
  {
    "number": 458,
    "title": "Poor Pigs",
    "titleSlug": "poor-pigs",
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous. You can feed the pigs according to these steps: Choose some live pigs to feed. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs. Wait for minutesToDie minutes. You may not feed any other pigs during this time. After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive. Repeat this process until you run out of time. Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time. &nbsp; Example 1: Input: buckets = 4, minutesToDie = 15, minutesToTest = 15 Output: 2 Explanation: We can determine the poisonous bucket as follows: At time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3. At time 15, there are 4 possible outcomes: - If only the first pig dies, then bucket 1 must be poisonous. - If only the second pig dies, then bucket 3 must be poisonous. - If both pigs die, then bucket 2 must be poisonous. - If neither pig dies, then bucket 4 must be poisonous. Example 2: Input: buckets = 4, minutesToDie = 15, minutesToTest = 30 Output: 2 Explanation: We can determine the poisonous bucket as follows: At time 0, feed the first pig bucket 1, and feed the second pig bucket 2. At time 15, there are 2 possible outcomes: - If either pig dies, then the poisonous bucket is the one it was fed. - If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4. At time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed. &nbsp; Constraints: 1 &lt;= buckets &lt;= 1000 1 &lt;=&nbsp;minutesToDie &lt;=&nbsp;minutesToTest &lt;= 100"
  },
  {
    "number": 459,
    "title": "Repeated Substring Pattern",
    "titleSlug": "repeated-substring-pattern",
    "difficulty": "Easy",
    "tags": [
      "String",
      "String Matching"
    ],
    "description": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. &nbsp; Example 1: Input: s = &quot;abab&quot; Output: true Explanation: It is the substring &quot;ab&quot; twice. Example 2: Input: s = &quot;aba&quot; Output: false Example 3: Input: s = &quot;abcabcabcabc&quot; Output: true Explanation: It is the substring &quot;abc&quot; four times or the substring &quot;abcabc&quot; twice. &nbsp; Constraints: 1 &lt;= s.length &lt;= 104 s consists of lowercase English letters."
  },
  {
    "number": 460,
    "title": "LFU Cache",
    "titleSlug": "lfu-cache",
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "description": "Design and implement a data structure for a Least Frequently Used (LFU) cache. Implement the LFUCache class: LFUCache(int capacity) Initializes the object with the capacity of the data structure. int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1. void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated. To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key. When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it. The functions&nbsp;get&nbsp;and&nbsp;put&nbsp;must each run in O(1) average time complexity. &nbsp; Example 1: Input [&quot;LFUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]] Output [null, null, null, 1, null, -1, 3, null, -1, 3, 4] Explanation // cnt(x) = the use counter for key x // cache=[] will show the last used order for tiebreakers (leftmost element is most recent) LFUCache lfu = new LFUCache(2); lfu.put(1, 1); // cache=[1,_], cnt(1)=1 lfu.put(2, 2); // cache=[2,1], cnt(2)=1, cnt(1)=1 lfu.get(1); // return 1 // cache=[1,2], cnt(2)=1, cnt(1)=2 lfu.put(3, 3); // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2. &nbsp; // cache=[3,1], cnt(3)=1, cnt(1)=2 lfu.get(2); // return -1 (not found) lfu.get(3); // return 3 // cache=[3,1], cnt(3)=2, cnt(1)=2 lfu.put(4, 4); // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1. // cache=[4,3], cnt(4)=1, cnt(3)=2 lfu.get(1); // return -1 (not found) lfu.get(3); // return 3 // cache=[3,4], cnt(4)=1, cnt(3)=3 lfu.get(4); // return 4 // cache=[4,3], cnt(4)=2, cnt(3)=3 &nbsp; Constraints: 1 &lt;= capacity&nbsp;&lt;= 104 0 &lt;= key &lt;= 105 0 &lt;= value &lt;= 109 At most 2 * 105&nbsp;calls will be made to get and put. &nbsp; &nbsp;"
  },
  {
    "number": 461,
    "title": "Hamming Distance",
    "titleSlug": "hamming-distance",
    "difficulty": "Easy",
    "tags": [
      "Bit Manipulation"
    ],
    "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers x and y, return the Hamming distance between them. &nbsp; Example 1: Input: x = 1, y = 4 Output: 2 Explanation: 1 (0 0 0 1) 4 (0 1 0 0) &uarr; &uarr; The above arrows point to positions where the corresponding bits are different. Example 2: Input: x = 3, y = 1 Output: 1 &nbsp; Constraints: 0 &lt;=&nbsp;x, y &lt;= 231 - 1 &nbsp; Note: This question is the same as 2220: Minimum Bit Flips to Convert Number."
  },
  {
    "number": 462,
    "title": "Minimum Moves to Equal Array Elements II",
    "titleSlug": "minimum-moves-to-equal-array-elements-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Sorting"
    ],
    "description": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal. In one move, you can increment or decrement an element of the array by 1. Test cases are designed so that the answer will fit in a 32-bit integer. &nbsp; Example 1: Input: nums = [1,2,3] Output: 2 Explanation: Only two moves are needed (remember each move increments or decrements one element): [1,2,3] =&gt; [2,2,3] =&gt; [2,2,2] Example 2: Input: nums = [1,10,2,9] Output: 16 &nbsp; Constraints: n == nums.length 1 &lt;= nums.length &lt;= 105 -109 &lt;= nums[i] &lt;= 109"
  },
  {
    "number": 463,
    "title": "Island Perimeter",
    "titleSlug": "island-perimeter",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given row x col grid representing a map where grid[i][j] = 1 represents&nbsp;land and grid[i][j] = 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn&#39;t have &quot;lakes&quot;, meaning the water inside isn&#39;t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don&#39;t exceed 100. Determine the perimeter of the island. &nbsp; Example 1: Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]] Output: 16 Explanation: The perimeter is the 16 yellow stripes in the image above. Example 2: Input: grid = [[1]] Output: 4 Example 3: Input: grid = [[1,0]] Output: 4 &nbsp; Constraints: row == grid.length col == grid[i].length 1 &lt;= row, col &lt;= 100 grid[i][j] is 0 or 1. There is exactly one island in grid."
  },
  {
    "number": 464,
    "title": "Can I Win",
    "titleSlug": "can-i-win",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Game Theory",
      "Bitmask"
    ],
    "description": "In the &quot;100 game&quot; two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins. What if we change the game so that players cannot re-use integers? For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total &gt;= 100. Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally. &nbsp; Example 1: Input: maxChoosableInteger = 10, desiredTotal = 11 Output: false Explanation: No matter which integer the first player choose, the first player will lose. The first player can choose an integer from 1 up to 10. If the first player choose 1, the second player can only choose integers from 2 up to 10. The second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal. Same with other integers chosen by the first player, the second player will always win. Example 2: Input: maxChoosableInteger = 10, desiredTotal = 0 Output: true Example 3: Input: maxChoosableInteger = 10, desiredTotal = 1 Output: true &nbsp; Constraints: 1 &lt;= maxChoosableInteger &lt;= 20 0 &lt;= desiredTotal &lt;= 300"
  },
  {
    "number": 465,
    "title": "Optimal Account Balancing",
    "titleSlug": "optimal-account-balancing",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": ""
  },
  {
    "number": 466,
    "title": "Count The Repetitions",
    "titleSlug": "count-the-repetitions",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": "We define str = [s, n] as the string str which consists of the string s concatenated n times. For example, str == [&quot;abc&quot;, 3] ==&quot;abcabcabc&quot;. We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, s1 = &quot;abc&quot; can be obtained from s2 = &quot;abdbec&quot; based on our definition by removing the bolded underlined characters. You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2]. Return the maximum integer m such that str = [str2, m] can be obtained from str1. &nbsp; Example 1: Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2 Output: 2 Example 2: Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1 Output: 1 &nbsp; Constraints: 1 &lt;= s1.length, s2.length &lt;= 100 s1 and s2 consist of lowercase English letters. 1 &lt;= n1, n2 &lt;= 106"
  },
  {
    "number": 467,
    "title": "Unique Substrings in Wraparound String",
    "titleSlug": "unique-substrings-in-wraparound-string",
    "difficulty": "Medium",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": "We define the string base to be the infinite wraparound string of &quot;abcdefghijklmnopqrstuvwxyz&quot;, so base will look like this: &quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;. Given a string s, return the number of unique non-empty substrings of s are present in base. &nbsp; Example 1: Input: s = &quot;a&quot; Output: 1 Explanation: Only the substring &quot;a&quot; of s is in base. Example 2: Input: s = &quot;cac&quot; Output: 2 Explanation: There are two substrings (&quot;a&quot;, &quot;c&quot;) of s in base. Example 3: Input: s = &quot;zab&quot; Output: 6 Explanation: There are six substrings (&quot;z&quot;, &quot;a&quot;, &quot;b&quot;, &quot;za&quot;, &quot;ab&quot;, and &quot;zab&quot;) of s in base. &nbsp; Constraints: 1 &lt;= s.length &lt;= 105 s consists of lowercase English letters."
  },
  {
    "number": 468,
    "title": "Validate IP Address",
    "titleSlug": "validate-ip-address",
    "difficulty": "Medium",
    "tags": [
      "String"
    ],
    "description": "Given a string queryIP, return &quot;IPv4&quot; if IP is a valid IPv4 address, &quot;IPv6&quot; if IP is a valid IPv6 address or &quot;Neither&quot; if IP is not a correct IP of any type. A valid IPv4 address is an IP in the form &quot;x1.x2.x3.x4&quot; where 0 &lt;= xi &lt;= 255 and xi cannot contain leading zeros. For example, &quot;192.168.1.1&quot; and &quot;192.168.1.0&quot; are valid IPv4 addresses while &quot;192.168.01.1&quot;, &quot;192.168.1.00&quot;, and &quot;192.168@1.1&quot; are invalid IPv4 addresses. A valid IPv6 address is an IP in the form &quot;x1:x2:x3:x4:x5:x6:x7:x8&quot; where: 1 &lt;= xi.length &lt;= 4 xi is a hexadecimal string which may contain digits, lowercase English letter (&#39;a&#39; to &#39;f&#39;) and upper-case English letters (&#39;A&#39; to &#39;F&#39;). Leading zeros are allowed in xi. For example, &quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot; and &quot;2001:db8:85a3:0:0:8A2E:0370:7334&quot; are valid IPv6 addresses, while &quot;2001:0db8:85a3::8A2E:037j:7334&quot; and &quot;02001:0db8:85a3:0000:0000:8a2e:0370:7334&quot; are invalid IPv6 addresses. &nbsp; Example 1: Input: queryIP = &quot;172.16.254.1&quot; Output: &quot;IPv4&quot; Explanation: This is a valid IPv4 address, return &quot;IPv4&quot;. Example 2: Input: queryIP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot; Output: &quot;IPv6&quot; Explanation: This is a valid IPv6 address, return &quot;IPv6&quot;. Example 3: Input: queryIP = &quot;256.256.256.256&quot; Output: &quot;Neither&quot; Explanation: This is neither a IPv4 address nor a IPv6 address. &nbsp; Constraints: queryIP consists only of English letters, digits and the characters &#39;.&#39; and &#39;:&#39;."
  },
  {
    "number": 469,
    "title": "Convex Polygon",
    "titleSlug": "convex-polygon",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": ""
  },
  {
    "number": 470,
    "title": "Implement Rand10() Using Rand7()",
    "titleSlug": "implement-rand10-using-rand7",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Rejection Sampling",
      "Randomized",
      "Probability and Statistics"
    ],
    "description": "Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn&#39;t call any other API. Please do not use a language&#39;s built-in random API. Each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10(). &nbsp; Example 1: Input: n = 1 Output: [2] Example 2: Input: n = 2 Output: [2,8] Example 3: Input: n = 3 Output: [3,8,10] &nbsp; Constraints: 1 &lt;= n &lt;= 105 &nbsp; Follow up: What is the expected value for the number of calls to rand7() function? Could you minimize the number of calls to rand7()?"
  },
  {
    "number": 471,
    "title": "Encode String with Shortest Length",
    "titleSlug": "encode-string-with-shortest-length",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "description": ""
  },
  {
    "number": 472,
    "title": "Concatenated Words",
    "titleSlug": "concatenated-words",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Depth-First Search",
      "Trie"
    ],
    "description": "Given an array of strings words (without duplicates), return all the concatenated words in the given list of words. A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct)&nbsp;in the given array. &nbsp; Example 1: Input: words = [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;] Output: [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;] Explanation: &quot;catsdogcats&quot; can be concatenated by &quot;cats&quot;, &quot;dog&quot; and &quot;cats&quot;; &quot;dogcatsdog&quot; can be concatenated by &quot;dog&quot;, &quot;cats&quot; and &quot;dog&quot;; &quot;ratcatdogcat&quot; can be concatenated by &quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot; and &quot;cat&quot;. Example 2: Input: words = [&quot;cat&quot;,&quot;dog&quot;,&quot;catdog&quot;] Output: [&quot;catdog&quot;] &nbsp; Constraints: 1 &lt;= words.length &lt;= 104 1 &lt;= words[i].length &lt;= 30 words[i] consists of only lowercase English letters. All the strings of words are unique. 1 &lt;= sum(words[i].length) &lt;= 105"
  },
  {
    "number": 473,
    "title": "Matchsticks to Square",
    "titleSlug": "matchsticks-to-square",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time. Return true if you can make this square and false otherwise. &nbsp; Example 1: Input: matchsticks = [1,1,2,2,2] Output: true Explanation: You can form a square with length 2, one side of the square came two sticks with length 1. Example 2: Input: matchsticks = [3,3,3,3,4] Output: false Explanation: You cannot find a way to form a square with all the matchsticks. &nbsp; Constraints: 1 &lt;= matchsticks.length &lt;= 15 1 &lt;= matchsticks[i] &lt;= 108"
  },
  {
    "number": 474,
    "title": "Ones and Zeroes",
    "titleSlug": "ones-and-zeroes",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given an array of binary strings strs and two integers m and n. Return the size of the largest subset of strs such that there are at most m 0&#39;s and n 1&#39;s in the subset. A set x is a subset of a set y if all elements of x are also elements of y. &nbsp; Example 1: Input: strs = [&quot;10&quot;,&quot;0001&quot;,&quot;111001&quot;,&quot;1&quot;,&quot;0&quot;], m = 5, n = 3 Output: 4 Explanation: The largest subset with at most 5 0&#39;s and 3 1&#39;s is {&quot;10&quot;, &quot;0001&quot;, &quot;1&quot;, &quot;0&quot;}, so the answer is 4. Other valid but smaller subsets include {&quot;0001&quot;, &quot;1&quot;} and {&quot;10&quot;, &quot;1&quot;, &quot;0&quot;}. {&quot;111001&quot;} is an invalid subset because it contains 4 1&#39;s, greater than the maximum of 3. Example 2: Input: strs = [&quot;10&quot;,&quot;0&quot;,&quot;1&quot;], m = 1, n = 1 Output: 2 Explanation: The largest subset is {&quot;0&quot;, &quot;1&quot;}, so the answer is 2. &nbsp; Constraints: 1 &lt;= strs.length &lt;= 600 1 &lt;= strs[i].length &lt;= 100 strs[i] consists only of digits &#39;0&#39; and &#39;1&#39;. 1 &lt;= m, n &lt;= 100"
  },
  {
    "number": 475,
    "title": "Heaters",
    "titleSlug": "heaters",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses. Every house can be warmed, as long as the house is within the heater&#39;s warm radius range.&nbsp; Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters&nbsp;so that those heaters could cover all houses. Notice that&nbsp;all the heaters follow your radius standard, and the warm radius will the same. &nbsp; Example 1: Input: houses = [1,2,3], heaters = [2] Output: 1 Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed. Example 2: Input: houses = [1,2,3,4], heaters = [1,4] Output: 1 Explanation: The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed. Example 3: Input: houses = [1,5], heaters = [2] Output: 3 &nbsp; Constraints: 1 &lt;= houses.length, heaters.length &lt;= 3 * 104 1 &lt;= houses[i], heaters[i] &lt;= 109"
  },
  {
    "number": 476,
    "title": "Number Complement",
    "titleSlug": "number-complement",
    "difficulty": "Easy",
    "tags": [
      "Bit Manipulation"
    ],
    "description": "The complement of an integer is the integer you get when you flip all the 0&#39;s to 1&#39;s and all the 1&#39;s to 0&#39;s in its binary representation. For example, The integer 5 is &quot;101&quot; in binary and its complement is &quot;010&quot; which is the integer 2. Given an integer num, return its complement. &nbsp; Example 1: Input: num = 5 Output: 2 Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2. Example 2: Input: num = 1 Output: 0 Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0. &nbsp; Constraints: 1 &lt;= num &lt; 231 &nbsp; Note: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/"
  },
  {
    "number": 477,
    "title": "Total Hamming Distance",
    "titleSlug": "total-hamming-distance",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Bit Manipulation"
    ],
    "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums. &nbsp; Example 1: Input: nums = [4,14,2] Output: 6 Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just showing the four bits relevant in this case). The answer will be: HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6. Example 2: Input: nums = [4,14,4] Output: 4 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 104 0 &lt;= nums[i] &lt;= 109 The answer for the given input will fit in a 32-bit integer."
  },
  {
    "number": 478,
    "title": "Generate Random Point in a Circle",
    "titleSlug": "generate-random-point-in-a-circle",
    "difficulty": "Medium",
    "tags": [
      "Math",
      "Geometry",
      "Rejection Sampling",
      "Randomized"
    ],
    "description": "Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle. Implement the Solution class: Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center). randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y]. &nbsp; Example 1: Input [&quot;Solution&quot;, &quot;randPoint&quot;, &quot;randPoint&quot;, &quot;randPoint&quot;] [[1.0, 0.0, 0.0], [], [], []] Output [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]] Explanation Solution solution = new Solution(1.0, 0.0, 0.0); solution.randPoint(); // return [-0.02493, -0.38077] solution.randPoint(); // return [0.82314, 0.38945] solution.randPoint(); // return [0.36572, 0.17248] &nbsp; Constraints: 0 &lt;&nbsp;radius &lt;= 108 -107 &lt;= x_center, y_center &lt;= 107 At most 3 * 104 calls will be made to randPoint."
  },
  {
    "number": 479,
    "title": "Largest Palindrome Product",
    "titleSlug": "largest-palindrome-product",
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Enumeration"
    ],
    "description": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337. &nbsp; Example 1: Input: n = 2 Output: 987 Explanation: 99 x 91 = 9009, 9009 % 1337 = 987 Example 2: Input: n = 1 Output: 9 &nbsp; Constraints: 1 &lt;= n &lt;= 8"
  },
  {
    "number": 480,
    "title": "Sliding Window Median",
    "titleSlug": "sliding-window-median",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values. For examples, if arr = [2,3,4], the median is 3. For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5. You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted. &nbsp; Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000] Explanation: Window position Median --------------- ----- [1 3 -1] -3 5 3 6 7 1 1 [3 -1 -3] 5 3 6 7 -1 1 3 [-1 -3 5] 3 6 7 -1 1 3 -1 [-3 5 3] 6 7 3 1 3 -1 -3 [5 3 6] 7 5 1 3 -1 -3 5 [3 6 7] 6 Example 2: Input: nums = [1,2,3,4,2,3,1,4,2], k = 3 Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000] &nbsp; Constraints: 1 &lt;= k &lt;= nums.length &lt;= 105 -231 &lt;= nums[i] &lt;= 231 - 1"
  },
  {
    "number": 481,
    "title": "Magical String",
    "titleSlug": "magical-string",
    "difficulty": "Medium",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "description": "A magical string s consists of only &#39;1&#39; and &#39;2&#39; and obeys the following rules: The string s is magical because concatenating the number of contiguous occurrences of characters &#39;1&#39; and &#39;2&#39; generates the string s itself. The first few elements of s is s = &quot;1221121221221121122&hellip;&hellip;&quot;. If we group the consecutive 1&#39;s and 2&#39;s in s, it will be &quot;1 22 11 2 1 22 1 22 11 2 11 22 ......&quot; and the occurrences of 1&#39;s or 2&#39;s in each group are &quot;1 2 2 1 1 2 1 2 2 1 2 2 ......&quot;. You can see that the occurrence sequence is s itself. Given an integer n, return the number of 1&#39;s in the first n number in the magical string s. &nbsp; Example 1: Input: n = 6 Output: 3 Explanation: The first 6 elements of magical string s is &quot;122112&quot; and it contains three 1&#39;s, so return 3. Example 2: Input: n = 1 Output: 1 &nbsp; Constraints: 1 &lt;= n &lt;= 105"
  },
  {
    "number": 482,
    "title": "License Key Formatting",
    "titleSlug": "license-key-formatting",
    "difficulty": "Easy",
    "tags": [
      "String"
    ],
    "description": "You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k. We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase. Return the reformatted license key. &nbsp; Example 1: Input: s = &quot;5F3Z-2e-9-w&quot;, k = 4 Output: &quot;5F3Z-2E9W&quot; Explanation: The string s has been split into two parts, each part has 4 characters. Note that the two extra dashes are not needed and can be removed. Example 2: Input: s = &quot;2-5g-3-J&quot;, k = 2 Output: &quot;2-5G-3J&quot; Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above. &nbsp; Constraints: 1 &lt;= s.length &lt;= 105 s consists of English letters, digits, and dashes &#39;-&#39;. 1 &lt;= k &lt;= 104"
  },
  {
    "number": 483,
    "title": "Smallest Good Base",
    "titleSlug": "smallest-good-base",
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "description": "Given an integer n represented as a string, return the smallest good base of n. We call k &gt;= 2 a good base of n, if all digits of n base k are 1&#39;s. &nbsp; Example 1: Input: n = &quot;13&quot; Output: &quot;3&quot; Explanation: 13 base 3 is 111. Example 2: Input: n = &quot;4681&quot; Output: &quot;8&quot; Explanation: 4681 base 8 is 11111. Example 3: Input: n = &quot;1000000000000000000&quot; Output: &quot;999999999999999999&quot; Explanation: 1000000000000000000 base 999999999999999999 is 11. &nbsp; Constraints: n is an integer in the range [3, 1018]. n does not contain any leading zeros."
  },
  {
    "number": 484,
    "title": "Find Permutation",
    "titleSlug": "find-permutation",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "String",
      "Stack",
      "Greedy"
    ],
    "description": ""
  },
  {
    "number": 485,
    "title": "Max Consecutive Ones",
    "titleSlug": "max-consecutive-ones",
    "difficulty": "Easy",
    "tags": [
      "Array"
    ],
    "description": "Given a binary array nums, return the maximum number of consecutive 1&#39;s in the array. &nbsp; Example 1: Input: nums = [1,1,0,1,1,1] Output: 3 Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3. Example 2: Input: nums = [1,0,1,1,0,1] Output: 2 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 105 nums[i] is either 0 or 1."
  },
  {
    "number": 486,
    "title": "Predict the Winner",
    "titleSlug": "predict-the-winner",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Recursion",
      "Game Theory"
    ],
    "description": "You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2. Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array. Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally. &nbsp; Example 1: Input: nums = [1,5,2] Output: false Explanation: Initially, player 1 can choose between 1 and 2. If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. Hence, player 1 will never be the winner and you need to return false. Example 2: Input: nums = [1,5,233,7] Output: true Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233. Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win. &nbsp; Constraints: 1 &lt;= nums.length &lt;= 20 0 &lt;= nums[i] &lt;= 107"
  },
  {
    "number": 487,
    "title": "Max Consecutive Ones II",
    "titleSlug": "max-consecutive-ones-ii",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": ""
  },
  {
    "number": 488,
    "title": "Zuma Game",
    "titleSlug": "zuma-game",
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack",
      "Breadth-First Search",
      "Memoization"
    ],
    "description": "You are playing a variation of the game Zuma. In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red &#39;R&#39;, yellow &#39;Y&#39;, blue &#39;B&#39;, green &#39;G&#39;, or white &#39;W&#39;. You also have several colored balls in your hand. Your goal is to clear all of the balls from the board. On each turn: Pick any ball from your hand and insert it in between two balls in the row or on either end of the row. If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board. If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left. If there are no more balls on the board, then you win the game. Repeat this process until you either win or do not have any more balls in your hand. Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1. &nbsp; Example 1: Input: board = &quot;WRRBBW&quot;, hand = &quot;RB&quot; Output: -1 Explanation: It is impossible to clear all the balls. The best you can do is: - Insert &#39;R&#39; so the board becomes WRRRBBW. WRRRBBW -&gt; WBBW. - Insert &#39;B&#39; so the board becomes WBBBW. WBBBW -&gt; WW. There are still balls remaining on the board, and you are out of balls to insert. Example 2: Input: board = &quot;WWRRBBWW&quot;, hand = &quot;WRBRW&quot; Output: 2 Explanation: To make the board empty: - Insert &#39;R&#39; so the board becomes WWRRRBBWW. WWRRRBBWW -&gt; WWBBWW. - Insert &#39;B&#39; so the board becomes WWBBBWW. WWBBBWW -&gt; WWWW -&gt; empty. 2 balls from your hand were needed to clear the board. Example 3: Input: board = &quot;G&quot;, hand = &quot;GGGGG&quot; Output: 2 Explanation: To make the board empty: - Insert &#39;G&#39; so the board becomes GG. - Insert &#39;G&#39; so the board becomes GGG. GGG -&gt; empty. 2 balls from your hand were needed to clear the board. &nbsp; Constraints: 1 &lt;= board.length &lt;= 16 1 &lt;= hand.length &lt;= 5 board and hand consist of the characters &#39;R&#39;, &#39;Y&#39;, &#39;B&#39;, &#39;G&#39;, and &#39;W&#39;. The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color."
  },
  {
    "number": 489,
    "title": "Robot Room Cleaner",
    "titleSlug": "robot-room-cleaner",
    "difficulty": "Hard",
    "tags": [
      "Backtracking",
      "Interactive"
    ],
    "description": ""
  },
  {
    "number": 490,
    "title": "The Maze",
    "titleSlug": "the-maze",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": ""
  },
  {
    "number": 491,
    "title": "Non-decreasing Subsequences",
    "titleSlug": "non-decreasing-subsequences",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Hash Table",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order. &nbsp; Example 1: Input: nums = [4,6,7,7] Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]] Example 2: Input: nums = [4,4,3,2,1] Output: [[4,4]] &nbsp; Constraints: 1 &lt;= nums.length &lt;= 15 -100 &lt;= nums[i] &lt;= 100"
  },
  {
    "number": 492,
    "title": "Construct the Rectangle",
    "titleSlug": "construct-the-rectangle",
    "difficulty": "Easy",
    "tags": [
      "Math"
    ],
    "description": "A web developer needs to know how to design a web page&#39;s size. So, given a specific rectangular web page&rsquo;s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements: The area of the rectangular web page you designed must equal to the given target area. The width W should not be larger than the length L, which means L &gt;= W. The difference between length L and width W should be as small as possible. Return an array [L, W] where L and W are the length and width of the&nbsp;web page you designed in sequence. &nbsp; Example 1: Input: area = 4 Output: [2,2] Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. But according to requirement 2, [1,4] is illegal; according to requirement 3, [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2. Example 2: Input: area = 37 Output: [37,1] Example 3: Input: area = 122122 Output: [427,286] &nbsp; Constraints: 1 &lt;= area &lt;= 107"
  },
  {
    "number": 493,
    "title": "Reverse Pairs",
    "titleSlug": "reverse-pairs",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "Given an integer array nums, return the number of reverse pairs in the array. A reverse pair is a pair (i, j) where: 0 &lt;= i &lt; j &lt; nums.length and nums[i] &gt; 2 * nums[j]. &nbsp; Example 1: Input: nums = [1,3,2,3,1] Output: 2 Explanation: The reverse pairs are: (1, 4) --&gt; nums[1] = 3, nums[4] = 1, 3 &gt; 2 * 1 (3, 4) --&gt; nums[3] = 3, nums[4] = 1, 3 &gt; 2 * 1 Example 2: Input: nums = [2,4,3,5,1] Output: 3 Explanation: The reverse pairs are: (1, 4) --&gt; nums[1] = 4, nums[4] = 1, 4 &gt; 2 * 1 (2, 4) --&gt; nums[2] = 3, nums[4] = 1, 3 &gt; 2 * 1 (3, 4) --&gt; nums[3] = 5, nums[4] = 1, 5 &gt; 2 * 1 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 5 * 104 -231 &lt;= nums[i] &lt;= 231 - 1"
  },
  {
    "number": 494,
    "title": "Target Sum",
    "titleSlug": "target-sum",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "You are given an integer array nums and an integer target. You want to build an expression out of nums by adding one of the symbols &#39;+&#39; and &#39;-&#39; before each integer in nums and then concatenate all the integers. For example, if nums = [2, 1], you can add a &#39;+&#39; before 2 and a &#39;-&#39; before 1 and concatenate them to build the expression &quot;+2-1&quot;. Return the number of different expressions that you can build, which evaluates to target. &nbsp; Example 1: Input: nums = [1,1,1,1,1], target = 3 Output: 5 Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3. -1 + 1 + 1 + 1 + 1 = 3 +1 - 1 + 1 + 1 + 1 = 3 +1 + 1 - 1 + 1 + 1 = 3 +1 + 1 + 1 - 1 + 1 = 3 +1 + 1 + 1 + 1 - 1 = 3 Example 2: Input: nums = [1], target = 1 Output: 1 &nbsp; Constraints: 1 &lt;= nums.length &lt;= 20 0 &lt;= nums[i] &lt;= 1000 0 &lt;= sum(nums[i]) &lt;= 1000 -1000 &lt;= target &lt;= 1000"
  },
  {
    "number": 495,
    "title": "Teemo Attacking",
    "titleSlug": "teemo-attacking",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Simulation"
    ],
    "description": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack. You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration. Return the total number of seconds that Ashe is poisoned. &nbsp; Example 1: Input: timeSeries = [1,4], duration = 2 Output: 4 Explanation: Teemo&#39;s attacks on Ashe go as follows: - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2. - At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5. Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total. Example 2: Input: timeSeries = [1,2], duration = 2 Output: 3 Explanation: Teemo&#39;s attacks on Ashe go as follows: - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2. - At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3. Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total. &nbsp; Constraints: 1 &lt;= timeSeries.length &lt;= 104 0 &lt;= timeSeries[i], duration &lt;= 107 timeSeries is sorted in non-decreasing order."
  },
  {
    "number": 496,
    "title": "Next Greater Element I",
    "titleSlug": "next-greater-element-i",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array. You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2. For each 0 &lt;= i &lt; nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1. Return an array ans of length nums1.length such that ans[i] is the next greater element as described above. &nbsp; Example 1: Input: nums1 = [4,1,2], nums2 = [1,3,4,2] Output: [-1,3,-1] Explanation: The next greater element for each value of nums1 is as follows: - 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1. - 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3. - 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1. Example 2: Input: nums1 = [2,4], nums2 = [1,2,3,4] Output: [3,-1] Explanation: The next greater element for each value of nums1 is as follows: - 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3. - 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1. &nbsp; Constraints: 1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000 0 &lt;= nums1[i], nums2[i] &lt;= 104 All integers in nums1 and nums2 are unique. All the integers of nums1 also appear in nums2. &nbsp; Follow up: Could you find an O(nums1.length + nums2.length) solution?"
  },
  {
    "number": 497,
    "title": "Random Point in Non-overlapping Rectangles",
    "titleSlug": "random-point-in-non-overlapping-rectangles",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Math",
      "Binary Search",
      "Reservoir Sampling",
      "Prefix Sum",
      "Ordered Set",
      "Randomized"
    ],
    "description": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle. Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned. Note that an integer point is a point that has integer coordinates. Implement the Solution class: Solution(int[][] rects) Initializes the object with the given rectangles rects. int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles. &nbsp; Example 1: Input [&quot;Solution&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;, &quot;pick&quot;] [[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []] Output [null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]] Explanation Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]); solution.pick(); // return [1, -2] solution.pick(); // return [1, -1] solution.pick(); // return [-1, -2] solution.pick(); // return [-2, -2] solution.pick(); // return [0, 0] &nbsp; Constraints: 1 &lt;= rects.length &lt;= 100 rects[i].length == 4 -109 &lt;= ai &lt; xi &lt;= 109 -109 &lt;= bi &lt; yi &lt;= 109 xi - ai &lt;= 2000 yi - bi &lt;= 2000 All the rectangles do not overlap. At most 104 calls will be made to pick."
  },
  {
    "number": 498,
    "title": "Diagonal Traverse",
    "titleSlug": "diagonal-traverse",
    "difficulty": "Medium",
    "tags": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order. &nbsp; Example 1: Input: mat = [[1,2,3],[4,5,6],[7,8,9]] Output: [1,2,4,7,5,3,6,8,9] Example 2: Input: mat = [[1,2],[3,4]] Output: [1,2,3,4] &nbsp; Constraints: m == mat.length n == mat[i].length 1 &lt;= m, n &lt;= 104 1 &lt;= m * n &lt;= 104 -105 &lt;= mat[i][j] &lt;= 105"
  },
  {
    "number": 499,
    "title": "The Maze III",
    "titleSlug": "the-maze-iii",
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Matrix",
      "Shortest Path"
    ],
    "description": ""
  },
  {
    "number": 500,
    "title": "Keyboard Row",
    "titleSlug": "keyboard-row",
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below. Note that the strings are case-insensitive, both lowercased and uppercased of the same letter are treated as if they are at the same row. In the American keyboard: the first row consists of the characters &quot;qwertyuiop&quot;, the second row consists of the characters &quot;asdfghjkl&quot;, and the third row consists of the characters &quot;zxcvbnm&quot;. &nbsp; Example 1: Input: words = [&quot;Hello&quot;,&quot;Alaska&quot;,&quot;Dad&quot;,&quot;Peace&quot;] Output: [&quot;Alaska&quot;,&quot;Dad&quot;] Explanation: Both &quot;a&quot; and &quot;A&quot; are in the 2nd row of the American keyboard due to case insensitivity. Example 2: Input: words = [&quot;omk&quot;] Output: [] Example 3: Input: words = [&quot;adsdf&quot;,&quot;sfd&quot;] Output: [&quot;adsdf&quot;,&quot;sfd&quot;] &nbsp; Constraints: 1 &lt;= words.length &lt;= 20 1 &lt;= words[i].length &lt;= 100 words[i] consists of English letters (both lowercase and uppercase).&nbsp;"
  }
]